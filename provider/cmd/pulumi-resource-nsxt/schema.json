{
    "name": "nsxt",
    "displayName": "Nsxt",
    "description": "A Pulumi package for creating and managing Nsxt resources",
    "keywords": [
        "pulumi",
        "nsxt",
        "category/network"
    ],
    "homepage": "https://github.com/SCC-Hyperscale-fr/pulumi-nsxt",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`nsxt` Terraform Provider](https://github.com/vmware/terraform-provider-nsxt).",
    "repository": "https://github.com/SCC-Hyperscale-fr/pulumi-nsxt",
    "logoUrl": "https://raw.githubusercontent.com/SCC-Hyperscale-fr/pulumi-nsxt/main/docs/nsxt.png",
    "pluginDownloadURL": "github://api.github.com/SCC-Hyperscale-fr/pulumi-nsxt",
    "publisher": "SCC-Hyperscale-fr",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "SCC-Hyperscale-fr"
        },
        "go": {
            "importBasePath": "github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "java": {
            "basePackage": "com.hyperscale",
            "buildFiles": "",
            "gradleNexusPublishPluginVersion": "",
            "gradleTest": ""
        },
        "nodejs": {
            "packageName": "@SCC-Hyperscale-fr/nsxt",
            "packageDescription": "A Pulumi package for creating and managing Nsxt resources",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/vmware/terraform-provider-nsxt)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-nsxt` repo](https://github.com/SCC-Hyperscale-fr/pulumi-nsxt/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-nsxt` repo](https://github.com/vmware/terraform-provider-nsxt/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "hyperscale_pulumi_nsxt",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/vmware/terraform-provider-nsxt)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-nsxt` repo](https://github.com/SCC-Hyperscale-fr/pulumi-nsxt/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-nsxt` repo](https://github.com/vmware/terraform-provider-nsxt/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "allowUnverifiedSsl": {
                "type": "boolean"
            },
            "ca": {
                "type": "string",
                "description": "CA certificate passed as string\n"
            },
            "caFile": {
                "type": "string"
            },
            "clientAuthCert": {
                "type": "string",
                "description": "Client certificate passed as string\n"
            },
            "clientAuthCertFile": {
                "type": "string"
            },
            "clientAuthKey": {
                "type": "string",
                "description": "Client certificate key passed as string\n"
            },
            "clientAuthKeyFile": {
                "type": "string"
            },
            "enforcementPoint": {
                "type": "string",
                "description": "Enforcement Point for NSXT Policy\n"
            },
            "globalManager": {
                "type": "boolean",
                "description": "Is this a policy global manager endpoint\n"
            },
            "host": {
                "type": "string",
                "description": "The hostname or IP address of the NSX manager.\n"
            },
            "licenseKeys": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "license keys\n"
            },
            "maxRetries": {
                "type": "integer",
                "description": "Maximum number of HTTP client retries\n"
            },
            "onDemandConnection": {
                "type": "boolean",
                "description": "Avoid initializing NSX connection on startup\n"
            },
            "password": {
                "type": "string",
                "secret": true
            },
            "remoteAuth": {
                "type": "boolean"
            },
            "retryMaxDelay": {
                "type": "integer",
                "description": "Maximum delay in milliseconds between retries of a request\n"
            },
            "retryMinDelay": {
                "type": "integer",
                "description": "Minimum delay in milliseconds between retries of a request\n"
            },
            "retryOnStatusCodes": {
                "type": "array",
                "items": {
                    "type": "integer"
                },
                "description": "HTTP replies status codes to retry on\n"
            },
            "sessionAuth": {
                "type": "boolean"
            },
            "toleratePartialSuccess": {
                "type": "boolean",
                "description": "Treat partial success status as success\n"
            },
            "username": {
                "type": "string"
            },
            "vmcAuthHost": {
                "type": "string",
                "description": "URL for VMC authorization service (CSP)\n"
            },
            "vmcAuthMode": {
                "type": "string",
                "description": "Mode for VMC authorization\n"
            },
            "vmcToken": {
                "type": "string",
                "description": "Long-living API token for VMC authorization\n"
            }
        }
    },
    "types": {
        "nsxt:index/AlgorithmTypeNsServiceTag:AlgorithmTypeNsServiceTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this service.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/ComputeManagerCredential:ComputeManagerCredential": {
            "properties": {
                "samlLogin": {
                    "$ref": "#/types/nsxt:index/ComputeManagerCredentialSamlLogin:ComputeManagerCredentialSamlLogin",
                    "description": "A login credential specifying saml token.\n"
                },
                "sessionLogin": {
                    "$ref": "#/types/nsxt:index/ComputeManagerCredentialSessionLogin:ComputeManagerCredentialSessionLogin",
                    "description": "A login credential specifying session_id.\n"
                },
                "usernamePasswordLogin": {
                    "$ref": "#/types/nsxt:index/ComputeManagerCredentialUsernamePasswordLogin:ComputeManagerCredentialUsernamePasswordLogin",
                    "description": "A login credential specifying a username and password.\n"
                },
                "verifiableAsymmetricLogin": {
                    "$ref": "#/types/nsxt:index/ComputeManagerCredentialVerifiableAsymmetricLogin:ComputeManagerCredentialVerifiableAsymmetricLogin",
                    "description": "A verifiable asymmetric login credential.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/ComputeManagerCredentialSamlLogin:ComputeManagerCredentialSamlLogin": {
            "properties": {
                "thumbprint": {
                    "type": "string",
                    "description": "Thumbprint of the login server.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The saml token to login to server.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "thumbprint",
                "token"
            ]
        },
        "nsxt:index/ComputeManagerCredentialSessionLogin:ComputeManagerCredentialSessionLogin": {
            "properties": {
                "sessionId": {
                    "type": "string",
                    "description": "The session_id to login to server.\n",
                    "secret": true
                },
                "thumbprint": {
                    "type": "string",
                    "description": "Thumbprint of the login server.\n"
                }
            },
            "type": "object",
            "required": [
                "sessionId",
                "thumbprint"
            ]
        },
        "nsxt:index/ComputeManagerCredentialUsernamePasswordLogin:ComputeManagerCredentialUsernamePasswordLogin": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "The authentication password for login.\n",
                    "secret": true
                },
                "thumbprint": {
                    "type": "string",
                    "description": "Thumbprint of the login server.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username for login.\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "thumbprint",
                "username"
            ]
        },
        "nsxt:index/ComputeManagerCredentialVerifiableAsymmetricLogin:ComputeManagerCredentialVerifiableAsymmetricLogin": {
            "properties": {
                "asymmetricCredential": {
                    "type": "string",
                    "description": "Asymmetric login credential.\n",
                    "secret": true
                },
                "credentialKey": {
                    "type": "string",
                    "description": "Credential key.\n",
                    "secret": true
                },
                "credentialVerifier": {
                    "type": "string",
                    "description": "Credential verifier.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "asymmetricCredential",
                "credentialKey",
                "credentialVerifier"
            ]
        },
        "nsxt:index/ComputeManagerExtensionCertificate:ComputeManagerExtensionCertificate": {
            "properties": {
                "pemEncoded": {
                    "type": "string",
                    "description": "PEM encoded certificate data.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Private key of certificate.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "pemEncoded",
                "privateKey"
            ]
        },
        "nsxt:index/ComputeManagerTag:ComputeManagerTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/DhcpRelayProfileTag:DhcpRelayProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this DHCP relay profile.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/DhcpRelayServiceTag:DhcpRelayServiceTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this dhcp_relay_service.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/DhcpServerIpPoolDhcpGenericOption:DhcpServerIpPoolDhcpGenericOption": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "DHCP option code. Valid values are from 0 to 255.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DHCP option values.\n"
                }
            },
            "type": "object",
            "required": [
                "code",
                "values"
            ]
        },
        "nsxt:index/DhcpServerIpPoolDhcpOption121:DhcpServerIpPoolDhcpOption121": {
            "properties": {
                "network": {
                    "type": "string",
                    "description": "Destination in cidr format.\n"
                },
                "nextHop": {
                    "type": "string",
                    "description": "IP address of next hop.\n"
                }
            },
            "type": "object",
            "required": [
                "network",
                "nextHop"
            ]
        },
        "nsxt:index/DhcpServerIpPoolIpRange:DhcpServerIpPoolIpRange": {
            "properties": {
                "end": {
                    "type": "string",
                    "description": "IP address that indicates range end.\n"
                },
                "start": {
                    "type": "string",
                    "description": "IP address that indicates range start.\n"
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ]
        },
        "nsxt:index/DhcpServerIpPoolTag:DhcpServerIpPoolTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this logical DHCP server.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/DhcpServerProfileTag:DhcpServerProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this DHCP profile.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/EdgeClusterMember:EdgeClusterMember": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "memberIndex": {
                    "type": "integer",
                    "description": "System generated index for cluster member.\n"
                },
                "transportNodeId": {
                    "type": "string",
                    "description": "UUID of edge transport node.\n"
                }
            },
            "type": "object",
            "required": [
                "transportNodeId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "memberIndex",
                        "transportNodeId"
                    ]
                }
            }
        },
        "nsxt:index/EdgeClusterNodeRtepIp:EdgeClusterNodeRtepIp": {
            "properties": {
                "memberIndex": {
                    "type": "integer",
                    "description": "System generated index for cluster member.\n"
                },
                "rtepIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Remote tunnel endpoint ip address\n"
                },
                "transportNodeId": {
                    "type": "string",
                    "description": "UUID of edge transport node.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "memberIndex",
                        "rtepIps",
                        "transportNodeId"
                    ]
                }
            }
        },
        "nsxt:index/EdgeClusterTag:EdgeClusterTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/EtherTypeNsServiceTag:EtherTypeNsServiceTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this service.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/FailureDomainTag:FailureDomainTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "nsxt:index/FirewallSectionAppliedTo:FirewallSectionAppliedTo": {
            "properties": {
                "isValid": {
                    "type": "boolean"
                },
                "targetDisplayName": {
                    "type": "string"
                },
                "targetId": {
                    "type": "string"
                },
                "targetType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isValid",
                        "targetDisplayName"
                    ]
                }
            }
        },
        "nsxt:index/FirewallSectionRule:FirewallSectionRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Action enforced on the packets which matches the firewall rule. [Allowed values: \"ALLOW\", \"DROP\", \"REJECT\"]\n"
                },
                "appliedTos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/FirewallSectionRuleAppliedTo:FirewallSectionRuleAppliedTo"
                    },
                    "description": "List of objects where rule will be enforced. The section level field overrides this one. Null will be treated as any. [Supported target types: \"LogicalPort\", \"LogicalSwitch\", \"NSGroup\", \"LogicalRouterPort\"]\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this rule.\n"
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/FirewallSectionRuleDestination:FirewallSectionRuleDestination"
                    },
                    "description": "List of the destinations. Null will be treated as any. [Allowed target types: \"IPSet\", \"LogicalPort\", \"LogicalSwitch\", \"NSGroup\", \"MACSet\" (depending on the section type)]\n"
                },
                "destinationsExcluded": {
                    "type": "boolean",
                    "description": "When this boolean flag is set to true, the rule destinations will be negated.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "Rule direction in case of stateless firewall rules. This will only considered if section level parameter is set to stateless. Default to IN_OUT if not specified. [Allowed values: \"IN\", \"OUT\", \"IN_OUT\"]\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Flag to disable rule. Disabled will only be persisted but never provisioned/realized.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this rule. Defaults to ID if not set.\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the firewall section.\n"
                },
                "ipProtocol": {
                    "type": "string",
                    "description": "Type of IP packet that should be matched while enforcing the rule. [allowed values: \"IPV4\", \"IPV6\", \"IPV4_IPV6\"]\n"
                },
                "logged": {
                    "type": "boolean",
                    "description": "Flag to enable packet logging. Default is disabled.\n"
                },
                "notes": {
                    "type": "string",
                    "description": "User notes specific to the rule.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "ruleTag": {
                    "type": "string",
                    "description": "User level field which will be printed in CLI and packet logs.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/FirewallSectionRuleService:FirewallSectionRuleService"
                    },
                    "description": "List of the services. Null will be treated as any. [Allowed target types: \"NSService\", \"NSServiceGroup\"]\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/FirewallSectionRuleSource:FirewallSectionRuleSource"
                    },
                    "description": "List of sources. Null will be treated as any. [Allowed target types: \"IPSet\", \"LogicalPort\", \"LogicalSwitch\", \"NSGroup\", \"MACSet\" (depending on the section type)]\n"
                },
                "sourcesExcluded": {
                    "type": "boolean",
                    "description": "When this boolean flag is set to true, the rule sources will be negated.\n"
                }
            },
            "type": "object",
            "required": [
                "action"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "id",
                        "revision"
                    ]
                }
            }
        },
        "nsxt:index/FirewallSectionRuleAppliedTo:FirewallSectionRuleAppliedTo": {
            "properties": {
                "isValid": {
                    "type": "boolean"
                },
                "targetDisplayName": {
                    "type": "string"
                },
                "targetId": {
                    "type": "string"
                },
                "targetType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isValid",
                        "targetDisplayName"
                    ]
                }
            }
        },
        "nsxt:index/FirewallSectionRuleDestination:FirewallSectionRuleDestination": {
            "properties": {
                "isValid": {
                    "type": "boolean"
                },
                "targetDisplayName": {
                    "type": "string"
                },
                "targetId": {
                    "type": "string"
                },
                "targetType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isValid",
                        "targetDisplayName"
                    ]
                }
            }
        },
        "nsxt:index/FirewallSectionRuleService:FirewallSectionRuleService": {
            "properties": {
                "isValid": {
                    "type": "boolean"
                },
                "targetDisplayName": {
                    "type": "string"
                },
                "targetId": {
                    "type": "string"
                },
                "targetType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isValid",
                        "targetDisplayName"
                    ]
                }
            }
        },
        "nsxt:index/FirewallSectionRuleSource:FirewallSectionRuleSource": {
            "properties": {
                "isValid": {
                    "type": "boolean"
                },
                "targetDisplayName": {
                    "type": "string"
                },
                "targetId": {
                    "type": "string"
                },
                "targetType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isValid",
                        "targetDisplayName"
                    ]
                }
            }
        },
        "nsxt:index/FirewallSectionTag:FirewallSectionTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this firewall section.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/IcmpTypeNsServiceTag:IcmpTypeNsServiceTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this service.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/IgmpTypeNsServiceTag:IgmpTypeNsServiceTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this service.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/IpBlockSubnetAllocationRange:IpBlockSubnetAllocationRange": {
            "properties": {
                "end": {
                    "type": "string"
                },
                "start": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "end",
                        "start"
                    ]
                }
            }
        },
        "nsxt:index/IpBlockSubnetTag:IpBlockSubnetTag": {
            "properties": {
                "scope": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this IP block subnet.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "nsxt:index/IpBlockTag:IpBlockTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this IP block.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/IpDiscoverySwitchingProfileTag:IpDiscoverySwitchingProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this IP discovery switching profile.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/IpPoolSubnet:IpPoolSubnet": {
            "properties": {
                "allocationRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A collection of IPv4 Pool Ranges\n"
                },
                "cidr": {
                    "type": "string",
                    "description": "Network address and the prefix length which will be associated with a layer-2 broadcast domainIPv4 Pool Ranges\n"
                },
                "dnsNameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A collection of up to 3 DNS servers for the subnet\n"
                },
                "dnsSuffix": {
                    "type": "string",
                    "description": "The DNS suffix for the DNS server\n"
                },
                "gatewayIp": {
                    "type": "string",
                    "description": "The default gateway address on a layer-3 router\n"
                }
            },
            "type": "object",
            "required": [
                "allocationRanges",
                "cidr"
            ]
        },
        "nsxt:index/IpPoolTag:IpPoolTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this IP pool.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/IpProtocolNsServiceTag:IpProtocolNsServiceTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this service.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/IpSetTag:IpSetTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this IP set.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/L4PortSetNsServiceTag:L4PortSetNsServiceTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this service.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbClientSslProfileTag:LbClientSslProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb client ssl profile.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbCookiePersistenceProfileInsertModeParams:LbCookiePersistenceProfileInsertModeParams": {
            "properties": {
                "cookieDomain": {
                    "type": "string",
                    "description": "HTTP cookie domain (for INSERT mode only).\n"
                },
                "cookieExpiryType": {
                    "type": "string",
                    "description": "Type of cookie expiration timing (for INSERT mode only). Accepted values: SESSION_COOKIE_TIME for session cookie time setting and PERSISTENCE_COOKIE_TIME for persistence cookie time setting.\n"
                },
                "cookiePath": {
                    "type": "string",
                    "description": "HTTP cookie path (for INSERT mode only).\n"
                },
                "maxIdleTime": {
                    "type": "integer",
                    "description": "Maximum interval the cookie is valid for from the last time it was seen in a request.\n"
                },
                "maxLifeTime": {
                    "type": "integer",
                    "description": "Maximum interval the cookie is valid for from the first time the cookie was seen in a request.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "maxIdleTime",
                        "maxLifeTime"
                    ]
                }
            }
        },
        "nsxt:index/LbCookiePersistenceProfileTag:LbCookiePersistenceProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb cookie persistence profile.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbFastTcpApplicationProfileTag:LbFastTcpApplicationProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb fast tcp profile.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbFastUdpApplicationProfileTag:LbFastUdpApplicationProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb fast udp profile.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbHttpApplicationProfileTag:LbHttpApplicationProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb http profile.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbHttpForwardingRuleBodyCondition:LbHttpForwardingRuleBodyCondition": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "If true, case is significant in the match. Default is true.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Defines how value field is used to match the URI. Accepted values are STARTS_WITH, ENDS_WITH, CONTAINS, EQUALS, REGEX.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of cookie to match.\n"
                }
            },
            "type": "object",
            "required": [
                "matchType",
                "value"
            ]
        },
        "nsxt:index/LbHttpForwardingRuleCookieCondition:LbHttpForwardingRuleCookieCondition": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "If true, case is significant in the match. Default is true.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Defines how value field is used to match the URI. Accepted values are STARTS_WITH, ENDS_WITH, CONTAINS, EQUALS, REGEX.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of cookie to match.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of cookie to match.\n"
                }
            },
            "type": "object",
            "required": [
                "matchType",
                "name",
                "value"
            ]
        },
        "nsxt:index/LbHttpForwardingRuleHeaderCondition:LbHttpForwardingRuleHeaderCondition": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "If true, case is significant in the match. Default is true.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Defines how value field is used to match the URI. Accepted values are STARTS_WITH, ENDS_WITH, CONTAINS, EQUALS, REGEX.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of cookie to match.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of cookie to match.\n"
                }
            },
            "type": "object",
            "required": [
                "matchType",
                "name",
                "value"
            ]
        },
        "nsxt:index/LbHttpForwardingRuleHttpRedirectAction:LbHttpForwardingRuleHttpRedirectAction": {
            "properties": {
                "redirectStatus": {
                    "type": "string",
                    "description": "The HTTP reply status.\n"
                },
                "redirectUrl": {
                    "type": "string",
                    "description": "The URL to redirect to.\n"
                }
            },
            "type": "object",
            "required": [
                "redirectStatus",
                "redirectUrl"
            ]
        },
        "nsxt:index/LbHttpForwardingRuleHttpRejectAction:LbHttpForwardingRuleHttpRejectAction": {
            "properties": {
                "replyMessage": {
                    "type": "string",
                    "description": "The HTTP reply message.\n"
                },
                "replyStatus": {
                    "type": "string",
                    "description": "The HTTP reply status.\n"
                }
            },
            "type": "object",
            "required": [
                "replyMessage",
                "replyStatus"
            ]
        },
        "nsxt:index/LbHttpForwardingRuleIpCondition:LbHttpForwardingRuleIpCondition": {
            "properties": {
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "sourceAddress": {
                    "type": "string",
                    "description": "The value source IP address to match.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceAddress"
            ]
        },
        "nsxt:index/LbHttpForwardingRuleMethodCondition:LbHttpForwardingRuleMethodCondition": {
            "properties": {
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "method": {
                    "type": "string",
                    "description": "One of GET, HEAD, POST, PUT, OPTIONS.\n"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "nsxt:index/LbHttpForwardingRuleSelectPoolAction:LbHttpForwardingRuleSelectPoolAction": {
            "properties": {
                "poolId": {
                    "type": "string",
                    "description": "The loadbalancer pool the request will be forwarded to.\n"
                }
            },
            "type": "object",
            "required": [
                "poolId"
            ]
        },
        "nsxt:index/LbHttpForwardingRuleTag:LbHttpForwardingRuleTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb rule.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbHttpForwardingRuleTcpCondition:LbHttpForwardingRuleTcpCondition": {
            "properties": {
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "sourcePort": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sourcePort"
            ]
        },
        "nsxt:index/LbHttpForwardingRuleUriCondition:LbHttpForwardingRuleUriCondition": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "If true, case is significant in the match. Default is true.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Defines how value field is used to match the URI. Accepted values are STARTS_WITH, ENDS_WITH, CONTAINS, EQUALS, REGEX.\n"
                },
                "uri": {
                    "type": "string",
                    "description": "The value of URI to match.\n"
                }
            },
            "type": "object",
            "required": [
                "matchType",
                "uri"
            ]
        },
        "nsxt:index/LbHttpForwardingRuleVersionCondition:LbHttpForwardingRuleVersionCondition": {
            "properties": {
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "version": {
                    "type": "string",
                    "description": "One of HTTP_VERSION_1_0, HTTP_VERSION_1_1.\n"
                }
            },
            "type": "object",
            "required": [
                "version"
            ]
        },
        "nsxt:index/LbHttpMonitorRequestHeader:LbHttpMonitorRequestHeader": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "nsxt:index/LbHttpMonitorTag:LbHttpMonitorTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb http monitor.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbHttpRequestRewriteRuleBodyCondition:LbHttpRequestRewriteRuleBodyCondition": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "If true, case is significant in the match. Default is true.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Defines how value field is used to match the URI. Accepted values are STARTS_WITH, ENDS_WITH, CONTAINS, EQUALS, REGEX.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The new value of HTTP header.\n"
                }
            },
            "type": "object",
            "required": [
                "matchType",
                "value"
            ]
        },
        "nsxt:index/LbHttpRequestRewriteRuleCookieCondition:LbHttpRequestRewriteRuleCookieCondition": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "If true, case is significant in the match. Default is true.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Defines how value field is used to match the URI. Accepted values are STARTS_WITH, ENDS_WITH, CONTAINS, EQUALS, REGEX.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of HTTP header to be rewritten.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The new value of HTTP header.\n"
                }
            },
            "type": "object",
            "required": [
                "matchType",
                "name",
                "value"
            ]
        },
        "nsxt:index/LbHttpRequestRewriteRuleHeaderCondition:LbHttpRequestRewriteRuleHeaderCondition": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "If true, case is significant in the match. Default is true.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Defines how value field is used to match the URI. Accepted values are STARTS_WITH, ENDS_WITH, CONTAINS, EQUALS, REGEX.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of HTTP header to be rewritten.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The new value of HTTP header.\n"
                }
            },
            "type": "object",
            "required": [
                "matchType",
                "name",
                "value"
            ]
        },
        "nsxt:index/LbHttpRequestRewriteRuleHeaderRewriteAction:LbHttpRequestRewriteRuleHeaderRewriteAction": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of HTTP header to be rewritten.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The new value of HTTP header.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "nsxt:index/LbHttpRequestRewriteRuleIpCondition:LbHttpRequestRewriteRuleIpCondition": {
            "properties": {
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "sourceAddress": {
                    "type": "string",
                    "description": "The value source IP address to match.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceAddress"
            ]
        },
        "nsxt:index/LbHttpRequestRewriteRuleMethodCondition:LbHttpRequestRewriteRuleMethodCondition": {
            "properties": {
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "method": {
                    "type": "string",
                    "description": "One of GET, HEAD, POST, PUT, OPTIONS.\n"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "nsxt:index/LbHttpRequestRewriteRuleTag:LbHttpRequestRewriteRuleTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb rule.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbHttpRequestRewriteRuleTcpCondition:LbHttpRequestRewriteRuleTcpCondition": {
            "properties": {
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "sourcePort": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sourcePort"
            ]
        },
        "nsxt:index/LbHttpRequestRewriteRuleUriArgumentsCondition:LbHttpRequestRewriteRuleUriArgumentsCondition": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "If true, case is significant in the match. Default is true.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Defines how value field is used to match the URI. Accepted values are STARTS_WITH, ENDS_WITH, CONTAINS, EQUALS, REGEX.\n"
                },
                "uriArguments": {
                    "type": "string",
                    "description": "The new URI arguments(query string) for the HTTP request.\n"
                }
            },
            "type": "object",
            "required": [
                "matchType",
                "uriArguments"
            ]
        },
        "nsxt:index/LbHttpRequestRewriteRuleUriCondition:LbHttpRequestRewriteRuleUriCondition": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "If true, case is significant in the match. Default is true.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Defines how value field is used to match the URI. Accepted values are STARTS_WITH, ENDS_WITH, CONTAINS, EQUALS, REGEX.\n"
                },
                "uri": {
                    "type": "string",
                    "description": "The new URI for the HTTP request.\n"
                }
            },
            "type": "object",
            "required": [
                "matchType",
                "uri"
            ]
        },
        "nsxt:index/LbHttpRequestRewriteRuleUriRewriteAction:LbHttpRequestRewriteRuleUriRewriteAction": {
            "properties": {
                "uri": {
                    "type": "string",
                    "description": "The new URI for the HTTP request.\n"
                },
                "uriArguments": {
                    "type": "string",
                    "description": "The new URI arguments(query string) for the HTTP request.\n"
                }
            },
            "type": "object",
            "required": [
                "uri"
            ]
        },
        "nsxt:index/LbHttpRequestRewriteRuleVersionCondition:LbHttpRequestRewriteRuleVersionCondition": {
            "properties": {
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "version": {
                    "type": "string",
                    "description": "One of HTTP_VERSION_1_0, HTTP_VERSION_1_1.\n"
                }
            },
            "type": "object",
            "required": [
                "version"
            ]
        },
        "nsxt:index/LbHttpResponseRewriteRuleCookieCondition:LbHttpResponseRewriteRuleCookieCondition": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "If true, case is significant in the match. Default is true.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Defines how value field is used to match the URI. Accepted values are STARTS_WITH, ENDS_WITH, CONTAINS, EQUALS, REGEX.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of HTTP header to be rewritten.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The new value of HTTP header.\n"
                }
            },
            "type": "object",
            "required": [
                "matchType",
                "name",
                "value"
            ]
        },
        "nsxt:index/LbHttpResponseRewriteRuleHeaderRewriteAction:LbHttpResponseRewriteRuleHeaderRewriteAction": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of HTTP header to be rewritten.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The new value of HTTP header.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "nsxt:index/LbHttpResponseRewriteRuleIpCondition:LbHttpResponseRewriteRuleIpCondition": {
            "properties": {
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "sourceAddress": {
                    "type": "string",
                    "description": "The value source IP address to match.\n"
                }
            },
            "type": "object",
            "required": [
                "sourceAddress"
            ]
        },
        "nsxt:index/LbHttpResponseRewriteRuleMethodCondition:LbHttpResponseRewriteRuleMethodCondition": {
            "properties": {
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "method": {
                    "type": "string",
                    "description": "One of GET, HEAD, POST, PUT, OPTIONS.\n"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "nsxt:index/LbHttpResponseRewriteRuleRequestHeaderCondition:LbHttpResponseRewriteRuleRequestHeaderCondition": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "If true, case is significant in the match. Default is true.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Defines how value field is used to match the URI. Accepted values are STARTS_WITH, ENDS_WITH, CONTAINS, EQUALS, REGEX.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of HTTP header to be rewritten.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The new value of HTTP header.\n"
                }
            },
            "type": "object",
            "required": [
                "matchType",
                "name",
                "value"
            ]
        },
        "nsxt:index/LbHttpResponseRewriteRuleResponseHeaderCondition:LbHttpResponseRewriteRuleResponseHeaderCondition": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "If true, case is significant in the match. Default is true.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Defines how value field is used to match the URI. Accepted values are STARTS_WITH, ENDS_WITH, CONTAINS, EQUALS, REGEX.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of HTTP header to be rewritten.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The new value of HTTP header.\n"
                }
            },
            "type": "object",
            "required": [
                "matchType",
                "name",
                "value"
            ]
        },
        "nsxt:index/LbHttpResponseRewriteRuleTag:LbHttpResponseRewriteRuleTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb rule.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbHttpResponseRewriteRuleTcpCondition:LbHttpResponseRewriteRuleTcpCondition": {
            "properties": {
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "sourcePort": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sourcePort"
            ]
        },
        "nsxt:index/LbHttpResponseRewriteRuleUriArgumentsCondition:LbHttpResponseRewriteRuleUriArgumentsCondition": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "If true, case is significant in the match. Default is true.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Defines how value field is used to match the URI. Accepted values are STARTS_WITH, ENDS_WITH, CONTAINS, EQUALS, REGEX.\n"
                },
                "uriArguments": {
                    "type": "string",
                    "description": "Query string of URI, typically contains key value pairs.\n"
                }
            },
            "type": "object",
            "required": [
                "matchType",
                "uriArguments"
            ]
        },
        "nsxt:index/LbHttpResponseRewriteRuleUriCondition:LbHttpResponseRewriteRuleUriCondition": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "If true, case is significant in the match. Default is true.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Defines how value field is used to match the URI. Accepted values are STARTS_WITH, ENDS_WITH, CONTAINS, EQUALS, REGEX.\n"
                },
                "uri": {
                    "type": "string",
                    "description": "The value of URI to match.\n"
                }
            },
            "type": "object",
            "required": [
                "matchType",
                "uri"
            ]
        },
        "nsxt:index/LbHttpResponseRewriteRuleVersionCondition:LbHttpResponseRewriteRuleVersionCondition": {
            "properties": {
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether reverse the match result of this condition. Default is false.\n"
                },
                "version": {
                    "type": "string",
                    "description": "One of HTTP_VERSION_1_0, HTTP_VERSION_1_1.\n"
                }
            },
            "type": "object",
            "required": [
                "version"
            ]
        },
        "nsxt:index/LbHttpVirtualServerClientSsl:LbHttpVirtualServerClientSsl": {
            "properties": {
                "caIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of CA certificate ids for server authentication.\n"
                },
                "certificateChainDepth": {
                    "type": "integer",
                    "description": "Allowed depth of certificate chain. Default is 3.\n"
                },
                "clientAuth": {
                    "type": "boolean",
                    "description": "Whether client authentication is mandatory. Default is false.\n"
                },
                "clientSslProfileId": {
                    "type": "string",
                    "description": "Id of client SSL profile that defines reusable properties.\n"
                },
                "crlIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of CRL certificate ids for server authentication.\n"
                },
                "defaultCertificateId": {
                    "type": "string",
                    "description": "Id of certificate that will be used if the server does not host     multiple hostnames on the same IP address or if the client does not support SNI extension.\n"
                },
                "sniCertificateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of certificates to serve different hostnames.\n"
                }
            },
            "type": "object",
            "required": [
                "clientSslProfileId",
                "defaultCertificateId"
            ]
        },
        "nsxt:index/LbHttpVirtualServerServerSsl:LbHttpVirtualServerServerSsl": {
            "properties": {
                "caIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of CA certificate ids for server authentication.\n"
                },
                "certificateChainDepth": {
                    "type": "integer",
                    "description": "Allowed depth of certificate chain. Default is 3.\n"
                },
                "clientCertificateId": {
                    "type": "string",
                    "description": "Whether server authentication is required. Default is false.\n"
                },
                "crlIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of CRL certificate ids for server authentication.\n"
                },
                "serverAuth": {
                    "type": "boolean",
                    "description": "Whether server authentication is needed. Default is False. If true, ca_ids should be provided.\n"
                },
                "serverSslProfileId": {
                    "type": "string",
                    "description": "Id of server SSL profile that defines reusable properties.\n"
                }
            },
            "type": "object",
            "required": [
                "serverSslProfileId"
            ]
        },
        "nsxt:index/LbHttpVirtualServerTag:LbHttpVirtualServerTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb http virtual server.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbHttpsMonitorRequestHeader:LbHttpsMonitorRequestHeader": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "nsxt:index/LbHttpsMonitorTag:LbHttpsMonitorTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb https monitor.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbIcmpMonitorTag:LbIcmpMonitorTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb icmp monitor.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbPassiveMonitorTag:LbPassiveMonitorTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb passive monitor.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbPoolMember:LbPoolMember": {
            "properties": {
                "adminState": {
                    "type": "string",
                    "description": "Pool member admin state. Possible values: ENABLED, DISABLED and GRACEFUL_DISABLED\n"
                },
                "backupMember": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether this is a backup pool member. Backup servers are typically configured with a sorry page indicating to the user that the application is currently unavailable. While the pool is active (a specified minimum number of pool members are active) BACKUP members are skipped during server selection. When the pool is inactive, incoming connections are sent to only the BACKUP member(s).\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. pool member name.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Pool member IP address.\n"
                },
                "maxConcurrentConnections": {
                    "type": "integer",
                    "description": "To ensure members are not overloaded, connections to a member can be capped by the load balancer. When a member reaches this limit, it is skipped during server selection. If it is not specified, it means that connections are unlimited.\n"
                },
                "port": {
                    "type": "string",
                    "description": "If port is specified, all connections will be sent to this port. If unset, the same port the client connected to will be used, it could be overridden by default_pool_member_ports setting in virtual server. The port should not specified for multiple ports case.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "Pool member weight is used for WEIGHTED_ROUND_ROBIN balancing algorithm. The weight value would be ignored in other algorithms.\n"
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "ipAddress"
                    ]
                }
            }
        },
        "nsxt:index/LbPoolMemberGroup:LbPoolMemberGroup": {
            "properties": {
                "groupingObject": {
                    "$ref": "#/types/nsxt:index/LbPoolMemberGroupGroupingObject:LbPoolMemberGroupGroupingObject",
                    "description": "Grouping object of type NSGroup which will be used as dynamic pool members. The IP list of the grouping object would be used as pool member IP setting.\n"
                },
                "ipVersionFilter": {
                    "type": "string",
                    "description": "Ip version filter is used to filter IPv4 or IPv6 addresses from the grouping object. If the filter is not specified, both IPv4 and IPv6 addresses would be used as server IPs. Supported filtering is \"IPV4\" and \"IPV6\" (\"IPV4\" is the default one)\n"
                },
                "limitIpListSize": {
                    "type": "boolean",
                    "description": "Limits the max number of pool members. If false, allows the dynamic pool to grow up to the load balancer max pool member capacity.\n"
                },
                "maxIpListSize": {
                    "type": "integer",
                    "description": "Should only be specified if limit_ip_list_size is set to true. Limits the max number of pool members to the specified value.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "If port is specified, all connections will be sent to this port. If unset, the same port the client connected to will be used, it could be overridden by default_pool_member_ports setting in virtual server. The port should not specified for multiple ports case.\n"
                }
            },
            "type": "object",
            "required": [
                "groupingObject"
            ]
        },
        "nsxt:index/LbPoolMemberGroupGroupingObject:LbPoolMemberGroupGroupingObject": {
            "properties": {
                "isValid": {
                    "type": "boolean"
                },
                "targetDisplayName": {
                    "type": "string"
                },
                "targetId": {
                    "type": "string"
                },
                "targetType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isValid",
                        "targetDisplayName"
                    ]
                }
            }
        },
        "nsxt:index/LbPoolSnatTranslation:LbPoolSnatTranslation": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "Ip address or Ip range for SNAT of type SNAT_IP_POOL.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of SNAT performed to ensure reverse traffic from the server can be received and processed by the loadbalancer. Supported types are: SNAT_AUTO_MAP, SNAT_IP_POOL and TRANSPARENT\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbPoolTag:LbPoolTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb pool.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbServerSslProfileTag:LbServerSslProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb server ssl profile.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbServiceTag:LbServiceTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb service.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbSourceIpPersistenceProfileTag:LbSourceIpPersistenceProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb source ip persistence profile.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbTcpMonitorTag:LbTcpMonitorTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb tcp monitor.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbTcpVirtualServerTag:LbTcpVirtualServerTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb tcp virtual server.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbUdpMonitorTag:LbUdpMonitorTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb udp monitor.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LbUdpVirtualServerTag:LbUdpVirtualServerTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this lb udp virtual server.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LogicalDhcpPortTag:LogicalDhcpPortTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this logical port.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LogicalDhcpServerDhcpGenericOption:LogicalDhcpServerDhcpGenericOption": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "DHCP option code. Valid values are from 0 to 255.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DHCP option values.\n"
                }
            },
            "type": "object",
            "required": [
                "code",
                "values"
            ]
        },
        "nsxt:index/LogicalDhcpServerDhcpOption121:LogicalDhcpServerDhcpOption121": {
            "properties": {
                "network": {
                    "type": "string",
                    "description": "Destination in cidr format.\n"
                },
                "nextHop": {
                    "type": "string",
                    "description": "IP address of next hop.\n"
                }
            },
            "type": "object",
            "required": [
                "network",
                "nextHop"
            ]
        },
        "nsxt:index/LogicalDhcpServerTag:LogicalDhcpServerTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this logical DHCP server.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LogicalPortSwitchingProfileId:LogicalPortSwitchingProfileId": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "nsxt:index/LogicalPortTag:LogicalPortTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this logical port.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LogicalRouterCentralizedServicePortTag:LogicalRouterCentralizedServicePortTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this port.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LogicalRouterDownlinkPortServiceBinding:LogicalRouterDownlinkPortServiceBinding": {
            "properties": {
                "isValid": {
                    "type": "boolean"
                },
                "targetDisplayName": {
                    "type": "string"
                },
                "targetId": {
                    "type": "string"
                },
                "targetType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isValid",
                        "targetDisplayName"
                    ]
                }
            }
        },
        "nsxt:index/LogicalRouterDownlinkPortTag:LogicalRouterDownlinkPortTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this port.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LogicalRouterLinkPortOnTier0Tag:LogicalRouterLinkPortOnTier0Tag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this port.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LogicalRouterLinkPortOnTier1Tag:LogicalRouterLinkPortOnTier1Tag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this port.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LogicalSwitchAddressBinding:LogicalSwitchAddressBinding": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "IP Address\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "MAC Address\n"
                },
                "vlan": {
                    "type": "integer",
                    "description": "Vlan for vlan logical switch. This attribute is deprecated, please use nsxt.VlanLogicalSwitch resource to manage vlan logical switches.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LogicalSwitchSwitchingProfileId:LogicalSwitchSwitchingProfileId": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "nsxt:index/LogicalSwitchTag:LogicalSwitchTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this logical switch.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LogicalTier0RouterFirewallSection:LogicalTier0RouterFirewallSection": {
            "properties": {
                "isValid": {
                    "type": "boolean"
                },
                "targetDisplayName": {
                    "type": "string"
                },
                "targetId": {
                    "type": "string"
                },
                "targetType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isValid",
                        "targetDisplayName"
                    ]
                }
            }
        },
        "nsxt:index/LogicalTier0RouterTag:LogicalTier0RouterTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this logical Tier0 router.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/LogicalTier1RouterFirewallSection:LogicalTier1RouterFirewallSection": {
            "properties": {
                "isValid": {
                    "type": "boolean"
                },
                "targetDisplayName": {
                    "type": "string"
                },
                "targetId": {
                    "type": "string"
                },
                "targetType": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isValid",
                        "targetDisplayName"
                    ]
                }
            }
        },
        "nsxt:index/LogicalTier1RouterTag:LogicalTier1RouterTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this logical Tier1 router.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/MacManagementSwitchingProfileMacLearning:MacManagementSwitchingProfileMacLearning": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "A boolean flag indicating allowing source MAC address learning.\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "The maximum number of MAC addresses that can be learned on this port.\n"
                },
                "limitPolicy": {
                    "type": "string",
                    "description": "The policy after MAC Limit is exceeded: ALLOW/DROP.\n"
                },
                "unicastFloodingAllowed": {
                    "type": "boolean",
                    "description": "A boolean flag indicating allowing flooding for unlearned MAC for ingress traffic. Can be True only if mac_learning is enabled.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/MacManagementSwitchingProfileTag:MacManagementSwitchingProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this MAC management switching profile.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/ManagerClusterNode:ManagerClusterNode": {
            "properties": {
                "fqdn": {
                    "type": "string",
                    "description": "Fqdn of the node.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Uuid of the cluster node.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Ip address of the node.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for login to the node.\n",
                    "secret": true
                },
                "status": {
                    "type": "string",
                    "description": "Status of the node, value will be one of `JOINING`, `JOINED`, `REMOVING` and `REMOVED`.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username for login to the node.\n"
                }
            },
            "type": "object",
            "required": [
                "ipAddress",
                "password",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fqdn",
                        "id",
                        "ipAddress",
                        "password",
                        "status",
                        "username"
                    ]
                }
            }
        },
        "nsxt:index/NatRuleTag:NatRuleTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this NAT rule.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/NsGroupMember:NsGroupMember": {
            "properties": {
                "targetType": {
                    "type": "string",
                    "description": "Dynamic member type, one of: LogicalPort, LogicalSwitch, VirtualMachine.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Member ID\n"
                }
            },
            "type": "object",
            "required": [
                "targetType",
                "value"
            ]
        },
        "nsxt:index/NsGroupMembershipCriteria:NsGroupMembershipCriteria": {
            "properties": {
                "scope": {
                    "type": "string",
                    "description": "Tag scope for matching dynamic members.\n"
                },
                "scopeOp": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "Tag value for matching dynamic members.\n"
                },
                "tagOp": {
                    "type": "string"
                },
                "targetType": {
                    "type": "string",
                    "description": "Dynamic member type, one of: LogicalPort, LogicalSwitch, VirtualMachine.\n"
                }
            },
            "type": "object",
            "required": [
                "targetType"
            ]
        },
        "nsxt:index/NsGroupTag:NsGroupTag": {
            "properties": {
                "scope": {
                    "type": "string",
                    "description": "Tag scope for matching dynamic members.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "Tag value for matching dynamic members.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/NsServiceGroupTag:NsServiceGroupTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this NS service group.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyBgpConfigRouteAggregation:PolicyBgpConfigRouteAggregation": {
            "properties": {
                "prefix": {
                    "type": "string",
                    "description": "CIDR of aggregate address.\n"
                },
                "summaryOnly": {
                    "type": "boolean",
                    "description": "A boolean flag to enable/disable summarized route info. Default is `true`.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyBgpConfigTag:PolicyBgpConfigTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Tier-0 gateway's BGP configuration.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyBgpNeighborBfdConfig:PolicyBgpNeighborBfdConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "A boolean flag to enable/disable address family. Defaults to `false`.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "Time interval between heartbeat packets in milliseconds. Defaults to `500`.\n"
                },
                "multiple": {
                    "type": "integer",
                    "description": "Number of times heartbeat packet is missed before BFD declares the neighbor is down. Defaults to `3`.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyBgpNeighborRouteFiltering:PolicyBgpNeighborRouteFiltering": {
            "properties": {
                "addressFamily": {
                    "type": "string",
                    "description": "Address family type. Must be one of `L2VPN_EVPN`, `IPV4` or `IPV6`. Note the `L2VPN_EVPN` property is only available starting with NSX version 3.0.0.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A boolean flag to enable/disable address family. Defaults to `false`.\n"
                },
                "inRouteFilter": {
                    "type": "string",
                    "description": "Path of prefix-list or route map to filter routes for IN direction.\n"
                },
                "maximumRoutes": {
                    "type": "integer",
                    "description": "Maximum number of routes for the address family. Note this property is only available starting with NSX version 3.0.0.\n"
                },
                "outRouteFilter": {
                    "type": "string",
                    "description": "Path of prefix-list or route map to filter routes for OUT direction.\n"
                }
            },
            "type": "object",
            "required": [
                "addressFamily"
            ]
        },
        "nsxt:index/PolicyBgpNeighborTag:PolicyBgpNeighborTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyContextProfileAppId:PolicyContextProfileAppId": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the attribute.\n"
                },
                "isAlgType": {
                    "type": "boolean",
                    "description": "Describes whether the APP_ID value is ALG type or not.\n"
                },
                "subAttribute": {
                    "$ref": "#/types/nsxt:index/PolicyContextProfileAppIdSubAttribute:PolicyContextProfileAppIdSubAttribute",
                    "description": "A block to specify sub attribute for the `app_id`. Only one block is allowed.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of string indicating values for the `url_category`. Must be a subset of valid values for `url_category` on NSX.\n"
                }
            },
            "type": "object",
            "required": [
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isAlgType",
                        "values"
                    ]
                }
            }
        },
        "nsxt:index/PolicyContextProfileAppIdSubAttribute:PolicyContextProfileAppIdSubAttribute": {
            "properties": {
                "cifsSmbVersions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of string indicating values for `cifs_smb_version`, only applicable to `CIFS`.\n"
                },
                "tlsCipherSuites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of string indicating values for `tls_cipher_suite`, only applicable to `SSL`.\n"
                },
                "tlsVersions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of string indicating values for `tls_version`, only applicable to `SSL`.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyContextProfileContext:PolicyContextProfileContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyContextProfileCustomAttributeContext:PolicyContextProfileCustomAttributeContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyContextProfileCustomUrl:PolicyContextProfileCustomUrl": {
            "properties": {
                "customUrlPartialMatch": {
                    "type": "boolean",
                    "description": "True value for this flag will be treated as a partial match for custom url.  Attribute is supported with NSX version 4.0.0 and above.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the attribute.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of string indicating values for the `url_category`. Must be a subset of valid values for `url_category` on NSX.\n"
                }
            },
            "type": "object",
            "required": [
                "values"
            ]
        },
        "nsxt:index/PolicyContextProfileDomainName:PolicyContextProfileDomainName": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the attribute.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of string indicating values for the `url_category`. Must be a subset of valid values for `url_category` on NSX.\n"
                }
            },
            "type": "object",
            "required": [
                "values"
            ]
        },
        "nsxt:index/PolicyContextProfileTag:PolicyContextProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyContextProfileUrlCategory:PolicyContextProfileUrlCategory": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the attribute.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of string indicating values for the `url_category`. Must be a subset of valid values for `url_category` on NSX.\n"
                }
            },
            "type": "object",
            "required": [
                "values"
            ]
        },
        "nsxt:index/PolicyDhcpRelayContext:PolicyDhcpRelayContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyDhcpRelayTag:PolicyDhcpRelayTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyDhcpServerContext:PolicyDhcpServerContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyDhcpServerTag:PolicyDhcpServerTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyDhcpV4StaticBindingContext:PolicyDhcpV4StaticBindingContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyDhcpV4StaticBindingDhcpGenericOption:PolicyDhcpV4StaticBindingDhcpGenericOption": {
            "properties": {
                "code": {
                    "type": "integer"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DHCP option values.\n"
                }
            },
            "type": "object",
            "required": [
                "code",
                "values"
            ]
        },
        "nsxt:index/PolicyDhcpV4StaticBindingDhcpOption121:PolicyDhcpV4StaticBindingDhcpOption121": {
            "properties": {
                "network": {
                    "type": "string",
                    "description": "Destination in cidr format.\n"
                },
                "nextHop": {
                    "type": "string",
                    "description": "IP address of next hop.\n"
                }
            },
            "type": "object",
            "required": [
                "network",
                "nextHop"
            ]
        },
        "nsxt:index/PolicyDhcpV4StaticBindingTag:PolicyDhcpV4StaticBindingTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyDhcpV6StaticBindingContext:PolicyDhcpV6StaticBindingContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyDhcpV6StaticBindingTag:PolicyDhcpV6StaticBindingTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyDnsForwarderZoneContext:PolicyDnsForwarderZoneContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyDnsForwarderZoneTag:PolicyDnsForwarderZoneTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyDomainTag:PolicyDomainTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Domain.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyEvpnConfigTag:PolicyEvpnConfigTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyEvpnTenantMapping:PolicyEvpnTenantMapping": {
            "properties": {
                "vlans": {
                    "type": "string",
                    "description": "Single VLAN Id or range of VLAN Ids.\n"
                },
                "vnis": {
                    "type": "string",
                    "description": "Single VNI or range of VNIs. Please note that the range should match the range of vlans exactly.\n"
                }
            },
            "type": "object",
            "required": [
                "vlans",
                "vnis"
            ]
        },
        "nsxt:index/PolicyEvpnTenantTag:PolicyEvpnTenantTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyEvpnTunnelEndpointTag:PolicyEvpnTunnelEndpointTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyFixedSegmentAdvancedConfig:PolicyFixedSegmentAdvancedConfig": {
            "properties": {
                "addressPoolPath": {
                    "type": "string"
                },
                "connectivity": {
                    "type": "string",
                    "description": "Connectivity configuration to manually connect (ON) or disconnect (OFF).\n"
                },
                "hybrid": {
                    "type": "boolean",
                    "description": "Boolean flag to identify a hybrid logical switch.\n"
                },
                "localEgress": {
                    "type": "boolean",
                    "description": "Boolean flag to enable local egress when used in conjunction with L2VPN.\n"
                },
                "uplinkTeamingPolicy": {
                    "type": "string",
                    "description": "The name of the switching uplink teaming policy for the bridge endpoint. This name corresponds to one of the switching uplink teaming policy names listed in the transport zone.\n"
                },
                "urpfMode": {
                    "type": "string",
                    "description": "URPF mode to be applied to gateway downlink interface. One of `STRICT`, `NONE`.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyFixedSegmentBridgeConfig:PolicyFixedSegmentBridgeConfig": {
            "properties": {
                "profilePath": {
                    "type": "string"
                },
                "transportZonePath": {
                    "type": "string",
                    "description": "Policy path to the Overlay transport zone.\n"
                },
                "uplinkTeamingPolicy": {
                    "type": "string",
                    "description": "The name of the switching uplink teaming policy for the bridge endpoint. This name corresponds to one of the switching uplink teaming policy names listed in the transport zone.\n"
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VLAN IDs or ranges. Specifying vlan ids can be useful for overlay segments, f.e. for EVPN.\n"
                }
            },
            "type": "object",
            "required": [
                "profilePath",
                "transportZonePath",
                "vlanIds"
            ]
        },
        "nsxt:index/PolicyFixedSegmentContext:PolicyFixedSegmentContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyFixedSegmentL2Extension:PolicyFixedSegmentL2Extension": {
            "properties": {
                "l2vpnPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy paths of associated L2 VPN sessions.\n"
                },
                "tunnelId": {
                    "type": "integer",
                    "description": "The Tunnel ID that's a int value between 1 and 4093.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyFixedSegmentSubnet:PolicyFixedSegmentSubnet": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "description": "Gateway IP address CIDR. This argument can not be changed if DHCP is enabled for the subnet.\n"
                },
                "dhcpRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DHCP address ranges for dynamic IP allocation.\n"
                },
                "dhcpV4Config": {
                    "$ref": "#/types/nsxt:index/PolicyFixedSegmentSubnetDhcpV4Config:PolicyFixedSegmentSubnetDhcpV4Config",
                    "description": "DHCPv4 config for IPv4 subnet. This clause is supported with NSX 3.0.0 onwards.\n"
                },
                "dhcpV6Config": {
                    "$ref": "#/types/nsxt:index/PolicyFixedSegmentSubnetDhcpV6Config:PolicyFixedSegmentSubnetDhcpV6Config",
                    "description": "DHCPv6 config for IPv6 subnet. This clause is supported with NSX 3.0.0 onwards.\n"
                },
                "network": {
                    "type": "string",
                    "description": "Destination in cidr format.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "network"
                    ]
                }
            }
        },
        "nsxt:index/PolicyFixedSegmentSubnetDhcpV4Config:PolicyFixedSegmentSubnetDhcpV4Config": {
            "properties": {
                "dhcpGenericOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyFixedSegmentSubnetDhcpV4ConfigDhcpGenericOption:PolicyFixedSegmentSubnetDhcpV4ConfigDhcpGenericOption"
                    },
                    "description": "Generic DHCP options.\n"
                },
                "dhcpOption121s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyFixedSegmentSubnetDhcpV4ConfigDhcpOption121:PolicyFixedSegmentSubnetDhcpV4ConfigDhcpOption121"
                    },
                    "description": "DHCP classless static routes.\n"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses of DNS servers for the subnet.\n"
                },
                "leaseTime": {
                    "type": "integer",
                    "description": "DHCP lease time in seconds.\n"
                },
                "serverAddress": {
                    "type": "string",
                    "description": "IP address of the DHCP server in CIDR format. This attribute is required if segment has provided dhcp_config_path and it represents a DHCP server config.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyFixedSegmentSubnetDhcpV4ConfigDhcpGenericOption:PolicyFixedSegmentSubnetDhcpV4ConfigDhcpGenericOption": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "DHCP option code. Valid values are from 0 to 255.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DHCP option values.\n"
                }
            },
            "type": "object",
            "required": [
                "code",
                "values"
            ]
        },
        "nsxt:index/PolicyFixedSegmentSubnetDhcpV4ConfigDhcpOption121:PolicyFixedSegmentSubnetDhcpV4ConfigDhcpOption121": {
            "properties": {
                "network": {
                    "type": "string",
                    "description": "Destination in cidr format.\n"
                },
                "nextHop": {
                    "type": "string",
                    "description": "IP address of next hop.\n"
                }
            },
            "type": "object",
            "required": [
                "network",
                "nextHop"
            ]
        },
        "nsxt:index/PolicyFixedSegmentSubnetDhcpV6Config:PolicyFixedSegmentSubnetDhcpV6Config": {
            "properties": {
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses of DNS servers for the subnet.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domain names for this subnet.\n"
                },
                "excludedRanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyFixedSegmentSubnetDhcpV6ConfigExcludedRange:PolicyFixedSegmentSubnetDhcpV6ConfigExcludedRange"
                    },
                    "description": "List of excluded address ranges to define dynamic ip allocation ranges.\n"
                },
                "leaseTime": {
                    "type": "integer",
                    "description": "DHCP lease time in seconds.\n"
                },
                "preferredTime": {
                    "type": "integer",
                    "description": "The time interval in seconds, in which the prefix is advertised as preferred.\n"
                },
                "serverAddress": {
                    "type": "string",
                    "description": "IP address of the DHCP server in CIDR format. This attribute is required if segment has provided dhcp_config_path and it represents a DHCP server config.\n"
                },
                "sntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IPv6 address of SNTP servers for the subnet.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyFixedSegmentSubnetDhcpV6ConfigExcludedRange:PolicyFixedSegmentSubnetDhcpV6ConfigExcludedRange": {
            "properties": {
                "end": {
                    "type": "string",
                    "description": "IPv6 address that marks end of the range.\n"
                },
                "start": {
                    "type": "string",
                    "description": "IPv6 address that marks beginning of the range.\n"
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ]
        },
        "nsxt:index/PolicyFixedSegmentTag:PolicyFixedSegmentTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this policy.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyGatewayCommunityListTag:PolicyGatewayCommunityListTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyGatewayDnsForwarderContext:PolicyGatewayDnsForwarderContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyGatewayDnsForwarderTag:PolicyGatewayDnsForwarderTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyGatewayPolicyContext:PolicyGatewayPolicyContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyGatewayPolicyRule:PolicyGatewayPolicyRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action for the Rule. Must be one of: `ALLOW`, `DROP` or `REJECT`. Defaults to `ALLOW`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "destinationGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of group paths that serve as the destination for this rule. IPs, IP ranges, or CIDRs may also be used starting in NSX-T 3.0. An empty set can be used to specify \"Any\".\n"
                },
                "destinationsExcluded": {
                    "type": "boolean",
                    "description": "A boolean value indicating negation of destination groups.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "The traffic direction for the policy. Must be one of: `IN`, `OUT` or `IN_OUT`. Defaults to `IN_OUT`.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "A boolean value to indicate the rule is disabled. Defaults to `false`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "ipVersion": {
                    "type": "string",
                    "description": "The IP Protocol for the rule. Must be one of: `IPV4`, `IPV6` or `IPV4_IPV6`. Defaults to `IPV4_IPV6`.\n"
                },
                "logLabel": {
                    "type": "string",
                    "description": "Additional information (string) which will be propagated to the rule syslog.\n"
                },
                "logged": {
                    "type": "boolean",
                    "description": "A boolean flag to enable packet logging.\n"
                },
                "notes": {
                    "type": "string",
                    "description": "Text for additional notes on changes for the rule.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the Gateway Policy resource.\n"
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of context profiles for the rule. Note: due to platform issue, this setting is only supported with NSX 3.2 onwards.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "ruleId": {
                    "type": "integer",
                    "description": "Unique positive number that is assigned by the system and is useful for debugging.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of policy paths where the rule is applied.\n"
                },
                "sequenceNumber": {
                    "type": "integer",
                    "description": "It is recommended not to specify sequence number for rules, and rely on NSX to auto-assign them. If you choose to specify sequence numbers, you must make sure the numbers are consistent with order of the rules in configuration. To avoid confusion, either specify sequence numbers in all rules, or none at all.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of services to match.\n"
                },
                "sourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of group paths that serve as the source for this rule. IPs, IP ranges, or CIDRs may also be used starting in NSX-T 3.0. An empty set can be used to specify \"Any\".\n"
                },
                "sourcesExcluded": {
                    "type": "boolean"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayPolicyRuleTag:PolicyGatewayPolicyRuleTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "scopes"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "nsxId",
                        "revision",
                        "ruleId",
                        "scopes",
                        "sequenceNumber"
                    ]
                }
            }
        },
        "nsxt:index/PolicyGatewayPolicyRuleTag:PolicyGatewayPolicyRuleTag": {
            "properties": {
                "scope": {
                    "type": "string",
                    "description": "List of policy paths where the rule is applied.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyGatewayPolicyTag:PolicyGatewayPolicyTag": {
            "properties": {
                "scope": {
                    "type": "string",
                    "description": "List of policy paths where the rule is applied.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyGatewayPrefixListPrefix:PolicyGatewayPrefixListPrefix": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "PERMIT or DENY Action for the prefix list. The default value is PERMIT.\n"
                },
                "ge": {
                    "type": "integer",
                    "description": "Prefix length greater than or equal to, between 0-128. (0 means no value).\n"
                },
                "le": {
                    "type": "integer",
                    "description": "Prefix length less than or equal to, between 0-128. (0 means no value)\n"
                },
                "network": {
                    "type": "string",
                    "description": "Network prefix in CIDR format. If not set it will match ANY network.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyGatewayPrefixListTag:PolicyGatewayPrefixListTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyGatewayQosProfileTag:PolicyGatewayQosProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyGatewayRedistributionConfigRule:PolicyGatewayRedistributionConfigRule": {
            "properties": {
                "bgp": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name.\n"
                },
                "ospf": {
                    "type": "boolean"
                },
                "routeMapPath": {
                    "type": "string",
                    "description": "Route map to be associated with the redistribution rule.\n"
                },
                "types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of redistribution types, possible values are: `TIER0_STATIC`, `TIER0_CONNECTED`, `TIER0_EXTERNAL_INTERFACE`, `TIER0_SEGMENT`, `TIER0_ROUTER_LINK`, `TIER0_SERVICE_INTERFACE`, `TIER0_LOOPBACK_INTERFACE`, `TIER0_DNS_FORWARDER_IP`, `TIER0_IPSEC_LOCAL_IP`, `TIER0_NAT`, `TIER0_EVPN_TEP_IP`, `TIER1_NAT`, `TIER1_STATIC`, `TIER1_LB_VIP`, `TIER1_LB_SNAT`, `TIER1_DNS_FORWARDER_IP`, `TIER1_CONNECTED`, `TIER1_SERVICE_INTERFACE`, `TIER1_SEGMENT`, `TIER1_IPSEC_LOCAL_ENDPOINT`.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyGatewayRouteMapEntry:PolicyGatewayRouteMapEntry": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Action for the route map entry, either `PERMIT` or `DENY`, with default being `PERMIT`.\n"
                },
                "communityListMatches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayRouteMapEntryCommunityListMatch:PolicyGatewayRouteMapEntryCommunityListMatch"
                    },
                    "description": "List of Prefix List match criteria for route map. Cannot be configured together with `prefix_list_matches`. If configured together, `prefix_list_matches` will be ignored.\n"
                },
                "prefixListMatches": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of policy paths for Prefix Lists configured on this Gateway. Cannot be configured together with `community_list_match`. If configured together, `prefix_list_matches` will be ignored.\n"
                },
                "set": {
                    "$ref": "#/types/nsxt:index/PolicyGatewayRouteMapEntrySet:PolicyGatewayRouteMapEntrySet",
                    "description": "Set criteria for route map entry.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyGatewayRouteMapEntryCommunityListMatch:PolicyGatewayRouteMapEntryCommunityListMatch": {
            "properties": {
                "criteria": {
                    "type": "string",
                    "description": "Community list path or a regular expression.\n"
                },
                "matchOperator": {
                    "type": "string",
                    "description": "Match operator for the criteria, one of `MATCH_ANY`, `MATCH_ALL`, `MATCH_EXACT`, `MATCH_COMMUNITY_REGEX`, `MATCH_LARGE_COMMUNITY_REGEX`. Only last two operators can be used together with regular expression criteria.\n"
                }
            },
            "type": "object",
            "required": [
                "criteria",
                "matchOperator"
            ]
        },
        "nsxt:index/PolicyGatewayRouteMapEntrySet:PolicyGatewayRouteMapEntrySet": {
            "properties": {
                "asPathPrepend": {
                    "type": "string",
                    "description": "Autonomous System (AS) path prepend to influence route selection.\n"
                },
                "community": {
                    "type": "string",
                    "description": "BGP regular or large community for matching routes.\n"
                },
                "localPreference": {
                    "type": "integer",
                    "description": "Local preference indicates the degree of preference for one BGP route over other BGP routes.\n"
                },
                "med": {
                    "type": "integer",
                    "description": "Multi Exit Descriminator (lower value is preferred over higher value).\n"
                },
                "preferGlobalV6NextHop": {
                    "type": "boolean",
                    "description": "Indicator whether to prefer IPv6 global address over link-local as the next hop.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "Weight is used to select a route when multiple routes are available to the same network.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "localPreference",
                        "med"
                    ]
                }
            }
        },
        "nsxt:index/PolicyGatewayRouteMapTag:PolicyGatewayRouteMapTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyGroupConjunction:PolicyGroupConjunction": {
            "properties": {
                "operator": {
                    "type": "string",
                    "description": "The operator to use. Must be one of `AND` or `OR`. If `AND` is used, then the `criteria` block before/after must be of the same type and if using `condition` then also must use the same `member_type`.\n"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "nsxt:index/PolicyGroupContext:PolicyGroupContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyGroupCriteria:PolicyGroupCriteria": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGroupCriteriaCondition:PolicyGroupCriteriaCondition"
                    },
                    "description": "A repeatable condition block to select this Group's members. When multiple `condition` blocks are used in a single `criteria` they form a nested expression that's implicitly ANDed together and each nested condition must used the same `member_type`.\n"
                },
                "externalIdExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGroupCriteriaExternalIdExpression:PolicyGroupCriteriaExternalIdExpression"
                    },
                    "description": "An expression block to specify external IDs for the specified member type for this Group.\n"
                },
                "ipaddressExpression": {
                    "$ref": "#/types/nsxt:index/PolicyGroupCriteriaIpaddressExpression:PolicyGroupCriteriaIpaddressExpression",
                    "description": "An expression block to specify individual IP Addresses, ranges of IP Addresses or subnets for this Group.\n"
                },
                "macaddressExpression": {
                    "$ref": "#/types/nsxt:index/PolicyGroupCriteriaMacaddressExpression:PolicyGroupCriteriaMacaddressExpression",
                    "description": "An expression block to specify individual MAC Addresses for this Group.\n"
                },
                "pathExpression": {
                    "$ref": "#/types/nsxt:index/PolicyGroupCriteriaPathExpression:PolicyGroupCriteriaPathExpression",
                    "description": "An expression block to specify direct group members by policy path.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyGroupCriteriaCondition:PolicyGroupCriteriaCondition": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Specifies the attribute to query. Must be one of: `Tag`, `ComputerName`, `OSName`, `Name`, `NodeType`, `GroupType`, `ALL`, `IPAddress`, `PodCidr`. Please note that certain keys are only applicable to certain member types.\n"
                },
                "memberType": {
                    "type": "string",
                    "description": "Specifies the type of resource to query. Must be one of: `IPSet`, `LogicalPort`, `LogicalSwitch`, `Segment`, `SegmentPort`, `VirtualMachine`, `Group`, `DVPG`, `DVPort`, `IPAddress`, `TransportNode`, `Pod`. `Service`, `Namespace`, `KubernetesCluster`, `KubernetesNamespace`, `KubernetesIngress`, `KubernetesService`, `KubernetesNode`, `AntreaEgress`, `AntreaIPPool`. Not that certain member types are only applicable to certain environments.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "The operator to use. Must be one of `AND` or `OR`. If `AND` is used, then the `criteria` block before/after must be of the same type and if using `condition` then also must use the same `member_type`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "User specified string value to use in the query. For `Tag` criteria, use 'scope|value' notation if you wish to specify scope in criteria.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "memberType",
                "operator",
                "value"
            ]
        },
        "nsxt:index/PolicyGroupCriteriaExternalIdExpression:PolicyGroupCriteriaExternalIdExpression": {
            "properties": {
                "externalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external IDs for the specified member type.\n"
                },
                "memberType": {
                    "type": "string",
                    "description": "Specifies the type of resource to query. Must be one of: `IPSet`, `LogicalPort`, `LogicalSwitch`, `Segment`, `SegmentPort`, `VirtualMachine`, `Group`, `DVPG`, `DVPort`, `IPAddress`, `TransportNode`, `Pod`. `Service`, `Namespace`, `KubernetesCluster`, `KubernetesNamespace`, `KubernetesIngress`, `KubernetesService`, `KubernetesNode`, `AntreaEgress`, `AntreaIPPool`. Not that certain member types are only applicable to certain environments.\n"
                }
            },
            "type": "object",
            "required": [
                "externalIds"
            ]
        },
        "nsxt:index/PolicyGroupCriteriaIpaddressExpression:PolicyGroupCriteriaIpaddressExpression": {
            "properties": {
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This list can consist of a single IP address, IP address range or a subnet. Its type can be of either IPv4 or IPv6. Both IPv4 and IPv6 addresses within one expression is not allowed.\n"
                }
            },
            "type": "object",
            "required": [
                "ipAddresses"
            ]
        },
        "nsxt:index/PolicyGroupCriteriaMacaddressExpression:PolicyGroupCriteriaMacaddressExpression": {
            "properties": {
                "macAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of MAC addresses.\n"
                }
            },
            "type": "object",
            "required": [
                "macAddresses"
            ]
        },
        "nsxt:index/PolicyGroupCriteriaPathExpression:PolicyGroupCriteriaPathExpression": {
            "properties": {
                "memberPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of policy paths for direct members for this Group (such as Segments, Segment ports, Groups etc).\n"
                }
            },
            "type": "object",
            "required": [
                "memberPaths"
            ]
        },
        "nsxt:index/PolicyGroupExtendedCriteria:PolicyGroupExtendedCriteria": {
            "properties": {
                "identityGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGroupExtendedCriteriaIdentityGroup:PolicyGroupExtendedCriteriaIdentityGroup"
                    },
                    "description": "A repeatable condition block selecting user AD groups to be included in this Group. Note that `identity_groups` are `OR` with each other.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyGroupExtendedCriteriaIdentityGroup:PolicyGroupExtendedCriteriaIdentityGroup": {
            "properties": {
                "distinguishedName": {
                    "type": "string",
                    "description": "LDAP distinguished name (DN). A valid fully qualified distinguished name should be provided here. This value is valid only if it matches to exactly 1 LDAP object on the LDAP server.\n"
                },
                "domainBaseDistinguishedName": {
                    "type": "string",
                    "description": "Identity (Directory) domain base distinguished name. This is the base distinguished name for the domain where this identity group resides. (e.g. dc=example,dc=com)\n"
                },
                "sid": {
                    "type": "string",
                    "description": "Identity (Directory) Group SID (security identifier). A security identifier (SID) is a unique value of variable length used to identify a trustee. This field is only populated for Microsoft Active Directory identity store.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyGroupTag:PolicyGroupTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Group.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyHostTransportNodeProfilePreconfiguredHostSwitch:PolicyHostTransportNodeProfilePreconfiguredHostSwitch": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Name of the virtual tunnel endpoint which is preconfigured on this host switch.\n"
                },
                "hostSwitchId": {
                    "type": "string",
                    "description": "External Id of the preconfigured host switch.\n"
                },
                "transportZoneEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfilePreconfiguredHostSwitchTransportZoneEndpoint:PolicyHostTransportNodeProfilePreconfiguredHostSwitchTransportZoneEndpoint"
                    },
                    "description": "Transport zone endpoints\n"
                }
            },
            "type": "object",
            "required": [
                "hostSwitchId"
            ]
        },
        "nsxt:index/PolicyHostTransportNodeProfilePreconfiguredHostSwitchTransportZoneEndpoint:PolicyHostTransportNodeProfilePreconfiguredHostSwitchTransportZoneEndpoint": {
            "properties": {
                "transportZone": {
                    "type": "string",
                    "description": "Policy path of the transport zone for this endpoint.\n"
                },
                "transportZoneProfiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy paths of the transport zone profiles associated with this transport zone endpoint on this transport node.\n\nIn addition to arguments listed above, the following attributes are exported:\n"
                }
            },
            "type": "object",
            "required": [
                "transportZone"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "transportZone",
                        "transportZoneProfiles"
                    ]
                }
            }
        },
        "nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitch:PolicyHostTransportNodeProfileStandardHostSwitch": {
            "properties": {
                "cpuConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchCpuConfig:PolicyHostTransportNodeProfileStandardHostSwitchCpuConfig"
                    },
                    "description": "Enhanced Networking Stack enabled HostSwitch CPU configuration.\n"
                },
                "hostSwitchId": {
                    "type": "string",
                    "description": "External Id of the preconfigured host switch.\n"
                },
                "hostSwitchMode": {
                    "type": "string",
                    "description": "Operational mode of a HostSwitch. Accepted values - 'STANDARD', 'ENS', 'ENS_INTERRUPT' or 'LEGACY'. The default value is 'STANDARD'.\n"
                },
                "hostSwitchProfiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy paths of host switch profiles to be associated with this host switch.\n"
                },
                "hostSwitchType": {
                    "type": "string",
                    "description": "Type of HostSwitch. Accepted values - 'NVDS' or 'VDS'. The default value is 'NVDS'.\n"
                },
                "ipAssignment": {
                    "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchIpAssignment:PolicyHostTransportNodeProfileStandardHostSwitchIpAssignment",
                    "description": "Specification for IPs to be used with host switch virtual tunnel endpoints. Should contain exatly one of the below:\n"
                },
                "isMigratePnics": {
                    "type": "boolean",
                    "description": "Migrate any pnics which are in use.\n"
                },
                "pnics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchPnic:PolicyHostTransportNodeProfileStandardHostSwitchPnic"
                    },
                    "description": "Physical NICs connected to the host switch.\n"
                },
                "portgroupTransportZone": {
                    "type": "string",
                    "description": "Transport Zone policy path representing the DVS used in NSX on DVPG.\n"
                },
                "transportNodeProfileSubConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfig:PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfig"
                    },
                    "description": "Transport Node Profile sub-configuration Options.\n"
                },
                "transportZoneEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchTransportZoneEndpoint:PolicyHostTransportNodeProfileStandardHostSwitchTransportZoneEndpoint"
                    },
                    "description": "Transport zone endpoints\n"
                },
                "uplinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchUplink:PolicyHostTransportNodeProfileStandardHostSwitchUplink"
                    },
                    "description": "Uplink/LAG of VMware vSphere Distributed Switch connected to the HostSwitch.\n"
                },
                "vmkInstallMigrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchVmkInstallMigration:PolicyHostTransportNodeProfileStandardHostSwitchVmkInstallMigration"
                    },
                    "description": "The vmknic and logical switch mappings.\n"
                }
            },
            "type": "object",
            "required": [
                "ipAssignment"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hostSwitchId",
                        "ipAssignment"
                    ]
                }
            }
        },
        "nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchCpuConfig:PolicyHostTransportNodeProfileStandardHostSwitchCpuConfig": {
            "properties": {
                "numLcores": {
                    "type": "integer",
                    "description": "Number of Logical cpu cores (Lcores) to be placed on a specified NUMA node.\n"
                },
                "numaNodeIndex": {
                    "type": "integer",
                    "description": "Unique index of the Non Uniform Memory Access (NUMA) node.\n"
                }
            },
            "type": "object",
            "required": [
                "numLcores",
                "numaNodeIndex"
            ]
        },
        "nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchIpAssignment:PolicyHostTransportNodeProfileStandardHostSwitchIpAssignment": {
            "properties": {
                "assignedByDhcp": {
                    "type": "boolean",
                    "description": "Enables DHCP assignment.\n"
                },
                "staticIp": {
                    "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchIpAssignmentStaticIp:PolicyHostTransportNodeProfileStandardHostSwitchIpAssignmentStaticIp",
                    "description": "IP assignment specification for Static IP List.\n"
                },
                "staticIpMac": {
                    "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchIpAssignmentStaticIpMac:PolicyHostTransportNodeProfileStandardHostSwitchIpAssignmentStaticIpMac",
                    "description": "IP and MAC assignment specification for Static IP List.\n"
                },
                "staticIpPool": {
                    "type": "string",
                    "description": "IP assignment specification for Static IP Pool.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchIpAssignmentStaticIp:PolicyHostTransportNodeProfileStandardHostSwitchIpAssignmentStaticIp": {
            "properties": {
                "defaultGateway": {
                    "type": "string",
                    "description": "Gateway IP.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs for transport node host switch virtual tunnel endpoints.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "Subnet mask.\n"
                }
            },
            "type": "object",
            "required": [
                "defaultGateway",
                "ipAddresses",
                "subnetMask"
            ]
        },
        "nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchIpAssignmentStaticIpMac:PolicyHostTransportNodeProfileStandardHostSwitchIpAssignmentStaticIpMac": {
            "properties": {
                "defaultGateway": {
                    "type": "string",
                    "description": "Gateway IP.\n"
                },
                "ipMacPairs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchIpAssignmentStaticIpMacIpMacPair:PolicyHostTransportNodeProfileStandardHostSwitchIpAssignmentStaticIpMacIpMacPair"
                    },
                    "description": "List of IPs and MACs for transport node host switch virtual tunnel endpoints.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "Subnet mask.\n"
                }
            },
            "type": "object",
            "required": [
                "defaultGateway",
                "ipMacPairs",
                "subnetMask"
            ]
        },
        "nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchIpAssignmentStaticIpMacIpMacPair:PolicyHostTransportNodeProfileStandardHostSwitchIpAssignmentStaticIpMacIpMacPair": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IP address.\n"
                },
                "mac": {
                    "type": "string",
                    "description": "MAC address.\n"
                }
            },
            "type": "object",
            "required": [
                "ip"
            ]
        },
        "nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchPnic:PolicyHostTransportNodeProfileStandardHostSwitchPnic": {
            "properties": {
                "deviceName": {
                    "type": "string",
                    "description": "ESX vmk interface name.\n"
                },
                "uplinkName": {
                    "type": "string",
                    "description": "Uplink name from UplinkHostSwitch profile.\n"
                }
            },
            "type": "object",
            "required": [
                "deviceName",
                "uplinkName"
            ]
        },
        "nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfig:PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfig": {
            "properties": {
                "hostSwitchConfigOption": {
                    "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOption:PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOption",
                    "description": "Subset of the host switch configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the transport node profile config option.\n"
                }
            },
            "type": "object",
            "required": [
                "hostSwitchConfigOption",
                "name"
            ]
        },
        "nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOption:PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOption": {
            "properties": {
                "hostSwitchId": {
                    "type": "string",
                    "description": "External Id of the preconfigured host switch.\n"
                },
                "hostSwitchProfiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy paths of host switch profiles to be associated with this host switch.\n"
                },
                "ipAssignment": {
                    "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignment:PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignment",
                    "description": "Specification for IPs to be used with host switch virtual tunnel endpoints. Should contain exatly one of the below:\n"
                },
                "uplinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionUplink:PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionUplink"
                    },
                    "description": "Uplink/LAG of VMware vSphere Distributed Switch connected to the HostSwitch.\n"
                }
            },
            "type": "object",
            "required": [
                "ipAssignment"
            ]
        },
        "nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignment:PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignment": {
            "properties": {
                "assignedByDhcp": {
                    "type": "boolean",
                    "description": "Enables DHCP assignment.\n"
                },
                "staticIp": {
                    "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIp:PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIp",
                    "description": "IP assignment specification for Static IP List.\n"
                },
                "staticIpMac": {
                    "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIpMac:PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIpMac",
                    "description": "IP and MAC assignment specification for Static IP List.\n"
                },
                "staticIpPool": {
                    "type": "string",
                    "description": "IP assignment specification for Static IP Pool.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIp:PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIp": {
            "properties": {
                "defaultGateway": {
                    "type": "string",
                    "description": "Gateway IP.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs for transport node host switch virtual tunnel endpoints.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "Subnet mask.\n"
                }
            },
            "type": "object",
            "required": [
                "defaultGateway",
                "ipAddresses",
                "subnetMask"
            ]
        },
        "nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIpMac:PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIpMac": {
            "properties": {
                "defaultGateway": {
                    "type": "string",
                    "description": "Gateway IP.\n"
                },
                "ipMacPairs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIpMacIpMacPair:PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIpMacIpMacPair"
                    },
                    "description": "List of IPs and MACs for transport node host switch virtual tunnel endpoints.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "Subnet mask.\n"
                }
            },
            "type": "object",
            "required": [
                "defaultGateway",
                "ipMacPairs",
                "subnetMask"
            ]
        },
        "nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIpMacIpMacPair:PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIpMacIpMacPair": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IP address.\n"
                },
                "mac": {
                    "type": "string",
                    "description": "MAC address.\n"
                }
            },
            "type": "object",
            "required": [
                "ip"
            ]
        },
        "nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionUplink:PolicyHostTransportNodeProfileStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionUplink": {
            "properties": {
                "uplinkName": {
                    "type": "string",
                    "description": "Uplink name from UplinkHostSwitch profile.\n"
                },
                "vdsLagName": {
                    "type": "string",
                    "description": "Link Aggregation Group (LAG) name of Virtual Distributed Switch.\n"
                },
                "vdsUplinkName": {
                    "type": "string",
                    "description": "Uplink name of VMware vSphere Distributed Switch (VDS).\n"
                }
            },
            "type": "object",
            "required": [
                "uplinkName"
            ]
        },
        "nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchTransportZoneEndpoint:PolicyHostTransportNodeProfileStandardHostSwitchTransportZoneEndpoint": {
            "properties": {
                "transportZone": {
                    "type": "string",
                    "description": "Policy path of the transport zone for this endpoint.\n"
                },
                "transportZoneProfiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy paths of the transport zone profiles associated with this transport zone endpoint on this transport node.\n\nIn addition to arguments listed above, the following attributes are exported:\n"
                }
            },
            "type": "object",
            "required": [
                "transportZone"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "transportZone",
                        "transportZoneProfiles"
                    ]
                }
            }
        },
        "nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchUplink:PolicyHostTransportNodeProfileStandardHostSwitchUplink": {
            "properties": {
                "uplinkName": {
                    "type": "string",
                    "description": "Uplink name from UplinkHostSwitch profile.\n"
                },
                "vdsLagName": {
                    "type": "string",
                    "description": "Link Aggregation Group (LAG) name of Virtual Distributed Switch.\n"
                },
                "vdsUplinkName": {
                    "type": "string",
                    "description": "Uplink name of VMware vSphere Distributed Switch (VDS).\n"
                }
            },
            "type": "object",
            "required": [
                "uplinkName"
            ]
        },
        "nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitchVmkInstallMigration:PolicyHostTransportNodeProfileStandardHostSwitchVmkInstallMigration": {
            "properties": {
                "destinationNetwork": {
                    "type": "string",
                    "description": "The network id to which the ESX vmk interface will be migrated.\n"
                },
                "deviceName": {
                    "type": "string",
                    "description": "ESX vmk interface name.\n"
                }
            },
            "type": "object",
            "required": [
                "destinationNetwork",
                "deviceName"
            ]
        },
        "nsxt:index/PolicyHostTransportNodeProfileTag:PolicyHostTransportNodeProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyIntrusionServicePolicyRule:PolicyIntrusionServicePolicyRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Rule action, one of `DETECT`, `DETECT_PREVENT`. Default is `DETECT`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "destinationGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of group paths that serve as destination for this rule.\n"
                },
                "destinationsExcluded": {
                    "type": "boolean",
                    "description": "A boolean value indicating negation of destination groups.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "Traffic direction, one of `IN`, `OUT` or `IN_OUT`. Default is `IN_OUT`.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Flag to disable this rule. Default is false.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "idsProfiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of IDS profile paths relevant for this rule.\n"
                },
                "ipVersion": {
                    "type": "string",
                    "description": "Version of IP protocol, one of `IPV4`, `IPV6`, `IPV4_IPV6`. Default is `IPV4_IPV6`.\n"
                },
                "logLabel": {
                    "type": "string",
                    "description": "Additional information (string) which will be propagated to the rule syslog.\n"
                },
                "logged": {
                    "type": "boolean",
                    "description": "Flag to enable packet logging. Default is false.\n"
                },
                "notes": {
                    "type": "string",
                    "description": "Additional notes on changes.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "ruleId": {
                    "type": "integer",
                    "description": "Unique positive number that is assigned by the system and is useful for debugging.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sequenceNumber": {
                    "type": "integer",
                    "description": "This field is used to resolve conflicts between IDS policies across domains.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of service paths to match.\n"
                },
                "sourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of group paths that serve as source for this rule.\n"
                },
                "sourcesExcluded": {
                    "type": "boolean",
                    "description": "A boolean value indicating negation of source groups.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIntrusionServicePolicyRuleTag:PolicyIntrusionServicePolicyRuleTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "idsProfiles"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "idsProfiles",
                        "nsxId",
                        "revision",
                        "ruleId",
                        "sequenceNumber"
                    ]
                }
            }
        },
        "nsxt:index/PolicyIntrusionServicePolicyRuleTag:PolicyIntrusionServicePolicyRuleTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyIntrusionServicePolicyTag:PolicyIntrusionServicePolicyTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyIntrusionServiceProfileCriteria:PolicyIntrusionServiceProfileCriteria": {
            "properties": {
                "attackTargets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of supported attack targets.\n"
                },
                "attackTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of supported attack types.\n"
                },
                "cvsses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of CVSS (Common Vulnerability Scoring System) ranges. Supported values are `NONE`, `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`.\n"
                },
                "productsAffecteds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of supported products that are affected.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyIntrusionServiceProfileOverriddenSignature:PolicyIntrusionServiceProfileOverriddenSignature": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Overridden action, one of `ALERT`, `DROP`, `REJECT`. Default is `ALERT`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Flag to enable/disable this signature.\n"
                },
                "signatureId": {
                    "type": "string",
                    "description": "Id for the existing signature that profile wishes to override.\n"
                }
            },
            "type": "object",
            "required": [
                "signatureId"
            ]
        },
        "nsxt:index/PolicyIntrusionServiceProfileTag:PolicyIntrusionServiceProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this profile.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyIpAddressAllocationContext:PolicyIpAddressAllocationContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyIpAddressAllocationTag:PolicyIpAddressAllocationTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyIpBlockContext:PolicyIpBlockContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyIpBlockTag:PolicyIpBlockTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this IP Block.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyIpDiscoveryProfileContext:PolicyIpDiscoveryProfileContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyIpDiscoveryProfileTag:PolicyIpDiscoveryProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this policy.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyIpPoolBlockSubnetContext:PolicyIpPoolBlockSubnetContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyIpPoolBlockSubnetTag:PolicyIpPoolBlockSubnetTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Block Subnet.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyIpPoolContext:PolicyIpPoolContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyIpPoolStaticSubnetAllocationRange:PolicyIpPoolStaticSubnetAllocationRange": {
            "properties": {
                "end": {
                    "type": "string",
                    "description": "The end IP address for the allocation range.\n"
                },
                "start": {
                    "type": "string",
                    "description": "The start IP address for the allocation range.\n"
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ]
        },
        "nsxt:index/PolicyIpPoolStaticSubnetContext:PolicyIpPoolStaticSubnetContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyIpPoolStaticSubnetTag:PolicyIpPoolStaticSubnetTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Static Subnet.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyIpPoolTag:PolicyIpPoolTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this IP Pool.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyIpsecVpnDpdProfileTag:PolicyIpsecVpnDpdProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyIpsecVpnIkeProfileTag:PolicyIpsecVpnIkeProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyIpsecVpnLocalEndpointTag:PolicyIpsecVpnLocalEndpointTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyIpsecVpnServiceBypassRule:PolicyIpsecVpnServiceBypassRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "`PROTECT` or `BYPASS`.\n"
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of distination subnets. Subnet format is ipv4 CIDR.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of source subnets. Subnet format is ipv4 CIDR.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nsxId"
                    ]
                }
            }
        },
        "nsxt:index/PolicyIpsecVpnServiceTag:PolicyIpsecVpnServiceTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyIpsecVpnSessionRule:PolicyIpsecVpnSessionRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "`PROTECT` or `BYPASS`. Default is `PROTECT`.\n"
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of distination subnets. Subnet format is ipv4 CIDR.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of source subnets. Subnet format is ipv4 CIDR.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "nsxId"
                    ]
                }
            }
        },
        "nsxt:index/PolicyIpsecVpnSessionTag:PolicyIpsecVpnSessionTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyIpsecVpnTunnelProfileTag:PolicyIpsecVpnTunnelProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyL2VpnServiceTag:PolicyL2VpnServiceTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyL2VpnSessionTag:PolicyL2VpnSessionTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyLbPoolMember:PolicyLbPoolMember": {
            "properties": {
                "adminState": {
                    "type": "string",
                    "description": "One of `ENABLED`, `DISABLED`, `GRACEFUL_DISABLED`. Default is `ENABLED`.\n"
                },
                "backupMember": {
                    "type": "boolean",
                    "description": "Whether this member is a backup member.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the member.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Member IP address.\n"
                },
                "maxConcurrentConnections": {
                    "type": "integer",
                    "description": "To ensure members are not overloaded, connections to a member can be capped by this setting.\n"
                },
                "port": {
                    "type": "string",
                    "description": "If port is specified, all connections will be redirected to this port.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "Pool member weight is used for WEIGHTED algorithms.\n"
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "ipAddress"
                    ]
                }
            }
        },
        "nsxt:index/PolicyLbPoolMemberGroup:PolicyLbPoolMemberGroup": {
            "properties": {
                "allowIpv4": {
                    "type": "boolean",
                    "description": "Use IPv4 addresses from the grouping object, default is `true`.\n"
                },
                "allowIpv6": {
                    "type": "boolean",
                    "description": "Use IPv6 addresses from the grouping object, default is `false`. Note: this setting is only supported for pools that contain IPv6 addresses.\n"
                },
                "groupPath": {
                    "type": "string",
                    "description": "Path for policy group.\n"
                },
                "maxIpListSize": {
                    "type": "integer",
                    "description": "Maximum number of IPs to use from the grouping object.\n"
                },
                "port": {
                    "type": "string",
                    "description": "If port is specified, all connections will be redirected to this port.\n"
                }
            },
            "type": "object",
            "required": [
                "groupPath"
            ]
        },
        "nsxt:index/PolicyLbPoolSnat:PolicyLbPoolSnat": {
            "properties": {
                "ipPoolAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP ranges or IP CIDRs to use for IPPOOL SNAT type.\n"
                },
                "type": {
                    "type": "string",
                    "description": "SNAT type, one of `AUTOMAP`, `DISABLED`, `IPPOOL`. Default is `AUTOMAP`.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyLbPoolTag:PolicyLbPoolTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyLbServiceTag:PolicyLbServiceTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyLbVirtualServerAccessListControl:PolicyLbVirtualServerAccessListControl": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "A list of actions to be executed at specified phase when load balancer rule matches.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether to enable access list control option. Default is true.\n"
                },
                "groupPath": {
                    "type": "string",
                    "description": "Grouping object path.\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "groupPath"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerClientSsl:PolicyLbVirtualServerClientSsl": {
            "properties": {
                "caPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If client auth type is REQUIRED, client certificate must be signed by one Certificate Authorities provided here.\n"
                },
                "certificateChainDepth": {
                    "type": "integer",
                    "description": "Allowed certificate chain depth.\n"
                },
                "clientAuth": {
                    "type": "string",
                    "description": "Client Authentication Mode, one of `REQUIRED`, `IGNORE`. Default is `IGNORE`.\n"
                },
                "crlPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Certificate Revocation Lists can be specified to disallow compromised client certificate.\n"
                },
                "defaultCertificatePath": {
                    "type": "string",
                    "description": "Default Certificate Path. Must be specified if client_auth is set to `REQUIRED`.\n"
                },
                "sniPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This setting allows multiple certificates(for different hostnames) to be bound to the same virtual server.\n"
                },
                "sslProfilePath": {
                    "type": "string",
                    "description": "Client SSL profile path.\n"
                }
            },
            "type": "object",
            "required": [
                "defaultCertificatePath"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRule:PolicyLbVirtualServerRule": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleAction:PolicyLbVirtualServerRuleAction"
                    },
                    "description": "A list of actions to be executed at specified phase when load balancer rule matches.\n"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleCondition:PolicyLbVirtualServerRuleCondition"
                    },
                    "description": "A list of match conditions used to match application traffic.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the rule.\n"
                },
                "matchStrategy": {
                    "type": "string",
                    "description": "Match strategy for determining match of multiple conditions, one of `ALL`, `ANY`. Default is `ANY`.\n"
                },
                "phase": {
                    "type": "string",
                    "description": "Load balancer processing phase, one of `HTTP_REQUEST_REWRITE`, `HTTP_FORWARDING`, `HTTP_RESPONSE_REWRITE`, `HTTP_ACCESS` or `TRANSPORT`. Default is `HTTP_FORWARDING`.\n"
                }
            },
            "type": "object",
            "required": [
                "actions",
                "displayName"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleAction:PolicyLbVirtualServerRuleAction": {
            "properties": {
                "connectionDrops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleActionConnectionDrop:PolicyLbVirtualServerRuleActionConnectionDrop"
                    },
                    "description": "Action to drop the connections. (There is no argument to this action)\n"
                },
                "httpRedirects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleActionHttpRedirect:PolicyLbVirtualServerRuleActionHttpRedirect"
                    }
                },
                "httpRejects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleActionHttpReject:PolicyLbVirtualServerRuleActionHttpReject"
                    },
                    "description": "Action to reject HTTP request message.\n"
                },
                "httpRequestHeaderDeletes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleActionHttpRequestHeaderDelete:PolicyLbVirtualServerRuleActionHttpRequestHeaderDelete"
                    },
                    "description": "Action to delete header fields of HTTP request messages.\n"
                },
                "httpRequestHeaderRewrites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleActionHttpRequestHeaderRewrite:PolicyLbVirtualServerRuleActionHttpRequestHeaderRewrite"
                    },
                    "description": "Action to rewrite header fields of matched HTTP request messages to specified new values.\n"
                },
                "httpRequestUriRewrites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleActionHttpRequestUriRewrite:PolicyLbVirtualServerRuleActionHttpRequestUriRewrite"
                    },
                    "description": "Action to rewrite URIs in matched HTTP request messages.\n"
                },
                "httpResponseHeaderDeletes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleActionHttpResponseHeaderDelete:PolicyLbVirtualServerRuleActionHttpResponseHeaderDelete"
                    },
                    "description": "Action to delete header fields of HTTP response messages.\n"
                },
                "httpResponseHeaderRewrites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleActionHttpResponseHeaderRewrite:PolicyLbVirtualServerRuleActionHttpResponseHeaderRewrite"
                    },
                    "description": "Action to rewrite header fields of matched HTTP request message to specified new values.\n"
                },
                "jwtAuths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleActionJwtAuth:PolicyLbVirtualServerRuleActionJwtAuth"
                    },
                    "description": "Action to control access to backend server resources using JSON Web Token (JWT) authentication.\n"
                },
                "selectPools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleActionSelectPool:PolicyLbVirtualServerRuleActionSelectPool"
                    },
                    "description": "Action used to select a pool for matched HTTP request messages.\n"
                },
                "sslModeSelections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleActionSslModeSelection:PolicyLbVirtualServerRuleActionSslModeSelection"
                    },
                    "description": "Action to select SSL mode.\n"
                },
                "variableAssignments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleActionVariableAssignment:PolicyLbVirtualServerRuleActionVariableAssignment"
                    },
                    "description": "Action to create new variable and assign value to it.\n"
                },
                "variablePersistenceLearns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleActionVariablePersistenceLearn:PolicyLbVirtualServerRuleActionVariablePersistenceLearn"
                    },
                    "description": "Action to learn the value of variable from the HTTP response.\n"
                },
                "variablePersistenceOns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleActionVariablePersistenceOn:PolicyLbVirtualServerRuleActionVariablePersistenceOn"
                    },
                    "description": "Action to inspect the variable of HTTP request.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyLbVirtualServerRuleActionConnectionDrop:PolicyLbVirtualServerRuleActionConnectionDrop": {
            "properties": {
                "_dummy": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyLbVirtualServerRuleActionHttpRedirect:PolicyLbVirtualServerRuleActionHttpRedirect": {
            "properties": {
                "redirectStatus": {
                    "type": "string",
                    "description": "HTTP response status code.\n"
                },
                "redirectUrl": {
                    "type": "string",
                    "description": "The URL that the HTTP request is redirected to.\n"
                }
            },
            "type": "object",
            "required": [
                "redirectStatus",
                "redirectUrl"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleActionHttpReject:PolicyLbVirtualServerRuleActionHttpReject": {
            "properties": {
                "replyMessage": {
                    "type": "string",
                    "description": "Response message.\n"
                },
                "replyStatus": {
                    "type": "string",
                    "description": "HTTP response status code.\n"
                }
            },
            "type": "object",
            "required": [
                "replyStatus"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleActionHttpRequestHeaderDelete:PolicyLbVirtualServerRuleActionHttpRequestHeaderDelete": {
            "properties": {
                "headerName": {
                    "type": "string",
                    "description": "Name of HTTP header field.\n"
                }
            },
            "type": "object",
            "required": [
                "headerName"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleActionHttpRequestHeaderRewrite:PolicyLbVirtualServerRuleActionHttpRequestHeaderRewrite": {
            "properties": {
                "headerName": {
                    "type": "string",
                    "description": "Name of HTTP header field.\n"
                },
                "headerValue": {
                    "type": "string",
                    "description": "Value of HTTP header field.\n"
                }
            },
            "type": "object",
            "required": [
                "headerName",
                "headerValue"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleActionHttpRequestUriRewrite:PolicyLbVirtualServerRuleActionHttpRequestUriRewrite": {
            "properties": {
                "uri": {
                    "type": "string",
                    "description": "A string used to identify resource.\n"
                },
                "uriArguments": {
                    "type": "string",
                    "description": "URI arguments.\n"
                }
            },
            "type": "object",
            "required": [
                "uri"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleActionHttpResponseHeaderDelete:PolicyLbVirtualServerRuleActionHttpResponseHeaderDelete": {
            "properties": {
                "headerName": {
                    "type": "string",
                    "description": "Name of HTTP header field.\n"
                }
            },
            "type": "object",
            "required": [
                "headerName"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleActionHttpResponseHeaderRewrite:PolicyLbVirtualServerRuleActionHttpResponseHeaderRewrite": {
            "properties": {
                "headerName": {
                    "type": "string",
                    "description": "Name of HTTP header field.\n"
                },
                "headerValue": {
                    "type": "string",
                    "description": "Value of HTTP header field.\n"
                }
            },
            "type": "object",
            "required": [
                "headerName",
                "headerValue"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleActionJwtAuth:PolicyLbVirtualServerRuleActionJwtAuth": {
            "properties": {
                "key": {
                    "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleActionJwtAuthKey:PolicyLbVirtualServerRuleActionJwtAuthKey",
                    "description": "Key to verify signature of JWT token, specify exactly one of the arguments.\n"
                },
                "passJwtToPool": {
                    "type": "boolean",
                    "description": "Whether to pass JWT to backend server or remove it, Boolean, Default `false`.\n"
                },
                "realm": {
                    "type": "string",
                    "description": "JWT realm.\n"
                },
                "tokens": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JWT tokens.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyLbVirtualServerRuleActionJwtAuthKey:PolicyLbVirtualServerRuleActionJwtAuthKey": {
            "properties": {
                "certificatePath": {
                    "type": "string",
                    "description": "Use certficate to verify signature of JWT token.\n"
                },
                "publicKeyContent": {
                    "type": "string",
                    "description": "Use public key to verify signature of JWT token.\n"
                },
                "symmetricKey": {
                    "type": "string",
                    "description": "Use symmetric key to verify signature of JWT token, this argument indicates presence only, the value is discarded.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyLbVirtualServerRuleActionSelectPool:PolicyLbVirtualServerRuleActionSelectPool": {
            "properties": {
                "poolId": {
                    "type": "string",
                    "description": "Path of load balancer pool.\n"
                }
            },
            "type": "object",
            "required": [
                "poolId"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleActionSslModeSelection:PolicyLbVirtualServerRuleActionSslModeSelection": {
            "properties": {
                "sslMode": {
                    "type": "string",
                    "description": "Type of SSL mode, one of `SSL_PASSTHROUGH`, `SSL_END_TO_END` or `SSL_OFFLOAD`.\n"
                }
            },
            "type": "object",
            "required": [
                "sslMode"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleActionVariableAssignment:PolicyLbVirtualServerRuleActionVariableAssignment": {
            "properties": {
                "variableName": {
                    "type": "string",
                    "description": "Name of the variable to be matched.\n"
                },
                "variableValue": {
                    "type": "string",
                    "description": "Value of the variable to be matched.\n"
                }
            },
            "type": "object",
            "required": [
                "variableName",
                "variableValue"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleActionVariablePersistenceLearn:PolicyLbVirtualServerRuleActionVariablePersistenceLearn": {
            "properties": {
                "persistenceProfilePath": {
                    "type": "string",
                    "description": "Path to nsxt_policy_persistence_profile.\n"
                },
                "variableHashEnabled": {
                    "type": "boolean",
                    "description": "Whether to enable a hash operation for variable value, Boolean, Default `false`.\n"
                },
                "variableName": {
                    "type": "string",
                    "description": "Name of the variable to be matched.\n"
                }
            },
            "type": "object",
            "required": [
                "variableName"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleActionVariablePersistenceOn:PolicyLbVirtualServerRuleActionVariablePersistenceOn": {
            "properties": {
                "persistenceProfilePath": {
                    "type": "string",
                    "description": "Path to nsxt_policy_persistence_profile.\n"
                },
                "variableHashEnabled": {
                    "type": "boolean",
                    "description": "Whether to enable a hash operation for variable value, Boolean, Default `false`.\n"
                },
                "variableName": {
                    "type": "string",
                    "description": "Name of the variable to be matched.\n"
                }
            },
            "type": "object",
            "required": [
                "variableName"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleCondition:PolicyLbVirtualServerRuleCondition": {
            "properties": {
                "httpRequestBodies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleConditionHttpRequestBody:PolicyLbVirtualServerRuleConditionHttpRequestBody"
                    },
                    "description": "Condition to match the message body of an HTTP request.\n"
                },
                "httpRequestCookies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleConditionHttpRequestCooky:PolicyLbVirtualServerRuleConditionHttpRequestCooky"
                    },
                    "description": "Condition to match HTTP request messages by cookie.\n"
                },
                "httpRequestHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleConditionHttpRequestHeader:PolicyLbVirtualServerRuleConditionHttpRequestHeader"
                    },
                    "description": "Condition to match HTTP request messages by HTTP header fields.\n"
                },
                "httpRequestMethods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleConditionHttpRequestMethod:PolicyLbVirtualServerRuleConditionHttpRequestMethod"
                    },
                    "description": "Condition to match method of HTTP requests.\n"
                },
                "httpRequestUriArguments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleConditionHttpRequestUriArgument:PolicyLbVirtualServerRuleConditionHttpRequestUriArgument"
                    },
                    "description": "Condition to match URI arguments.\n"
                },
                "httpRequestUris": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleConditionHttpRequestUri:PolicyLbVirtualServerRuleConditionHttpRequestUri"
                    },
                    "description": "Condition to match URIs of HTTP requests messages.\n"
                },
                "httpRequestVersion": {
                    "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleConditionHttpRequestVersion:PolicyLbVirtualServerRuleConditionHttpRequestVersion",
                    "description": "Condition to match the HTTP protocol version of the HTTP request messages.\n"
                },
                "httpResponseHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleConditionHttpResponseHeader:PolicyLbVirtualServerRuleConditionHttpResponseHeader"
                    },
                    "description": "Condition to match HTTP response messages from backend servers by HTTP header fields.\n"
                },
                "httpSsls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleConditionHttpSsl:PolicyLbVirtualServerRuleConditionHttpSsl"
                    },
                    "description": "Condition to match SSL handshake and SSL connection.\n"
                },
                "ipHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleConditionIpHeader:PolicyLbVirtualServerRuleConditionIpHeader"
                    },
                    "description": "Condition to match IP header fields.\n"
                },
                "sslSnis": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleConditionSslSni:PolicyLbVirtualServerRuleConditionSslSni"
                    },
                    "description": "Condition to match SSL SNI in client hello.\n"
                },
                "tcpHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleConditionTcpHeader:PolicyLbVirtualServerRuleConditionTcpHeader"
                    },
                    "description": "Condition to match TCP header fields.\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleConditionVariable:PolicyLbVirtualServerRuleConditionVariable"
                    },
                    "description": "Condition to match variable's name and value.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyLbVirtualServerRuleConditionHttpRequestBody:PolicyLbVirtualServerRuleConditionHttpRequestBody": {
            "properties": {
                "bodyValue": {
                    "type": "string",
                    "description": "HTTP request body.\n"
                },
                "caseSensitive": {
                    "type": "boolean",
                    "description": "A case sensitive flag for variable comparison, Boolean, Default `true`.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether to reverse the match result of this condition, Boolean, Default `false`\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Match type of variable, one of `REGEX`, `STARTS_WITH`, `ENDS_WITH`. `EQUALS` or `CONTAINS`. Default is `REGEX`.\n"
                }
            },
            "type": "object",
            "required": [
                "bodyValue",
                "matchType"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleConditionHttpRequestCooky:PolicyLbVirtualServerRuleConditionHttpRequestCooky": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "A case sensitive flag for variable comparison, Boolean, Default `true`.\n"
                },
                "cookieName": {
                    "type": "string",
                    "description": "Name of cookie.\n"
                },
                "cookieValue": {
                    "type": "string",
                    "description": "Value of cookie.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether to reverse the match result of this condition, Boolean, Default `false`\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Match type of variable, one of `REGEX`, `STARTS_WITH`, `ENDS_WITH`. `EQUALS` or `CONTAINS`. Default is `REGEX`.\n"
                }
            },
            "type": "object",
            "required": [
                "cookieName",
                "cookieValue",
                "matchType"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleConditionHttpRequestHeader:PolicyLbVirtualServerRuleConditionHttpRequestHeader": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "A case sensitive flag for variable comparison, Boolean, Default `true`.\n"
                },
                "headerName": {
                    "type": "string",
                    "description": "Name of HTTP header field.\n"
                },
                "headerValue": {
                    "type": "string",
                    "description": "Value of HTTP header field.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether to reverse the match result of this condition, Boolean, Default `false`\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Match type of variable, one of `REGEX`, `STARTS_WITH`, `ENDS_WITH`. `EQUALS` or `CONTAINS`. Default is `REGEX`.\n"
                }
            },
            "type": "object",
            "required": [
                "headerName",
                "headerValue",
                "matchType"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleConditionHttpRequestMethod:PolicyLbVirtualServerRuleConditionHttpRequestMethod": {
            "properties": {
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether to reverse the match result of this condition, Boolean, Default `false`\n"
                },
                "method": {
                    "type": "string",
                    "description": "Type of HTTP request method, one of `GET`, `OPTIONS`, `POST`, `HEAD` or `PUT`.\n"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleConditionHttpRequestUri:PolicyLbVirtualServerRuleConditionHttpRequestUri": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "A case sensitive flag for variable comparison, Boolean, Default `true`.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether to reverse the match result of this condition, Boolean, Default `false`\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Match type of variable, one of `REGEX`, `STARTS_WITH`, `ENDS_WITH`. `EQUALS` or `CONTAINS`. Default is `REGEX`.\n"
                },
                "uri": {
                    "type": "string",
                    "description": "A string used to identify resource.\n"
                }
            },
            "type": "object",
            "required": [
                "matchType",
                "uri"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleConditionHttpRequestUriArgument:PolicyLbVirtualServerRuleConditionHttpRequestUriArgument": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "A case sensitive flag for variable comparison, Boolean, Default `true`.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether to reverse the match result of this condition, Boolean, Default `false`\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Match type of variable, one of `REGEX`, `STARTS_WITH`, `ENDS_WITH`. `EQUALS` or `CONTAINS`. Default is `REGEX`.\n"
                },
                "uriArguments": {
                    "type": "string",
                    "description": "URI arguments.\n"
                }
            },
            "type": "object",
            "required": [
                "matchType",
                "uriArguments"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleConditionHttpRequestVersion:PolicyLbVirtualServerRuleConditionHttpRequestVersion": {
            "properties": {
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether to reverse the match result of this condition, Boolean, Default `false`\n"
                },
                "version": {
                    "type": "string",
                    "description": "HTTP version, one of `HTTP_VERSION_1_0` or `HTTP_VERSION_1_1`.\n"
                }
            },
            "type": "object",
            "required": [
                "version"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleConditionHttpResponseHeader:PolicyLbVirtualServerRuleConditionHttpResponseHeader": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "A case sensitive flag for variable comparison, Boolean, Default `true`.\n"
                },
                "headerName": {
                    "type": "string",
                    "description": "Name of HTTP header field.\n"
                },
                "headerValue": {
                    "type": "string",
                    "description": "Value of HTTP header field.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether to reverse the match result of this condition, Boolean, Default `false`\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Match type of variable, one of `REGEX`, `STARTS_WITH`, `ENDS_WITH`. `EQUALS` or `CONTAINS`. Default is `REGEX`.\n"
                }
            },
            "type": "object",
            "required": [
                "headerName",
                "headerValue",
                "matchType"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleConditionHttpSsl:PolicyLbVirtualServerRuleConditionHttpSsl": {
            "properties": {
                "clientCertificateIssuerDns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleConditionHttpSslClientCertificateIssuerDn:PolicyLbVirtualServerRuleConditionHttpSslClientCertificateIssuerDn"
                    },
                    "description": "The issuer DN match condition of the client certificate.\n"
                },
                "clientCertificateSubjectDns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRuleConditionHttpSslClientCertificateSubjectDn:PolicyLbVirtualServerRuleConditionHttpSslClientCertificateSubjectDn"
                    },
                    "description": "The subject DN match condition of the client certificate.\n"
                },
                "clientSupportedSslCiphers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether to reverse the match result of this condition, Boolean, Default `false`\n"
                },
                "sessionReused": {
                    "type": "string",
                    "description": "The type of SSL session reused, one of `IGNORE`, `REUSED` or `NEW`. Default is `IGNORE`.\n"
                },
                "usedProtocol": {
                    "type": "string",
                    "description": "Protocol of an established SSL connection, one of `SSL_V2`, `SSL_V3`, `TLS_V1`, `TLS_V1_1` or `TLS_V1_2`.\n"
                },
                "usedSslCipher": {
                    "type": "string",
                    "description": "Cypher used for an established SSL connection (see documentation for possible values).\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyLbVirtualServerRuleConditionHttpSslClientCertificateIssuerDn:PolicyLbVirtualServerRuleConditionHttpSslClientCertificateIssuerDn": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "A case sensitive flag for variable comparison, Boolean, Default `true`.\n"
                },
                "issuerDn": {
                    "type": "string",
                    "description": "Value of issuer DN.\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Match type of variable, one of `REGEX`, `STARTS_WITH`, `ENDS_WITH`. `EQUALS` or `CONTAINS`. Default is `REGEX`.\n"
                }
            },
            "type": "object",
            "required": [
                "issuerDn",
                "matchType"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleConditionHttpSslClientCertificateSubjectDn:PolicyLbVirtualServerRuleConditionHttpSslClientCertificateSubjectDn": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "A case sensitive flag for variable comparison, Boolean, Default `true`.\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Match type of variable, one of `REGEX`, `STARTS_WITH`, `ENDS_WITH`. `EQUALS` or `CONTAINS`. Default is `REGEX`.\n"
                },
                "subjectDn": {
                    "type": "string",
                    "description": "Value of subject DN.\n"
                }
            },
            "type": "object",
            "required": [
                "matchType",
                "subjectDn"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleConditionIpHeader:PolicyLbVirtualServerRuleConditionIpHeader": {
            "properties": {
                "groupPath": {
                    "type": "string",
                    "description": "Grouping object path.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether to reverse the match result of this condition, Boolean, Default `false`\n"
                },
                "sourceAddress": {
                    "type": "string",
                    "description": "Source IP address, range or subnet of HTTP message.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyLbVirtualServerRuleConditionSslSni:PolicyLbVirtualServerRuleConditionSslSni": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "A case sensitive flag for variable comparison, Boolean, Default `true`.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether to reverse the match result of this condition, Boolean, Default `false`\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Match type of variable, one of `REGEX`, `STARTS_WITH`, `ENDS_WITH`. `EQUALS` or `CONTAINS`. Default is `REGEX`.\n"
                },
                "sni": {
                    "type": "string",
                    "description": "The server name indication.\n"
                }
            },
            "type": "object",
            "required": [
                "matchType",
                "sni"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleConditionTcpHeader:PolicyLbVirtualServerRuleConditionTcpHeader": {
            "properties": {
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether to reverse the match result of this condition, Boolean, Default `false`\n"
                },
                "sourcePort": {
                    "type": "string",
                    "description": "TCP source port or port range of HTTP message.\n"
                }
            },
            "type": "object",
            "required": [
                "sourcePort"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerRuleConditionVariable:PolicyLbVirtualServerRuleConditionVariable": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean",
                    "description": "A case sensitive flag for variable comparison, Boolean, Default `true`.\n"
                },
                "inverse": {
                    "type": "boolean",
                    "description": "A flag to indicate whether to reverse the match result of this condition, Boolean, Default `false`\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "Match type of variable, one of `REGEX`, `STARTS_WITH`, `ENDS_WITH`. `EQUALS` or `CONTAINS`. Default is `REGEX`.\n"
                },
                "variableName": {
                    "type": "string",
                    "description": "Name of the variable to be matched.\n"
                },
                "variableValue": {
                    "type": "string",
                    "description": "Value of the variable to be matched.\n"
                }
            },
            "type": "object",
            "required": [
                "matchType",
                "variableName",
                "variableValue"
            ]
        },
        "nsxt:index/PolicyLbVirtualServerServerSsl:PolicyLbVirtualServerServerSsl": {
            "properties": {
                "caPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If client auth type is REQUIRED, client certificate must be signed by one Certificate Authorities provided here.\n"
                },
                "certificateChainDepth": {
                    "type": "integer",
                    "description": "Allowed certificate chain depth.\n"
                },
                "clientCertificatePath": {
                    "type": "string",
                    "description": "Client certificat path for client authentication against the server.\n"
                },
                "crlPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Certificate Revocation Lists can be specified to disallow compromised client certificate.\n"
                },
                "serverAuth": {
                    "type": "string",
                    "description": "Server Authentication Mode, one of `REQUIRED`, `IGNORE`, `AUTO_APPLY`. Default is `AUTO_APPLY`.\n"
                },
                "sslProfilePath": {
                    "type": "string",
                    "description": "Client SSL profile path.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyLbVirtualServerTag:PolicyLbVirtualServerTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyMacDiscoveryProfileContext:PolicyMacDiscoveryProfileContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyMacDiscoveryProfileTag:PolicyMacDiscoveryProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyNatRuleContext:PolicyNatRuleContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyNatRuleTag:PolicyNatRuleTag": {
            "properties": {
                "scope": {
                    "type": "string",
                    "description": "A list of paths to interfaces and/or labels where the NAT Rule is enforced.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this NAT Rule.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyOspfAreaTag:PolicyOspfAreaTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyOspfConfigSummaryAddress:PolicyOspfConfigSummaryAddress": {
            "properties": {
                "advertise": {
                    "type": "boolean",
                    "description": "A boolean flag to configure advertisement of external routes into the OSPF domain. Default is `true`.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "OSPF Summary address in CIDR format.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyOspfConfigTag:PolicyOspfConfigTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Tier-0 gateway's OSPF configuration.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyPredefinedGatewayPolicyContext:PolicyPredefinedGatewayPolicyContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyPredefinedGatewayPolicyDefaultRule:PolicyPredefinedGatewayPolicyDefaultRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action for the Rule. Must be one of: `ALLOW`, `DROP` or `REJECT`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "logLabel": {
                    "type": "string",
                    "description": "Additional information (string) which will be propagated to the rule syslog.\n"
                },
                "logged": {
                    "type": "boolean",
                    "description": "A boolean flag to enable packet logging.\n"
                },
                "nsxId": {
                    "type": "string"
                },
                "path": {
                    "type": "string",
                    "description": "Policy path for the predefined Gateway Policy to modify.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "Scope for the default rule that should be modified. Only one default rule can be present for each scope.\n"
                },
                "sequenceNumber": {
                    "type": "integer",
                    "description": "Sequence number of the this rule, is defined by order of rules in the list.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyPredefinedGatewayPolicyDefaultRuleTag:PolicyPredefinedGatewayPolicyDefaultRuleTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "type": "object",
            "required": [
                "scope"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "nsxId",
                        "path",
                        "revision",
                        "scope",
                        "sequenceNumber"
                    ]
                }
            }
        },
        "nsxt:index/PolicyPredefinedGatewayPolicyDefaultRuleTag:PolicyPredefinedGatewayPolicyDefaultRuleTag": {
            "properties": {
                "scope": {
                    "type": "string",
                    "description": "Scope for the default rule that should be modified. Only one default rule can be present for each scope.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyPredefinedGatewayPolicyRule:PolicyPredefinedGatewayPolicyRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action for the Rule. Must be one of: `ALLOW`, `DROP` or `REJECT`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "destinationGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of group paths that serve as the destination for this rule. IPs, IP ranges, or CIDRs may also be used starting in NSX-T 3.0. An empty set can be used to specify \"Any\".\n"
                },
                "destinationsExcluded": {
                    "type": "boolean",
                    "description": "A boolean value indicating negation of destination groups.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "The traffic direction for the policy. Must be one of: `IN`, `OUT` or `IN_OUT`. Defaults to `IN_OUT`.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "A boolean value to indicate the rule is disabled. Defaults to `false`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "ipVersion": {
                    "type": "string",
                    "description": "The IP Protocol for the rule. Must be one of: `IPV4`, `IPV6` or `IPV4_IPV6`. Defaults to `IPV4_IPV6`.\n"
                },
                "logLabel": {
                    "type": "string",
                    "description": "Additional information (string) which will be propagated to the rule syslog.\n"
                },
                "logged": {
                    "type": "boolean",
                    "description": "A boolean flag to enable packet logging.\n"
                },
                "notes": {
                    "type": "string",
                    "description": "Text for additional notes on changes for the rule.\n"
                },
                "nsxId": {
                    "type": "string"
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of context profiles for the rule. Note: due to platform issue, this setting is only supported with NSX 3.2 onwards.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "ruleId": {
                    "type": "integer",
                    "description": "Unique positive number that is assigned by the system and is useful for debugging.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Scope for the default rule that should be modified. Only one default rule can be present for each scope.\n"
                },
                "sequenceNumber": {
                    "type": "integer",
                    "description": "Sequence number of the this rule, is defined by order of rules in the list.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of services to match.\n"
                },
                "sourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of group paths that serve as the source for this rule. IPs, IP ranges, or CIDRs may also be used starting in NSX-T 3.0. An empty set can be used to specify \"Any\".\n"
                },
                "sourcesExcluded": {
                    "type": "boolean"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyPredefinedGatewayPolicyRuleTag:PolicyPredefinedGatewayPolicyRuleTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "scopes"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "nsxId",
                        "revision",
                        "ruleId",
                        "scopes",
                        "sequenceNumber"
                    ]
                }
            }
        },
        "nsxt:index/PolicyPredefinedGatewayPolicyRuleTag:PolicyPredefinedGatewayPolicyRuleTag": {
            "properties": {
                "scope": {
                    "type": "string",
                    "description": "Scope for the default rule that should be modified. Only one default rule can be present for each scope.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyPredefinedGatewayPolicyTag:PolicyPredefinedGatewayPolicyTag": {
            "properties": {
                "scope": {
                    "type": "string",
                    "description": "Scope for the default rule that should be modified. Only one default rule can be present for each scope.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyPredefinedSecurityPolicyContext:PolicyPredefinedSecurityPolicyContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyPredefinedSecurityPolicyDefaultRule:PolicyPredefinedSecurityPolicyDefaultRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action for the Rule. Must be one of: `ALLOW`, `DROP` or `REJECT`. Note that `REJECT` action is not applicable for L2 policy.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyPredefinedSecurityPolicyDefaultRuleContext:PolicyPredefinedSecurityPolicyDefaultRuleContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "logLabel": {
                    "type": "string",
                    "description": "Additional information (string) which will be propagated to the rule syslog.\n"
                },
                "logged": {
                    "type": "boolean",
                    "description": "A boolean flag to enable packet logging.\n"
                },
                "nsxId": {
                    "type": "string"
                },
                "path": {
                    "type": "string",
                    "description": "Policy path for the predefined Security Policy to modify.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "List of policy paths where the rule is applied.\n"
                },
                "sequenceNumber": {
                    "type": "integer",
                    "description": "Sequence number of the this rule, is defined by order of rules in the list.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyPredefinedSecurityPolicyDefaultRuleTag:PolicyPredefinedSecurityPolicyDefaultRuleTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "nsxId",
                        "path",
                        "revision",
                        "scope",
                        "sequenceNumber"
                    ]
                }
            }
        },
        "nsxt:index/PolicyPredefinedSecurityPolicyDefaultRuleContext:PolicyPredefinedSecurityPolicyDefaultRuleContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyPredefinedSecurityPolicyDefaultRuleTag:PolicyPredefinedSecurityPolicyDefaultRuleTag": {
            "properties": {
                "scope": {
                    "type": "string",
                    "description": "List of policy paths where the rule is applied.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyPredefinedSecurityPolicyRule:PolicyPredefinedSecurityPolicyRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action for the Rule. Must be one of: `ALLOW`, `DROP` or `REJECT`. Note that `REJECT` action is not applicable for L2 policy.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "destinationGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of group paths that serve as the destination for this rule. IPs, IP ranges, or CIDRs may also be used starting in NSX-T 3.0. An empty set can be used to specify \"Any\".\n"
                },
                "destinationsExcluded": {
                    "type": "boolean",
                    "description": "A boolean value indicating negation of destination groups.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "The traffic direction for the policy. Must be one of: `IN`, `OUT` or `IN_OUT`. Defaults to `IN_OUT`.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "A boolean value to indicate the rule is disabled. Defaults to `false`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "ipVersion": {
                    "type": "string",
                    "description": "The IP Protocol for the rule. Must be one of: `IPV4`, `IPV6` or `IPV4_IPV6`. Defaults to `IPV4_IPV6`.\n"
                },
                "logLabel": {
                    "type": "string",
                    "description": "Additional information (string) which will be propagated to the rule syslog.\n"
                },
                "logged": {
                    "type": "boolean",
                    "description": "A boolean flag to enable packet logging.\n"
                },
                "notes": {
                    "type": "string",
                    "description": "Text for additional notes on changes for the rule.\n"
                },
                "nsxId": {
                    "type": "string"
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of profiles for the rule.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "ruleId": {
                    "type": "integer",
                    "description": "Unique positive number that is assigned by the system and is useful for debugging.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of policy paths where the rule is applied.\n"
                },
                "sequenceNumber": {
                    "type": "integer",
                    "description": "Sequence number of the this rule, is defined by order of rules in the list.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of services to match.\n"
                },
                "sourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of group paths that serve as the source for this rule. IPs, IP ranges, or CIDRs may also be used starting in NSX-T 3.0. An empty set can be used to specify \"Any\".\n"
                },
                "sourcesExcluded": {
                    "type": "boolean"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyPredefinedSecurityPolicyRuleTag:PolicyPredefinedSecurityPolicyRuleTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "type": "object",
            "required": [
                "displayName"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "nsxId",
                        "revision",
                        "ruleId",
                        "sequenceNumber"
                    ]
                }
            }
        },
        "nsxt:index/PolicyPredefinedSecurityPolicyRuleTag:PolicyPredefinedSecurityPolicyRuleTag": {
            "properties": {
                "scope": {
                    "type": "string",
                    "description": "List of policy paths where the rule is applied.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyPredefinedSecurityPolicyTag:PolicyPredefinedSecurityPolicyTag": {
            "properties": {
                "scope": {
                    "type": "string",
                    "description": "List of policy paths where the rule is applied.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyProjectSiteInfo:PolicyProjectSiteInfo": {
            "properties": {
                "edgeClusterPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The edge cluster on which the networking elements for the Org will be created.\n"
                },
                "sitePath": {
                    "type": "string",
                    "description": "This represents the path of the site which is managed by Global Manager. For the local manager, if set, this needs to point to 'default'.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyProjectTag:PolicyProjectTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyQosProfileContext:PolicyQosProfileContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyQosProfileEgressRateShaper:PolicyQosProfileEgressRateShaper": {
            "properties": {
                "averageBwMbps": {
                    "type": "integer",
                    "description": "Average Bandwidth in MBPS.\n"
                },
                "burstSize": {
                    "type": "integer",
                    "description": "Burst size in bytes.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this rate shaper is enabled.\n"
                },
                "peakBwMbps": {
                    "type": "integer",
                    "description": "Peak Bandwidth in MBPS.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyQosProfileIngressBroadcastRateShaper:PolicyQosProfileIngressBroadcastRateShaper": {
            "properties": {
                "averageBwKbps": {
                    "type": "integer",
                    "description": "Average Bandwidth in KBPS.\n"
                },
                "burstSize": {
                    "type": "integer",
                    "description": "Burst size in bytes.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this rate shaper is enabled.\n"
                },
                "peakBwKbps": {
                    "type": "integer",
                    "description": "Peak Bandwidth in KBPS.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyQosProfileIngressRateShaper:PolicyQosProfileIngressRateShaper": {
            "properties": {
                "averageBwMbps": {
                    "type": "integer",
                    "description": "Average Bandwidth in MBPS.\n"
                },
                "burstSize": {
                    "type": "integer",
                    "description": "Burst size in bytes.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this rate shaper is enabled.\n"
                },
                "peakBwMbps": {
                    "type": "integer",
                    "description": "Peak Bandwidth in MBPS.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyQosProfileTag:PolicyQosProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this policy.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicySecurityPolicyContext:PolicySecurityPolicyContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicySecurityPolicyRule:PolicySecurityPolicyRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Rule action, one of `ALLOW`, `DROP`, `REJECT` and `JUMP_TO_APPLICATION`. Default is `ALLOW`. `JUMP_TO_APPLICATION` is only applicable in `Environment` category.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "destinationGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of group paths that serve as the destination for this rule. IPs, IP ranges, or CIDRs may also be used starting in NSX-T 3.0. An empty set can be used to specify \"Any\".\n"
                },
                "destinationsExcluded": {
                    "type": "boolean",
                    "description": "A boolean value indicating negation of destination groups.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "Traffic direction, one of `IN`, `OUT` or `IN_OUT`. Default is `IN_OUT`.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Flag to disable this rule. Default is false.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "ipVersion": {
                    "type": "string",
                    "description": "Version of IP protocol, one of `NONE`, `IPV4`, `IPV6`, `IPV4_IPV6`. Default is `IPV4_IPV6`. For `Ethernet` category rules, use `NONE` value.\n"
                },
                "logLabel": {
                    "type": "string",
                    "description": "Additional information (string) which will be propagated to the rule syslog.\n"
                },
                "logged": {
                    "type": "boolean",
                    "description": "Flag to enable packet logging. Default is false.\n"
                },
                "notes": {
                    "type": "string",
                    "description": "Additional notes on changes.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of profile paths relevant for this rule.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "ruleId": {
                    "type": "integer",
                    "description": "Unique positive number that is assigned by the system and is useful for debugging.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of policy object paths where the rule is applied.\n"
                },
                "sequenceNumber": {
                    "type": "integer",
                    "description": "It is recommended not to specify sequence number for rules, and rely on NSX to auto-assign them. If you choose to specify sequence numbers, you must make sure the numbers are consistent with order of the rules in configuration. To avoid confusion, either specify sequence numbers in all rules, or none at all.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of service paths to match.\n"
                },
                "sourceGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of group paths that serve as the source for this rule. IPs, IP ranges, or CIDRs may also be used starting in NSX-T 3.0. An empty set can be used to specify \"Any\".\n"
                },
                "sourcesExcluded": {
                    "type": "boolean",
                    "description": "A boolean value indicating negation of source groups.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicySecurityPolicyRuleTag:PolicySecurityPolicyRuleTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "type": "object",
            "required": [
                "displayName"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "nsxId",
                        "revision",
                        "ruleId",
                        "sequenceNumber"
                    ]
                }
            }
        },
        "nsxt:index/PolicySecurityPolicyRuleTag:PolicySecurityPolicyRuleTag": {
            "properties": {
                "scope": {
                    "type": "string",
                    "description": "Set of policy object paths where the rule is applied.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicySecurityPolicyTag:PolicySecurityPolicyTag": {
            "properties": {
                "scope": {
                    "type": "string",
                    "description": "Set of policy object paths where the rule is applied.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicySegmentAdvancedConfig:PolicySegmentAdvancedConfig": {
            "properties": {
                "addressPoolPath": {
                    "type": "string",
                    "description": "List of Policy path to IP address pools (for now only one pool is supported by NSX)\n"
                },
                "connectivity": {
                    "type": "string",
                    "description": "Connectivity configuration to manually connect (ON) or disconnect (OFF).\n"
                },
                "hybrid": {
                    "type": "boolean",
                    "description": "Boolean flag to identify a hybrid logical switch.\n"
                },
                "localEgress": {
                    "type": "boolean",
                    "description": "Boolean flag to enable local egress when used in conjunction with L2VPN.\n"
                },
                "uplinkTeamingPolicy": {
                    "type": "string",
                    "description": "The name of the switching uplink teaming policy for the bridge endpoint.\n"
                },
                "urpfMode": {
                    "type": "string",
                    "description": "URPF mode to be applied to gateway downlink interface. One of `STRICT`, `NONE`.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicySegmentBridgeConfig:PolicySegmentBridgeConfig": {
            "properties": {
                "profilePath": {
                    "type": "string",
                    "description": "Path for edge bridge profile to be associated with the segment.\n"
                },
                "transportZonePath": {
                    "type": "string",
                    "description": "Path for vlan transport zone for the bridge.\n"
                },
                "uplinkTeamingPolicy": {
                    "type": "string",
                    "description": "The name of the switching uplink teaming policy for the bridge endpoint.\n"
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VLAN IDs or ranges.\n"
                }
            },
            "type": "object",
            "required": [
                "profilePath",
                "transportZonePath",
                "vlanIds"
            ]
        },
        "nsxt:index/PolicySegmentContext:PolicySegmentContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicySegmentDiscoveryProfile:PolicySegmentDiscoveryProfile": {
            "properties": {
                "bindingMapPath": {
                    "type": "string"
                },
                "ipDiscoveryProfilePath": {
                    "type": "string",
                    "description": "Path for IP discovery profile to be associated with the segment.\n"
                },
                "macDiscoveryProfilePath": {
                    "type": "string",
                    "description": "Path for MAC discovery profile to be associated with the segment.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindingMapPath",
                        "revision"
                    ]
                }
            }
        },
        "nsxt:index/PolicySegmentL2Extension:PolicySegmentL2Extension": {
            "properties": {
                "l2vpnPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy paths of associated L2 VPN sessions.\n"
                },
                "tunnelId": {
                    "type": "integer",
                    "description": "The Tunnel ID that's a int value between 1 and 4093.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicySegmentQosProfile:PolicySegmentQosProfile": {
            "properties": {
                "bindingMapPath": {
                    "type": "string"
                },
                "qosProfilePath": {
                    "type": "string",
                    "description": "Path for qos profile to be associated with the segment.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                }
            },
            "type": "object",
            "required": [
                "qosProfilePath"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindingMapPath",
                        "qosProfilePath",
                        "revision"
                    ]
                }
            }
        },
        "nsxt:index/PolicySegmentSecurityProfile:PolicySegmentSecurityProfile": {
            "properties": {
                "bindingMapPath": {
                    "type": "string"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "securityProfilePath": {
                    "type": "string",
                    "description": "Path for segment security profile to be associated with the segment.\n"
                },
                "spoofguardProfilePath": {
                    "type": "string",
                    "description": "Path for spoofguard profile to be associated with the segment.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindingMapPath",
                        "revision"
                    ]
                }
            }
        },
        "nsxt:index/PolicySegmentSecurityProfileContext:PolicySegmentSecurityProfileContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicySegmentSecurityProfileRateLimit:PolicySegmentSecurityProfileRateLimit": {
            "properties": {
                "rxBroadcast": {
                    "type": "integer",
                    "description": "Incoming broadcast traffic limit in packets per second.\n"
                },
                "rxMulticast": {
                    "type": "integer",
                    "description": "Incoming multicast traffic limit in packets per second.\n"
                },
                "txBroadcast": {
                    "type": "integer",
                    "description": "Outgoing broadcast traffic limit in packets per second.\n"
                },
                "txMulticast": {
                    "type": "integer",
                    "description": "Outgoing multicast traffic limit in packets per second.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicySegmentSecurityProfileTag:PolicySegmentSecurityProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicySegmentSubnet:PolicySegmentSubnet": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "description": "Gateway IP address CIDR. This argument can not be changed if DHCP is enabled for the subnet.\n"
                },
                "dhcpRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DHCP address ranges for dynamic IP allocation.\n"
                },
                "dhcpV4Config": {
                    "$ref": "#/types/nsxt:index/PolicySegmentSubnetDhcpV4Config:PolicySegmentSubnetDhcpV4Config",
                    "description": "DHCPv4 config for IPv4 subnet. This clause is supported with NSX 3.0.0 onwards.\n"
                },
                "dhcpV6Config": {
                    "$ref": "#/types/nsxt:index/PolicySegmentSubnetDhcpV6Config:PolicySegmentSubnetDhcpV6Config",
                    "description": "DHCPv6 config for IPv6 subnet. This clause is supported with NSX 3.0.0 onwards.\n"
                },
                "network": {
                    "type": "string",
                    "description": "Destination in cidr format.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "network"
                    ]
                }
            }
        },
        "nsxt:index/PolicySegmentSubnetDhcpV4Config:PolicySegmentSubnetDhcpV4Config": {
            "properties": {
                "dhcpGenericOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicySegmentSubnetDhcpV4ConfigDhcpGenericOption:PolicySegmentSubnetDhcpV4ConfigDhcpGenericOption"
                    },
                    "description": "Generic DHCP options.\n"
                },
                "dhcpOption121s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicySegmentSubnetDhcpV4ConfigDhcpOption121:PolicySegmentSubnetDhcpV4ConfigDhcpOption121"
                    },
                    "description": "DHCP classless static routes.\n"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses of DNS servers for the subnet.\n"
                },
                "leaseTime": {
                    "type": "integer",
                    "description": "DHCP lease time in seconds.\n"
                },
                "serverAddress": {
                    "type": "string",
                    "description": "IP address of the DHCP server in CIDR format. This attribute is required if segment has provided dhcp_config_path and it represents a DHCP server config.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicySegmentSubnetDhcpV4ConfigDhcpGenericOption:PolicySegmentSubnetDhcpV4ConfigDhcpGenericOption": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "DHCP option code. Valid values are from 0 to 255.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DHCP option values.\n"
                }
            },
            "type": "object",
            "required": [
                "code",
                "values"
            ]
        },
        "nsxt:index/PolicySegmentSubnetDhcpV4ConfigDhcpOption121:PolicySegmentSubnetDhcpV4ConfigDhcpOption121": {
            "properties": {
                "network": {
                    "type": "string",
                    "description": "Destination in cidr format.\n"
                },
                "nextHop": {
                    "type": "string",
                    "description": "IP address of next hop.\n"
                }
            },
            "type": "object",
            "required": [
                "network",
                "nextHop"
            ]
        },
        "nsxt:index/PolicySegmentSubnetDhcpV6Config:PolicySegmentSubnetDhcpV6Config": {
            "properties": {
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses of DNS servers for the subnet.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domain names for this subnet.\n"
                },
                "excludedRanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicySegmentSubnetDhcpV6ConfigExcludedRange:PolicySegmentSubnetDhcpV6ConfigExcludedRange"
                    },
                    "description": "List of excluded address ranges to define dynamic ip allocation ranges.\n"
                },
                "leaseTime": {
                    "type": "integer",
                    "description": "DHCP lease time in seconds.\n"
                },
                "preferredTime": {
                    "type": "integer",
                    "description": "The time interval in seconds, in which the prefix is advertised as preferred.\n"
                },
                "serverAddress": {
                    "type": "string",
                    "description": "IP address of the DHCP server in CIDR format. This attribute is required if segment has provided dhcp_config_path and it represents a DHCP server config.\n"
                },
                "sntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IPv6 address of SNTP servers for the subnet.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicySegmentSubnetDhcpV6ConfigExcludedRange:PolicySegmentSubnetDhcpV6ConfigExcludedRange": {
            "properties": {
                "end": {
                    "type": "string",
                    "description": "IPv6 address that marks end of the range.\n"
                },
                "start": {
                    "type": "string",
                    "description": "IPv6 address that marks beginning of the range.\n"
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ]
        },
        "nsxt:index/PolicySegmentTag:PolicySegmentTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this policy.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyServiceAlgorithmEntry:PolicyServiceAlgorithmEntry": {
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "Algorithm, one of `ORACLE_TNS`, `FTP`, `SUN_RPC_TCP`, `SUN_RPC_UDP`, `MS_RPC_TCP`, `MS_RPC_UDP`, `NBNS_BROADCAST`(Deprecated), `NBDG_BROADCAST`(Deprecated), `TFTP`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the service entry.\n"
                },
                "destinationPort": {
                    "type": "string",
                    "description": "a single destination port.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the service entry.\n"
                },
                "sourcePorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of source ports/ranges.\n"
                }
            },
            "type": "object",
            "required": [
                "algorithm",
                "destinationPort"
            ]
        },
        "nsxt:index/PolicyServiceContext:PolicyServiceContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\nThe service must contain at least 1 entry (of at least one of the types), and possibly more.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyServiceEtherTypeEntry:PolicyServiceEtherTypeEntry": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the service entry.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the service entry.\n"
                },
                "etherType": {
                    "type": "integer",
                    "description": "Type of the encapsulated protocol.\n"
                }
            },
            "type": "object",
            "required": [
                "etherType"
            ]
        },
        "nsxt:index/PolicyServiceIcmpEntry:PolicyServiceIcmpEntry": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the service entry.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the service entry.\n"
                },
                "icmpCode": {
                    "type": "string",
                    "description": "ICMP message code.\n"
                },
                "icmpType": {
                    "type": "string",
                    "description": "ICMP message type.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "IP protocol number.\n"
                }
            },
            "type": "object",
            "required": [
                "protocol"
            ]
        },
        "nsxt:index/PolicyServiceIgmpEntry:PolicyServiceIgmpEntry": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the service entry.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the service entry.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyServiceIpProtocolEntry:PolicyServiceIpProtocolEntry": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the service entry.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the service entry.\n"
                },
                "protocol": {
                    "type": "integer",
                    "description": "IP protocol number.\n"
                }
            },
            "type": "object",
            "required": [
                "protocol"
            ]
        },
        "nsxt:index/PolicyServiceL4PortSetEntry:PolicyServiceL4PortSetEntry": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the service entry.\n"
                },
                "destinationPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of destination ports.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the service entry.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "IP protocol number.\n"
                },
                "sourcePorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of source ports/ranges.\n"
                }
            },
            "type": "object",
            "required": [
                "protocol"
            ]
        },
        "nsxt:index/PolicyServiceNestedServiceEntry:PolicyServiceNestedServiceEntry": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the service entry.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the service entry.\n"
                },
                "nestedServicePath": {
                    "type": "string",
                    "description": "Path of the nested service.\n"
                }
            },
            "type": "object",
            "required": [
                "nestedServicePath"
            ]
        },
        "nsxt:index/PolicyServiceTag:PolicyServiceTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicySpoofGuardProfileContext:PolicySpoofGuardProfileContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicySpoofGuardProfileTag:PolicySpoofGuardProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyStaticRouteBfdPeerTag:PolicyStaticRouteBfdPeerTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyStaticRouteContext:PolicyStaticRouteContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyStaticRouteNextHop:PolicyStaticRouteNextHop": {
            "properties": {
                "adminDistance": {
                    "type": "integer",
                    "description": "The cost associated with the next hop. Valid values are 1 - 255 and the default is 1.\n"
                },
                "interface": {
                    "type": "string",
                    "description": "The policy path to the interface associated with the static route.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The gateway address of the next hop.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyStaticRouteTag:PolicyStaticRouteTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Tier-0 gateway.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyTier0GatewayBgpConfig:PolicyTier0GatewayBgpConfig": {
            "properties": {
                "ecmp": {
                    "type": "boolean",
                    "description": "A boolean flag to enable/disable ECMP. Default is `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable route redistribution for BGP. Defaults to `true`.\n"
                },
                "gracefulRestartMode": {
                    "type": "string",
                    "description": "Setting to control BGP graceful restart mode, one of `DISABLE`, `GR_AND_HELPER`, `HELPER_ONLY`. This setting is not applicable to VRF-Lite Gateway.\n"
                },
                "gracefulRestartStaleRouteTimer": {
                    "type": "integer",
                    "description": "BGP stale route timer. Default is `600`. This setting is not applicable to VRF-Lite Gateway.\n"
                },
                "gracefulRestartTimer": {
                    "type": "integer",
                    "description": "BGP graceful restart timer. Default is `180`. This setting is not applicable to VRF-Lite Gateway.\n"
                },
                "interSrIbgp": {
                    "type": "boolean",
                    "description": "A boolean flag to enable/disable inter SR IBGP configuration. Default is `true`. This setting is not applicable to VRF-Lite Gateway.\n"
                },
                "localAsNum": {
                    "type": "string",
                    "description": "BGP AS number in ASPLAIN/ASDOT Format. This setting is not applicable to VRF-Lite Gateway, and is required otherwise.\n"
                },
                "multipathRelax": {
                    "type": "boolean",
                    "description": "A boolean flag to enable/disable multipath relax for BGP. Default is `true`. This setting is not applicable to VRF-Lite Gateway.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "routeAggregations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier0GatewayBgpConfigRouteAggregation:PolicyTier0GatewayBgpConfigRouteAggregation"
                    },
                    "description": "Zero or more route aggregations for BGP.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier0GatewayBgpConfigTag:PolicyTier0GatewayBgpConfigTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Tier-0 gateway's BGP configuration.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "interSrIbgp",
                        "localAsNum",
                        "multipathRelax",
                        "path",
                        "revision"
                    ]
                }
            }
        },
        "nsxt:index/PolicyTier0GatewayBgpConfigRouteAggregation:PolicyTier0GatewayBgpConfigRouteAggregation": {
            "properties": {
                "prefix": {
                    "type": "string",
                    "description": "CIDR of aggregate address.\n"
                },
                "summaryOnly": {
                    "type": "boolean",
                    "description": "A boolean flag to enable/disable summarized route info. Default is `true`.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyTier0GatewayBgpConfigTag:PolicyTier0GatewayBgpConfigTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Tier-0 gateway's BGP configuration.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyTier0GatewayHaVipConfigConfig:PolicyTier0GatewayHaVipConfigConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Flag indicating if this HA VIP config is enabled. True by default.\n"
                },
                "externalInterfacePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Paths of 2 external interfaces belonging to the same Tier0 gateway locale-service, which are to be paired to provide redundancy. Floating IP will be owned by one of these interfaces depending upon which edge node is active.\n"
                },
                "vipSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "1 or 2 Ip Addresses/Prefixes in CIDR format, which will be used as floating IP addresses.\n"
                }
            },
            "type": "object",
            "required": [
                "externalInterfacePaths",
                "vipSubnets"
            ]
        },
        "nsxt:index/PolicyTier0GatewayInterfaceOspf:PolicyTier0GatewayInterfaceOspf": {
            "properties": {
                "areaPath": {
                    "type": "string",
                    "description": "Policy path to OSPF area defined on this Tier0 Gateway.\n"
                },
                "bfdProfilePath": {
                    "type": "string",
                    "description": "Policy path to BFD profile. Relevant only if BFD is enabled.\n"
                },
                "deadInterval": {
                    "type": "integer",
                    "description": "Interval to wait before declaring OSPF peer as down, in seconds. Defaults to 40. Must be at least 3 times greater than `hello_interval`.\n"
                },
                "enableBfd": {
                    "type": "boolean",
                    "description": "Flag that controls whether OSPF will register for BFD event. Default is `false`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Flag to enable/disable OSPF for this interface. Default is `true`.\n"
                },
                "helloInterval": {
                    "type": "integer",
                    "description": "Interval between OSPF Hello Packets, in seconds. Defaults to 10.\n"
                },
                "networkType": {
                    "type": "string",
                    "description": "OSPF network type, one of `BROADCAST` and `P2P`. Default is `BROADCAST`.\n"
                }
            },
            "type": "object",
            "required": [
                "areaPath"
            ]
        },
        "nsxt:index/PolicyTier0GatewayInterfaceTag:PolicyTier0GatewayInterfaceTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyTier0GatewayIntersiteConfig:PolicyTier0GatewayIntersiteConfig": {
            "properties": {
                "fallbackSitePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Fallback sites to be used as new primary site on current primary site failure.\n"
                },
                "primarySitePath": {
                    "type": "string",
                    "description": "Primary egress site for gateway.\n"
                },
                "transitSubnet": {
                    "type": "string",
                    "description": "IPv4 subnet for inter-site transit segment connecting service routers across sites for stretched gateway. For IPv6 link local subnet is auto configured.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "transitSubnet"
                    ]
                }
            }
        },
        "nsxt:index/PolicyTier0GatewayLocaleService:PolicyTier0GatewayLocaleService": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "Display name for the locale service.\n"
                },
                "edgeClusterPath": {
                    "type": "string",
                    "description": "The path of the edge cluster where the Tier-0 is placed.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "preferredEdgePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy paths to edge nodes. Specified edge is used as preferred edge cluster member when failover mode is set to `PREEMPTIVE`.\n"
                },
                "redistributionConfig": {
                    "$ref": "#/types/nsxt:index/PolicyTier0GatewayLocaleServiceRedistributionConfig:PolicyTier0GatewayLocaleServiceRedistributionConfig",
                    "description": "Route redistribution properties. This setting is for local manager only and supported with NSXt 3.0.0 onwards. This setting is deprecated, please use `nsxt.PolicyGatewayRedistributionConfig` resource instead.\n",
                    "deprecationMessage": "Use nsxt_policy_gateway_redistribution_config resource instead"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                }
            },
            "type": "object",
            "required": [
                "edgeClusterPath"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "edgeClusterPath",
                        "path",
                        "redistributionConfig",
                        "revision"
                    ]
                }
            }
        },
        "nsxt:index/PolicyTier0GatewayLocaleServiceRedistributionConfig:PolicyTier0GatewayLocaleServiceRedistributionConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable route redistribution for BGP. Defaults to `true`.\n"
                },
                "ospfEnabled": {
                    "type": "boolean",
                    "description": "Enable route redistribution for OSPF. Defaults to `false`. Applicable from NSX 3.1.0 onwards.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier0GatewayLocaleServiceRedistributionConfigRule:PolicyTier0GatewayLocaleServiceRedistributionConfigRule"
                    },
                    "description": "List of redistribution rules.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyTier0GatewayLocaleServiceRedistributionConfigRule:PolicyTier0GatewayLocaleServiceRedistributionConfigRule": {
            "properties": {
                "bgp": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name.\n"
                },
                "ospf": {
                    "type": "boolean"
                },
                "routeMapPath": {
                    "type": "string",
                    "description": "Route map to be associated with the redistribution rule.\n"
                },
                "types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of redistribution types, possible values are: `TIER0_STATIC`, `TIER0_CONNECTED`, `TIER0_EXTERNAL_INTERFACE`, `TIER0_SEGMENT`, `TIER0_ROUTER_LINK`, `TIER0_SERVICE_INTERFACE`, `TIER0_LOOPBACK_INTERFACE`, `TIER0_DNS_FORWARDER_IP`, `TIER0_IPSEC_LOCAL_IP`, `TIER0_NAT`, `TIER0_EVPN_TEP_IP`, `TIER1_NAT`, `TIER1_STATIC`, `TIER1_LB_VIP`, `TIER1_LB_SNAT`, `TIER1_DNS_FORWARDER_IP`, `TIER1_CONNECTED`, `TIER1_SERVICE_INTERFACE`, `TIER1_SEGMENT`, `TIER1_IPSEC_LOCAL_ENDPOINT`.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyTier0GatewayRedistributionConfig:PolicyTier0GatewayRedistributionConfig": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable route redistribution for BGP. Defaults to `true`.\n"
                },
                "ospfEnabled": {
                    "type": "boolean",
                    "description": "Enable route redistribution for OSPF. Defaults to `false`. Applicable from NSX 3.1.0 onwards.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier0GatewayRedistributionConfigRule:PolicyTier0GatewayRedistributionConfigRule"
                    },
                    "description": "List of redistribution rules.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyTier0GatewayRedistributionConfigRule:PolicyTier0GatewayRedistributionConfigRule": {
            "properties": {
                "bgp": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name.\n"
                },
                "ospf": {
                    "type": "boolean"
                },
                "routeMapPath": {
                    "type": "string",
                    "description": "Route map to be associated with the redistribution rule.\n"
                },
                "types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of redistribution types, possible values are: `TIER0_STATIC`, `TIER0_CONNECTED`, `TIER0_EXTERNAL_INTERFACE`, `TIER0_SEGMENT`, `TIER0_ROUTER_LINK`, `TIER0_SERVICE_INTERFACE`, `TIER0_LOOPBACK_INTERFACE`, `TIER0_DNS_FORWARDER_IP`, `TIER0_IPSEC_LOCAL_IP`, `TIER0_NAT`, `TIER0_EVPN_TEP_IP`, `TIER1_NAT`, `TIER1_STATIC`, `TIER1_LB_VIP`, `TIER1_LB_SNAT`, `TIER1_DNS_FORWARDER_IP`, `TIER1_CONNECTED`, `TIER1_SERVICE_INTERFACE`, `TIER1_SEGMENT`, `TIER1_IPSEC_LOCAL_ENDPOINT`.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyTier0GatewayTag:PolicyTier0GatewayTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Tier-0 gateway's BGP configuration.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyTier0GatewayVrfConfig:PolicyTier0GatewayVrfConfig": {
            "properties": {
                "evpnTransitVni": {
                    "type": "integer",
                    "description": "L3 VNI associated with the VRF for overlay traffic. VNI must be unique and belong to configured VNI pool.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Default Tier0 path. Cannot be modified after realization.\n",
                    "willReplaceOnChanges": true
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "routeDistinguisher": {
                    "type": "string",
                    "description": "Route distinguisher. Format: \u003cASN\u003e:\u003cnumber\u003e or \u003cIPAddress\u003e:\u003cnumber\u003e.\n"
                },
                "routeTarget": {
                    "$ref": "#/types/nsxt:index/PolicyTier0GatewayVrfConfigRouteTarget:PolicyTier0GatewayVrfConfigRouteTarget",
                    "description": "Only one target is supported.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier0GatewayVrfConfigTag:PolicyTier0GatewayVrfConfigTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Tier-0 gateway's BGP configuration.\n"
                }
            },
            "type": "object",
            "required": [
                "gatewayPath"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "gatewayPath",
                        "path"
                    ]
                }
            }
        },
        "nsxt:index/PolicyTier0GatewayVrfConfigRouteTarget:PolicyTier0GatewayVrfConfigRouteTarget": {
            "properties": {
                "addressFamily": {
                    "type": "string",
                    "description": "Address family, currently only `L2VPN_EVPN` is supported, which is the default.\n"
                },
                "autoMode": {
                    "type": "boolean",
                    "description": "When true, import and export targets should not be specified.\n"
                },
                "exportTargets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of export route targets. Format: \u003cASN\u003e:\u003cnumber\u003e.\n"
                },
                "importTargets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of import route targets. Format: \u003cASN\u003e:\u003cnumber\u003e.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyTier0GatewayVrfConfigTag:PolicyTier0GatewayVrfConfigTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Tier-0 gateway's BGP configuration.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyTier1GatewayContext:PolicyTier1GatewayContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyTier1GatewayInterfaceContext:PolicyTier1GatewayInterfaceContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyTier1GatewayInterfaceTag:PolicyTier1GatewayInterfaceTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyTier1GatewayIntersiteConfig:PolicyTier1GatewayIntersiteConfig": {
            "properties": {
                "fallbackSitePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "primarySitePath": {
                    "type": "string",
                    "description": "Primary egress site for gateway.\n"
                },
                "transitSubnet": {
                    "type": "string",
                    "description": "IPv4 subnet for inter-site transit segment connecting service routers across sites for stretched gateway. For IPv6 link local subnet is auto configured.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "transitSubnet"
                    ]
                }
            }
        },
        "nsxt:index/PolicyTier1GatewayLocaleService:PolicyTier1GatewayLocaleService": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "Display name for the locale service.\n"
                },
                "edgeClusterPath": {
                    "type": "string",
                    "description": "The path of the edge cluster where the Tier-0 is placed.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "preferredEdgePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy paths to edge nodes. Specified edge is used as preferred edge cluster member when failover mode is set to `PREEMPTIVE`.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                }
            },
            "type": "object",
            "required": [
                "edgeClusterPath"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "edgeClusterPath",
                        "path",
                        "revision"
                    ]
                }
            }
        },
        "nsxt:index/PolicyTier1GatewayRouteAdvertisementRule:PolicyTier1GatewayRouteAdvertisementRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Action to advertise filtered routes to the connected Tier0 gateway. PERMIT (which is the default): Enables the advertisement, DENY: Disables the advertisement.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule.\n"
                },
                "prefixOperator": {
                    "type": "string",
                    "description": "Prefix operator to apply on subnets. GE prefix operator (which is the default|) filters all the routes having network subset of any of the networks configured in Advertise rule. EQ prefix operator filter all the routes having network equal to any of the network configured in Advertise rule.The name of the rule.\n"
                },
                "routeAdvertisementTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of desired types of route advertisements, supported values: `TIER1_STATIC_ROUTES`, `TIER1_CONNECTED`, `TIER1_NAT`, `TIER1_LB_VIP`, `TIER1_LB_SNAT`, `TIER1_DNS_FORWARDER_IP`, `TIER1_IPSEC_LOCAL_ENDPOINT`. This field is Computed, meaning that NSX can auto-assign types. Hence, in order to revert to default behavior, set route advertisement values explicitly rather than removing this clause from configuration.\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of network CIDRs to be routed.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "subnets"
            ]
        },
        "nsxt:index/PolicyTier1GatewayTag:PolicyTier1GatewayTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this Tier-1 gateway.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyTransportZoneTag:PolicyTransportZoneTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyVlanSegmentAdvancedConfig:PolicyVlanSegmentAdvancedConfig": {
            "properties": {
                "addressPoolPath": {
                    "type": "string",
                    "description": "Policy path to IP address pool.\n"
                },
                "connectivity": {
                    "type": "string",
                    "description": "Connectivity configuration to manually connect (ON) or disconnect (OFF).\n"
                },
                "hybrid": {
                    "type": "boolean",
                    "description": "Boolean flag to identify a hybrid logical switch.\n"
                },
                "localEgress": {
                    "type": "boolean",
                    "description": "Boolean flag to enable local egress.\n"
                },
                "uplinkTeamingPolicy": {
                    "type": "string",
                    "description": "The name of the switching uplink teaming policy for the bridge endpoint.\n"
                },
                "urpfMode": {
                    "type": "string",
                    "description": "URPF mode to be applied to gateway downlink interface. One of `STRICT`, `NONE`.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyVlanSegmentBridgeConfig:PolicyVlanSegmentBridgeConfig": {
            "properties": {
                "profilePath": {
                    "type": "string",
                    "description": "Path for edge bridge profile to be associated with the segment.\n"
                },
                "transportZonePath": {
                    "type": "string",
                    "description": "Path for vlan transport zone for the bridge.\n"
                },
                "uplinkTeamingPolicy": {
                    "type": "string",
                    "description": "The name of the switching uplink teaming policy for the bridge endpoint.\n"
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VLAN IDs or ranges.\n"
                }
            },
            "type": "object",
            "required": [
                "profilePath",
                "transportZonePath",
                "vlanIds"
            ]
        },
        "nsxt:index/PolicyVlanSegmentContext:PolicyVlanSegmentContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyVlanSegmentDiscoveryProfile:PolicyVlanSegmentDiscoveryProfile": {
            "properties": {
                "bindingMapPath": {
                    "type": "string"
                },
                "ipDiscoveryProfilePath": {
                    "type": "string",
                    "description": "Path for IP discovery profile to be associated with the segment.\n"
                },
                "macDiscoveryProfilePath": {
                    "type": "string",
                    "description": "Path for MAC discovery profile to be associated with the segment.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindingMapPath",
                        "revision"
                    ]
                }
            }
        },
        "nsxt:index/PolicyVlanSegmentL2Extension:PolicyVlanSegmentL2Extension": {
            "properties": {
                "l2vpnPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy paths of associated L2 VPN sessions.\n"
                },
                "tunnelId": {
                    "type": "integer",
                    "description": "The Tunnel ID that's a int value between 1 and 4093.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyVlanSegmentQosProfile:PolicyVlanSegmentQosProfile": {
            "properties": {
                "bindingMapPath": {
                    "type": "string"
                },
                "qosProfilePath": {
                    "type": "string",
                    "description": "Path for qos profile to be associated with the segment.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                }
            },
            "type": "object",
            "required": [
                "qosProfilePath"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindingMapPath",
                        "qosProfilePath",
                        "revision"
                    ]
                }
            }
        },
        "nsxt:index/PolicyVlanSegmentSecurityProfile:PolicyVlanSegmentSecurityProfile": {
            "properties": {
                "bindingMapPath": {
                    "type": "string"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "securityProfilePath": {
                    "type": "string",
                    "description": "Path for segment security profile to be associated with the segment.\n"
                },
                "spoofguardProfilePath": {
                    "type": "string",
                    "description": "Path for spoofguard profile to be associated with the segment.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindingMapPath",
                        "revision"
                    ]
                }
            }
        },
        "nsxt:index/PolicyVlanSegmentSubnet:PolicyVlanSegmentSubnet": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "description": "Gateway IP address CIDR.\n"
                },
                "dhcpRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DHCP address ranges for dynamic IP allocation.\n"
                },
                "dhcpV4Config": {
                    "$ref": "#/types/nsxt:index/PolicyVlanSegmentSubnetDhcpV4Config:PolicyVlanSegmentSubnetDhcpV4Config",
                    "description": "DHCPv4 config for IPv4 subnet. This attribute is supported with NSX 3.0.0 onwards.\n"
                },
                "dhcpV6Config": {
                    "$ref": "#/types/nsxt:index/PolicyVlanSegmentSubnetDhcpV6Config:PolicyVlanSegmentSubnetDhcpV6Config",
                    "description": "DHCPv6 config for IPv6 subnet. This attribute is supported with NSX 3.0.0 onwards.\n"
                },
                "network": {
                    "type": "string",
                    "description": "Destination in cidr format.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "network"
                    ]
                }
            }
        },
        "nsxt:index/PolicyVlanSegmentSubnetDhcpV4Config:PolicyVlanSegmentSubnetDhcpV4Config": {
            "properties": {
                "dhcpGenericOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyVlanSegmentSubnetDhcpV4ConfigDhcpGenericOption:PolicyVlanSegmentSubnetDhcpV4ConfigDhcpGenericOption"
                    },
                    "description": "Generic DHCP options.\n"
                },
                "dhcpOption121s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyVlanSegmentSubnetDhcpV4ConfigDhcpOption121:PolicyVlanSegmentSubnetDhcpV4ConfigDhcpOption121"
                    },
                    "description": "DHCP classless static routes.\n"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses of DNS servers for the subnet.\n"
                },
                "leaseTime": {
                    "type": "integer",
                    "description": "DHCP lease time in seconds.\n"
                },
                "serverAddress": {
                    "type": "string",
                    "description": "IP address of the DHCP server in CIDR format. This attribute is required if segment has provided dhcp_config_path and it represents a DHCP server config.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyVlanSegmentSubnetDhcpV4ConfigDhcpGenericOption:PolicyVlanSegmentSubnetDhcpV4ConfigDhcpGenericOption": {
            "properties": {
                "code": {
                    "type": "integer",
                    "description": "DHCP option code. Valid values are from 0 to 255.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DHCP option values.\n"
                }
            },
            "type": "object",
            "required": [
                "code",
                "values"
            ]
        },
        "nsxt:index/PolicyVlanSegmentSubnetDhcpV4ConfigDhcpOption121:PolicyVlanSegmentSubnetDhcpV4ConfigDhcpOption121": {
            "properties": {
                "network": {
                    "type": "string",
                    "description": "Destination in cidr format.\n"
                },
                "nextHop": {
                    "type": "string",
                    "description": "IP address of next hop.\n"
                }
            },
            "type": "object",
            "required": [
                "network",
                "nextHop"
            ]
        },
        "nsxt:index/PolicyVlanSegmentSubnetDhcpV6Config:PolicyVlanSegmentSubnetDhcpV6Config": {
            "properties": {
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses of DNS servers for the subnet.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domain names for this subnet.\n"
                },
                "excludedRanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyVlanSegmentSubnetDhcpV6ConfigExcludedRange:PolicyVlanSegmentSubnetDhcpV6ConfigExcludedRange"
                    },
                    "description": "List of excluded address ranges to define dynamic ip allocation ranges.\n"
                },
                "leaseTime": {
                    "type": "integer",
                    "description": "DHCP lease time in seconds.\n"
                },
                "preferredTime": {
                    "type": "integer",
                    "description": "The time interval in seconds, in which the prefix is advertised as preferred.\n"
                },
                "serverAddress": {
                    "type": "string",
                    "description": "IP address of the DHCP server in CIDR format. This attribute is required if segment has provided dhcp_config_path and it represents a DHCP server config.\n"
                },
                "sntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IPv6 address of SNTP servers for the subnet.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyVlanSegmentSubnetDhcpV6ConfigExcludedRange:PolicyVlanSegmentSubnetDhcpV6ConfigExcludedRange": {
            "properties": {
                "end": {
                    "type": "string",
                    "description": "IPv6 address that marks end of the range.\n"
                },
                "start": {
                    "type": "string",
                    "description": "IPv6 address that marks beginning of the range.\n"
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ]
        },
        "nsxt:index/PolicyVlanSegmentTag:PolicyVlanSegmentTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this policy.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyVmTagsContext:PolicyVmTagsContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/PolicyVmTagsPort:PolicyVmTagsPort": {
            "properties": {
                "segmentPath": {
                    "type": "string",
                    "description": "Segment where the port is to be tagged.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyVmTagsPortTag:PolicyVmTagsPortTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this segment port.\n"
                }
            },
            "type": "object",
            "required": [
                "segmentPath"
            ]
        },
        "nsxt:index/PolicyVmTagsPortTag:PolicyVmTagsPortTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this segment port.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyVmTagsTag:PolicyVmTagsTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this segment port.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/PolicyVniPoolTag:PolicyVniPoolTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/QosSwitchingProfileEgressRateShaper:QosSwitchingProfileEgressRateShaper": {
            "properties": {
                "averageBwMbps": {
                    "type": "integer",
                    "description": "Average Bandwidth in MBPS.\n"
                },
                "burstSize": {
                    "type": "integer",
                    "description": "Burst size in bytes.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this rate shaper is enabled.\n"
                },
                "peakBwMbps": {
                    "type": "integer",
                    "description": "Peak Bandwidth in MBPS.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/QosSwitchingProfileIngressBroadcastRateShaper:QosSwitchingProfileIngressBroadcastRateShaper": {
            "properties": {
                "averageBwKbps": {
                    "type": "integer",
                    "description": "Average Bandwidth in KBPS.\n"
                },
                "burstSize": {
                    "type": "integer",
                    "description": "Burst size in bytes.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this rate shaper is enabled.\n"
                },
                "peakBwKbps": {
                    "type": "integer",
                    "description": "Peak Bandwidth in KBPS.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/QosSwitchingProfileIngressRateShaper:QosSwitchingProfileIngressRateShaper": {
            "properties": {
                "averageBwMbps": {
                    "type": "integer",
                    "description": "Average Bandwidth in MBPS.\n"
                },
                "burstSize": {
                    "type": "integer",
                    "description": "Burst size in bytes.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this rate shaper is enabled.\n"
                },
                "peakBwMbps": {
                    "type": "integer",
                    "description": "Peak Bandwidth in MBPS.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/QosSwitchingProfileTag:QosSwitchingProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this qos switching profile.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/SpoofguardSwitchingProfileTag:SpoofguardSwitchingProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this spoofguard switching profile.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/StaticRouteNextHop:StaticRouteNextHop": {
            "properties": {
                "administrativeDistance": {
                    "type": "integer",
                    "description": "Administrative Distance for the next hop IP.\n"
                },
                "bfdEnabled": {
                    "type": "boolean",
                    "description": "Status of bfd for this next hop where bfd_enabled = true indicate bfd is enabled for this next hop and bfd_enabled = false indicate bfd peer is disabled or not configured for this next hop.\n"
                },
                "blackholeAction": {
                    "type": "string",
                    "description": "Action to be taken on matching packets for NULL routes.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Next Hop IP.\n"
                },
                "logicalRouterPortId": {
                    "type": "string",
                    "description": "Reference of logical router port to be used for next hop.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bfdEnabled",
                        "blackholeAction"
                    ]
                }
            }
        },
        "nsxt:index/StaticRouteTag:StaticRouteTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this static route.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/SwitchSecuritySwitchingProfileRateLimits:SwitchSecuritySwitchingProfileRateLimits": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether rate limitimg is enabled.\n"
                },
                "rxBroadcast": {
                    "type": "integer",
                    "description": "Incoming broadcast traffic limit in packets per second.\n"
                },
                "rxMulticast": {
                    "type": "integer",
                    "description": "Incoming multicast traffic limit in packets per second.\n"
                },
                "txBroadcast": {
                    "type": "integer",
                    "description": "Outgoing broadcast traffic limit in packets per second.\n"
                },
                "txMulticast": {
                    "type": "integer",
                    "description": "Outgoing multicast traffic limit in packets per second.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/SwitchSecuritySwitchingProfileTag:SwitchSecuritySwitchingProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this qos switching profile.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/TransportNodeEdgeNode:TransportNodeEdgeNode": {
            "properties": {
                "deploymentConfig": {
                    "$ref": "#/types/nsxt:index/TransportNodeEdgeNodeDeploymentConfig:TransportNodeEdgeNodeDeploymentConfig",
                    "description": "Config for automatic deployment of edge node virtual machine.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "ID of the Node.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "Fully qualified domain name of the fabric node.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of this resource.\n",
                    "willReplaceOnChanges": true
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs for transport node host switch virtual tunnel endpoints.\n"
                },
                "nodeSettings": {
                    "$ref": "#/types/nsxt:index/TransportNodeEdgeNodeNodeSettings:TransportNodeEdgeNodeNodeSettings",
                    "description": "Current configuration on edge node.\n"
                }
            },
            "type": "object",
            "required": [
                "nodeSettings"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "externalId",
                        "fqdn",
                        "id",
                        "ipAddresses",
                        "nodeSettings"
                    ]
                }
            }
        },
        "nsxt:index/TransportNodeEdgeNodeDeploymentConfig:TransportNodeEdgeNodeDeploymentConfig": {
            "properties": {
                "formFactor": {
                    "type": "string",
                    "description": "Accepted values - 'SMALL', 'MEDIUM', 'LARGE', 'XLARGE'. The default value is 'MEDIUM'.\n"
                },
                "nodeUserSettings": {
                    "$ref": "#/types/nsxt:index/TransportNodeEdgeNodeDeploymentConfigNodeUserSettings:TransportNodeEdgeNodeDeploymentConfigNodeUserSettings",
                    "description": "Node user settings.\n"
                },
                "vmDeploymentConfig": {
                    "$ref": "#/types/nsxt:index/TransportNodeEdgeNodeDeploymentConfigVmDeploymentConfig:TransportNodeEdgeNodeDeploymentConfigVmDeploymentConfig",
                    "description": "The vSphere deployment configuration determines where to deploy the edge node.\n"
                }
            },
            "type": "object",
            "required": [
                "nodeUserSettings",
                "vmDeploymentConfig"
            ]
        },
        "nsxt:index/TransportNodeEdgeNodeDeploymentConfigNodeUserSettings:TransportNodeEdgeNodeDeploymentConfigNodeUserSettings": {
            "properties": {
                "auditPassword": {
                    "type": "string",
                    "description": "Node audit user password.\n",
                    "secret": true
                },
                "auditUsername": {
                    "type": "string",
                    "description": "CLI \"audit\" username.\n"
                },
                "cliPassword": {
                    "type": "string",
                    "description": "Node cli password.\n",
                    "secret": true
                },
                "cliUsername": {
                    "type": "string",
                    "description": "CLI \"admin\" username. Defaults to \"admin\".\n"
                },
                "rootPassword": {
                    "type": "string",
                    "description": "Node root user password.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "cliPassword",
                "rootPassword"
            ]
        },
        "nsxt:index/TransportNodeEdgeNodeDeploymentConfigVmDeploymentConfig:TransportNodeEdgeNodeDeploymentConfigVmDeploymentConfig": {
            "properties": {
                "computeFolderId": {
                    "type": "string",
                    "description": "Cluster identifier or resourcepool identifier for specified vcenter server.\n"
                },
                "computeId": {
                    "type": "string"
                },
                "dataNetworkIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of portgroups, logical switch identifiers or segment paths for datapath connectivity.\n"
                },
                "defaultGatewayAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Default gateway for the node.\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "Host identifier in the specified vcenter server.\n"
                },
                "ipv4AssignmentEnabled": {
                    "type": "boolean",
                    "description": "This flag represents whether IPv4 configuration is enabled or not. Defaults to true.\n"
                },
                "managementNetworkId": {
                    "type": "string",
                    "description": "Portgroup, logical switch identifier or segment path for management network connectivity.\n"
                },
                "managementPortSubnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/TransportNodeEdgeNodeDeploymentConfigVmDeploymentConfigManagementPortSubnet:TransportNodeEdgeNodeDeploymentConfigVmDeploymentConfigManagementPortSubnet"
                    },
                    "description": "Port subnets for management port. IPv4, IPv6 and Dual Stack Address is supported.\n"
                },
                "reservationInfo": {
                    "$ref": "#/types/nsxt:index/TransportNodeEdgeNodeDeploymentConfigVmDeploymentConfigReservationInfo:TransportNodeEdgeNodeDeploymentConfigVmDeploymentConfigReservationInfo",
                    "description": "Resource reservation settings.\n"
                },
                "storageId": {
                    "type": "string",
                    "description": "Storage/datastore identifier in the specified vcenter server\n"
                },
                "vcId": {
                    "type": "string",
                    "description": "Vsphere compute identifier for identifying the vcenter server.\n"
                }
            },
            "type": "object",
            "required": [
                "computeId",
                "dataNetworkIds",
                "managementNetworkId",
                "storageId",
                "vcId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "computeId",
                        "dataNetworkIds",
                        "defaultGatewayAddresses",
                        "managementNetworkId",
                        "reservationInfo",
                        "storageId",
                        "vcId"
                    ]
                }
            }
        },
        "nsxt:index/TransportNodeEdgeNodeDeploymentConfigVmDeploymentConfigManagementPortSubnet:TransportNodeEdgeNodeDeploymentConfigVmDeploymentConfigManagementPortSubnet": {
            "properties": {
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs for transport node host switch virtual tunnel endpoints.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "Subnet Prefix Length.\n"
                }
            },
            "type": "object",
            "required": [
                "ipAddresses",
                "prefixLength"
            ]
        },
        "nsxt:index/TransportNodeEdgeNodeDeploymentConfigVmDeploymentConfigReservationInfo:TransportNodeEdgeNodeDeploymentConfigVmDeploymentConfigReservationInfo": {
            "properties": {
                "cpuReservationInMhz": {
                    "type": "integer",
                    "description": "CPU reservation in MHz.\n"
                },
                "cpuReservationInShares": {
                    "type": "string",
                    "description": "CPU reservation in shares. Accepted values - 'EXTRA_HIGH_PRIORITY', 'HIGH_PRIORITY', 'NORMAL_PRIORITY', 'LOW_PRIORITY'. The default value is 'HIGH_PRIORITY'.\n"
                },
                "memoryReservationPercentage": {
                    "type": "integer",
                    "description": "Memory reservation percentage.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/TransportNodeEdgeNodeNodeSettings:TransportNodeEdgeNodeNodeSettings": {
            "properties": {
                "advancedConfigurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/TransportNodeEdgeNodeNodeSettingsAdvancedConfiguration:TransportNodeEdgeNodeNodeSettingsAdvancedConfiguration"
                    },
                    "description": "Advanced configuration.\n"
                },
                "allowSshRootLogin": {
                    "type": "boolean",
                    "description": "Allow root SSH logins. Defaults to false.\n"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DNS servers.\n"
                },
                "enableSsh": {
                    "type": "boolean",
                    "description": "Enable SSH. Defaults to false.\n"
                },
                "enableUptMode": {
                    "type": "boolean",
                    "description": "Enable Uniform Passthrough mode. Defaults to false.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Host name or FQDN for edge node.\n"
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of NTP servers.\n"
                },
                "searchDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Search domain names.\n"
                },
                "syslogServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/TransportNodeEdgeNodeNodeSettingsSyslogServer:TransportNodeEdgeNodeNodeSettingsSyslogServer"
                    },
                    "description": "List of Syslog servers.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname"
            ]
        },
        "nsxt:index/TransportNodeEdgeNodeNodeSettingsAdvancedConfiguration:TransportNodeEdgeNodeNodeSettingsAdvancedConfiguration": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "nsxt:index/TransportNodeEdgeNodeNodeSettingsSyslogServer:TransportNodeEdgeNodeNodeSettingsSyslogServer": {
            "properties": {
                "logLevel": {
                    "type": "string",
                    "description": "Log level to be redirected. Accepted values - 'EMERGENCY', 'ALERT', 'CRITICAL', 'ERROR', 'WARNING', 'NOTICE', 'INFO' or 'DEBUG'. The default value is 'INFO'.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Display name of the syslog server.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Syslog server port. Defaults to 514.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Syslog protocol. Accepted values - 'TCP', 'UDP', 'TLS', 'LI', 'LI_TLS'. The default value is 'UDP'.\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server IP or fqdn.\n"
                }
            },
            "type": "object",
            "required": [
                "server"
            ]
        },
        "nsxt:index/TransportNodeHostNode:TransportNodeHostNode": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "ID of the Node.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "Fully qualified domain name of the fabric node.\n"
                },
                "hostCredential": {
                    "$ref": "#/types/nsxt:index/TransportNodeHostNodeHostCredential:TransportNodeHostNodeHostCredential",
                    "description": "Host login credentials.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of this resource.\n",
                    "willReplaceOnChanges": true
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs for transport node host switch virtual tunnel endpoints.\n"
                },
                "osType": {
                    "type": "string",
                    "description": "Hypervisor OS type. Accepted values - 'ESXI', 'RHELSERVER', 'WINDOWSSERVER', 'RHELCONTAINER', 'UBUNTUSERVER', 'HYPERV', 'CENTOSSERVER', 'CENTOSCONTAINER', 'SLESSERVER' or 'OELSERVER'.\n"
                },
                "osVersion": {
                    "type": "string",
                    "description": "Hypervisor OS version.\n"
                },
                "windowsInstallLocation": {
                    "type": "string",
                    "description": "Install location of Windows Server on baremetal being managed by NSX. Defaults to 'C:\\Program Files\\VMware\\NSX\\'.\n"
                }
            },
            "type": "object",
            "required": [
                "osType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "externalId",
                        "fqdn",
                        "id",
                        "ipAddresses",
                        "osType"
                    ]
                }
            }
        },
        "nsxt:index/TransportNodeHostNodeHostCredential:TransportNodeHostNodeHostCredential": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "The authentication password of the host node.\n",
                    "secret": true
                },
                "thumbprint": {
                    "type": "string",
                    "description": "ESXi thumbprint or SSH key fingerprint of the host node.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the account on the host node.\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "nsxt:index/TransportNodeNode:TransportNodeNode": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "ID of the Node.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "Fully qualified domain name of the fabric node.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of this resource.\n",
                    "willReplaceOnChanges": true
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs for transport node host switch virtual tunnel endpoints.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "externalId",
                        "fqdn",
                        "id",
                        "ipAddresses"
                    ]
                }
            }
        },
        "nsxt:index/TransportNodePreconfiguredHostSwitch:TransportNodePreconfiguredHostSwitch": {
            "properties": {
                "endpoint": {
                    "type": "string",
                    "description": "Name of the virtual tunnel endpoint which is preconfigured on this host switch.\n"
                },
                "hostSwitchId": {
                    "type": "string",
                    "description": "External Id of the preconfigured host switch.\n"
                },
                "transportZoneEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/TransportNodePreconfiguredHostSwitchTransportZoneEndpoint:TransportNodePreconfiguredHostSwitchTransportZoneEndpoint"
                    },
                    "description": "Transport zone endpoints\n"
                }
            },
            "type": "object",
            "required": [
                "hostSwitchId"
            ]
        },
        "nsxt:index/TransportNodePreconfiguredHostSwitchTransportZoneEndpoint:TransportNodePreconfiguredHostSwitchTransportZoneEndpoint": {
            "properties": {
                "transportZone": {
                    "type": "string",
                    "description": "Unique ID identifying the transport zone for this endpoint.\n"
                },
                "transportZoneProfiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Identifiers of the transport zone profiles associated with this transport zone endpoint on this transport node.\n"
                }
            },
            "type": "object",
            "required": [
                "transportZone"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "transportZone",
                        "transportZoneProfiles"
                    ]
                }
            }
        },
        "nsxt:index/TransportNodePublicCloudGatewayNode:TransportNodePublicCloudGatewayNode": {
            "properties": {
                "deploymentConfig": {
                    "$ref": "#/types/nsxt:index/TransportNodePublicCloudGatewayNodeDeploymentConfig:TransportNodePublicCloudGatewayNodeDeploymentConfig",
                    "description": "Config for automatic deployment of edge node virtual machine.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "ID of the Node.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "Fully qualified domain name of the fabric node.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of this resource.\n",
                    "willReplaceOnChanges": true
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs for transport node host switch virtual tunnel endpoints.\n"
                },
                "nodeSettings": {
                    "$ref": "#/types/nsxt:index/TransportNodePublicCloudGatewayNodeNodeSettings:TransportNodePublicCloudGatewayNodeNodeSettings",
                    "description": "Current configuration on edge node.\n"
                }
            },
            "type": "object",
            "required": [
                "nodeSettings"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "externalId",
                        "fqdn",
                        "id",
                        "ipAddresses",
                        "nodeSettings"
                    ]
                }
            }
        },
        "nsxt:index/TransportNodePublicCloudGatewayNodeDeploymentConfig:TransportNodePublicCloudGatewayNodeDeploymentConfig": {
            "properties": {
                "formFactor": {
                    "type": "string",
                    "description": "Accepted values - 'SMALL', 'MEDIUM', 'LARGE', 'XLARGE'. The default value is 'MEDIUM'.\n"
                },
                "nodeUserSettings": {
                    "$ref": "#/types/nsxt:index/TransportNodePublicCloudGatewayNodeDeploymentConfigNodeUserSettings:TransportNodePublicCloudGatewayNodeDeploymentConfigNodeUserSettings",
                    "description": "Node user settings.\n"
                },
                "vmDeploymentConfig": {
                    "$ref": "#/types/nsxt:index/TransportNodePublicCloudGatewayNodeDeploymentConfigVmDeploymentConfig:TransportNodePublicCloudGatewayNodeDeploymentConfigVmDeploymentConfig",
                    "description": "The vSphere deployment configuration determines where to deploy the edge node.\n"
                }
            },
            "type": "object",
            "required": [
                "nodeUserSettings",
                "vmDeploymentConfig"
            ]
        },
        "nsxt:index/TransportNodePublicCloudGatewayNodeDeploymentConfigNodeUserSettings:TransportNodePublicCloudGatewayNodeDeploymentConfigNodeUserSettings": {
            "properties": {
                "auditPassword": {
                    "type": "string",
                    "description": "Node audit user password.\n",
                    "secret": true
                },
                "auditUsername": {
                    "type": "string",
                    "description": "CLI \"audit\" username.\n"
                },
                "cliPassword": {
                    "type": "string",
                    "description": "Node cli password.\n",
                    "secret": true
                },
                "cliUsername": {
                    "type": "string",
                    "description": "CLI \"admin\" username. Defaults to \"admin\".\n"
                },
                "rootPassword": {
                    "type": "string",
                    "description": "Node root user password.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "cliPassword",
                "rootPassword"
            ]
        },
        "nsxt:index/TransportNodePublicCloudGatewayNodeDeploymentConfigVmDeploymentConfig:TransportNodePublicCloudGatewayNodeDeploymentConfigVmDeploymentConfig": {
            "properties": {
                "computeFolderId": {
                    "type": "string",
                    "description": "Cluster identifier or resourcepool identifier for specified vcenter server.\n"
                },
                "computeId": {
                    "type": "string"
                },
                "dataNetworkIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of portgroups, logical switch identifiers or segment paths for datapath connectivity.\n"
                },
                "defaultGatewayAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Default gateway for the node.\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "Host identifier in the specified vcenter server.\n"
                },
                "ipv4AssignmentEnabled": {
                    "type": "boolean",
                    "description": "This flag represents whether IPv4 configuration is enabled or not. Defaults to true.\n"
                },
                "managementNetworkId": {
                    "type": "string",
                    "description": "Portgroup, logical switch identifier or segment path for management network connectivity.\n"
                },
                "managementPortSubnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/TransportNodePublicCloudGatewayNodeDeploymentConfigVmDeploymentConfigManagementPortSubnet:TransportNodePublicCloudGatewayNodeDeploymentConfigVmDeploymentConfigManagementPortSubnet"
                    },
                    "description": "Port subnets for management port. IPv4, IPv6 and Dual Stack Address is supported.\n"
                },
                "reservationInfo": {
                    "$ref": "#/types/nsxt:index/TransportNodePublicCloudGatewayNodeDeploymentConfigVmDeploymentConfigReservationInfo:TransportNodePublicCloudGatewayNodeDeploymentConfigVmDeploymentConfigReservationInfo",
                    "description": "Resource reservation settings.\n"
                },
                "storageId": {
                    "type": "string",
                    "description": "Storage/datastore identifier in the specified vcenter server\n"
                },
                "vcId": {
                    "type": "string",
                    "description": "Vsphere compute identifier for identifying the vcenter server.\n"
                }
            },
            "type": "object",
            "required": [
                "computeId",
                "dataNetworkIds",
                "managementNetworkId",
                "storageId",
                "vcId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "computeId",
                        "dataNetworkIds",
                        "defaultGatewayAddresses",
                        "managementNetworkId",
                        "reservationInfo",
                        "storageId",
                        "vcId"
                    ]
                }
            }
        },
        "nsxt:index/TransportNodePublicCloudGatewayNodeDeploymentConfigVmDeploymentConfigManagementPortSubnet:TransportNodePublicCloudGatewayNodeDeploymentConfigVmDeploymentConfigManagementPortSubnet": {
            "properties": {
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs for transport node host switch virtual tunnel endpoints.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "Subnet Prefix Length.\n"
                }
            },
            "type": "object",
            "required": [
                "ipAddresses",
                "prefixLength"
            ]
        },
        "nsxt:index/TransportNodePublicCloudGatewayNodeDeploymentConfigVmDeploymentConfigReservationInfo:TransportNodePublicCloudGatewayNodeDeploymentConfigVmDeploymentConfigReservationInfo": {
            "properties": {
                "cpuReservationInMhz": {
                    "type": "integer",
                    "description": "CPU reservation in MHz.\n"
                },
                "cpuReservationInShares": {
                    "type": "string",
                    "description": "CPU reservation in shares. Accepted values - 'EXTRA_HIGH_PRIORITY', 'HIGH_PRIORITY', 'NORMAL_PRIORITY', 'LOW_PRIORITY'. The default value is 'HIGH_PRIORITY'.\n"
                },
                "memoryReservationPercentage": {
                    "type": "integer",
                    "description": "Memory reservation percentage.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/TransportNodePublicCloudGatewayNodeNodeSettings:TransportNodePublicCloudGatewayNodeNodeSettings": {
            "properties": {
                "advancedConfigurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/TransportNodePublicCloudGatewayNodeNodeSettingsAdvancedConfiguration:TransportNodePublicCloudGatewayNodeNodeSettingsAdvancedConfiguration"
                    },
                    "description": "Advanced configuration.\n"
                },
                "allowSshRootLogin": {
                    "type": "boolean",
                    "description": "Allow root SSH logins. Defaults to false.\n"
                },
                "dnsServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DNS servers.\n"
                },
                "enableSsh": {
                    "type": "boolean",
                    "description": "Enable SSH. Defaults to false.\n"
                },
                "enableUptMode": {
                    "type": "boolean",
                    "description": "Enable Uniform Passthrough mode. Defaults to false.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Host name or FQDN for edge node.\n"
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of NTP servers.\n"
                },
                "searchDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Search domain names.\n"
                },
                "syslogServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/TransportNodePublicCloudGatewayNodeNodeSettingsSyslogServer:TransportNodePublicCloudGatewayNodeNodeSettingsSyslogServer"
                    },
                    "description": "List of Syslog servers.\n"
                }
            },
            "type": "object",
            "required": [
                "hostname"
            ]
        },
        "nsxt:index/TransportNodePublicCloudGatewayNodeNodeSettingsAdvancedConfiguration:TransportNodePublicCloudGatewayNodeNodeSettingsAdvancedConfiguration": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "nsxt:index/TransportNodePublicCloudGatewayNodeNodeSettingsSyslogServer:TransportNodePublicCloudGatewayNodeNodeSettingsSyslogServer": {
            "properties": {
                "logLevel": {
                    "type": "string",
                    "description": "Log level to be redirected. Accepted values - 'EMERGENCY', 'ALERT', 'CRITICAL', 'ERROR', 'WARNING', 'NOTICE', 'INFO' or 'DEBUG'. The default value is 'INFO'.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Display name of the syslog server.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Syslog server port. Defaults to 514.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Syslog protocol. Accepted values - 'TCP', 'UDP', 'TLS', 'LI', 'LI_TLS'. The default value is 'UDP'.\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server IP or fqdn.\n"
                }
            },
            "type": "object",
            "required": [
                "server"
            ]
        },
        "nsxt:index/TransportNodeRemoteTunnelEndpoint:TransportNodeRemoteTunnelEndpoint": {
            "properties": {
                "hostSwitchName": {
                    "type": "string",
                    "description": "The host switch name to be used for the remote tunnel endpoint.\n"
                },
                "ipAssignment": {
                    "$ref": "#/types/nsxt:index/TransportNodeRemoteTunnelEndpointIpAssignment:TransportNodeRemoteTunnelEndpointIpAssignment",
                    "description": "Specification for IPs to be used with host switch virtual tunnel endpoints. Should contain exatly one of the below:\n"
                },
                "namedTeamingPolicy": {
                    "type": "string",
                    "description": "The named teaming policy to be used by the remote tunnel endpoint.\n"
                },
                "rtepVlan": {
                    "type": "integer",
                    "description": "VLAN id for remote tunnel endpoint.\n\n\n\n**NOTE:** Resource should contain either `standard_host_switch` or `preconfigured_host_switch`\n**NOTE:** Resource should contain one of: `node`, `edge_node`, `host_node` or `public_cloud_gateway_node`\n"
                }
            },
            "type": "object",
            "required": [
                "hostSwitchName",
                "ipAssignment",
                "rtepVlan"
            ]
        },
        "nsxt:index/TransportNodeRemoteTunnelEndpointIpAssignment:TransportNodeRemoteTunnelEndpointIpAssignment": {
            "properties": {
                "assignedByDhcp": {
                    "type": "boolean",
                    "description": "Enables DHCP assignment.\n"
                },
                "staticIp": {
                    "$ref": "#/types/nsxt:index/TransportNodeRemoteTunnelEndpointIpAssignmentStaticIp:TransportNodeRemoteTunnelEndpointIpAssignmentStaticIp",
                    "description": "IP assignment specification for Static IP List.\n"
                },
                "staticIpMac": {
                    "$ref": "#/types/nsxt:index/TransportNodeRemoteTunnelEndpointIpAssignmentStaticIpMac:TransportNodeRemoteTunnelEndpointIpAssignmentStaticIpMac",
                    "description": "IP and MAC assignment specification for Static IP List.\n"
                },
                "staticIpPool": {
                    "type": "string",
                    "description": "IP assignment specification for Static IP Pool.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/TransportNodeRemoteTunnelEndpointIpAssignmentStaticIp:TransportNodeRemoteTunnelEndpointIpAssignmentStaticIp": {
            "properties": {
                "defaultGateway": {
                    "type": "string",
                    "description": "Gateway IP.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs for transport node host switch virtual tunnel endpoints.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "Subnet mask.\n"
                }
            },
            "type": "object",
            "required": [
                "defaultGateway",
                "ipAddresses",
                "subnetMask"
            ]
        },
        "nsxt:index/TransportNodeRemoteTunnelEndpointIpAssignmentStaticIpMac:TransportNodeRemoteTunnelEndpointIpAssignmentStaticIpMac": {
            "properties": {
                "defaultGateway": {
                    "type": "string",
                    "description": "Gateway IP.\n"
                },
                "ipMacPairs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/TransportNodeRemoteTunnelEndpointIpAssignmentStaticIpMacIpMacPair:TransportNodeRemoteTunnelEndpointIpAssignmentStaticIpMacIpMacPair"
                    },
                    "description": "List of IPs and MACs for transport node host switch virtual tunnel endpoints.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "Subnet mask.\n"
                }
            },
            "type": "object",
            "required": [
                "defaultGateway",
                "ipMacPairs",
                "subnetMask"
            ]
        },
        "nsxt:index/TransportNodeRemoteTunnelEndpointIpAssignmentStaticIpMacIpMacPair:TransportNodeRemoteTunnelEndpointIpAssignmentStaticIpMacIpMacPair": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IP address.\n"
                },
                "mac": {
                    "type": "string",
                    "description": "MAC address.\n"
                }
            },
            "type": "object",
            "required": [
                "ip"
            ]
        },
        "nsxt:index/TransportNodeStandardHostSwitch:TransportNodeStandardHostSwitch": {
            "properties": {
                "cpuConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/TransportNodeStandardHostSwitchCpuConfig:TransportNodeStandardHostSwitchCpuConfig"
                    },
                    "description": "Enhanced Networking Stack enabled HostSwitch CPU configuration.\n"
                },
                "hostSwitchId": {
                    "type": "string",
                    "description": "External Id of the preconfigured host switch.\n"
                },
                "hostSwitchMode": {
                    "type": "string",
                    "description": "Operational mode of a HostSwitch. Accepted values - 'STANDARD', 'ENS', 'ENS_INTERRUPT' or 'LEGACY'. The default value is 'STANDARD'.\n"
                },
                "hostSwitchProfiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Identifiers of host switch profiles to be associated with this host switch.\n"
                },
                "hostSwitchType": {
                    "type": "string",
                    "description": "Type of HostSwitch. Accepted values - 'NVDS' or 'VDS'. The default value is 'NVDS'.\n"
                },
                "ipAssignment": {
                    "$ref": "#/types/nsxt:index/TransportNodeStandardHostSwitchIpAssignment:TransportNodeStandardHostSwitchIpAssignment",
                    "description": "Specification for IPs to be used with host switch virtual tunnel endpoints. Should contain exatly one of the below:\n"
                },
                "isMigratePnics": {
                    "type": "boolean",
                    "description": "Migrate any pnics which are in use.\n"
                },
                "pnics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/TransportNodeStandardHostSwitchPnic:TransportNodeStandardHostSwitchPnic"
                    },
                    "description": "Physical NICs connected to the host switch.\n"
                },
                "portgroupTransportZone": {
                    "type": "string",
                    "description": "Transport Zone ID representing the DVS used in NSX on DVPG.\n"
                },
                "transportNodeProfileSubConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/TransportNodeStandardHostSwitchTransportNodeProfileSubConfig:TransportNodeStandardHostSwitchTransportNodeProfileSubConfig"
                    },
                    "description": "Transport Node Profile sub-configuration Options.\n"
                },
                "transportZoneEndpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/TransportNodeStandardHostSwitchTransportZoneEndpoint:TransportNodeStandardHostSwitchTransportZoneEndpoint"
                    },
                    "description": "Transport zone endpoints\n"
                },
                "uplinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/TransportNodeStandardHostSwitchUplink:TransportNodeStandardHostSwitchUplink"
                    },
                    "description": "Uplink/LAG of VMware vSphere Distributed Switch connected to the HostSwitch.\n"
                },
                "vmkInstallMigrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/TransportNodeStandardHostSwitchVmkInstallMigration:TransportNodeStandardHostSwitchVmkInstallMigration"
                    },
                    "description": "The vmknic and logical switch mappings.\n"
                }
            },
            "type": "object",
            "required": [
                "ipAssignment"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hostSwitchId",
                        "ipAssignment"
                    ]
                }
            }
        },
        "nsxt:index/TransportNodeStandardHostSwitchCpuConfig:TransportNodeStandardHostSwitchCpuConfig": {
            "properties": {
                "numLcores": {
                    "type": "integer",
                    "description": "Number of Logical cpu cores (Lcores) to be placed on a specified NUMA node.\n"
                },
                "numaNodeIndex": {
                    "type": "integer",
                    "description": "Unique index of the Non Uniform Memory Access (NUMA) node.\n"
                }
            },
            "type": "object",
            "required": [
                "numLcores",
                "numaNodeIndex"
            ]
        },
        "nsxt:index/TransportNodeStandardHostSwitchIpAssignment:TransportNodeStandardHostSwitchIpAssignment": {
            "properties": {
                "assignedByDhcp": {
                    "type": "boolean",
                    "description": "Enables DHCP assignment.\n"
                },
                "staticIp": {
                    "$ref": "#/types/nsxt:index/TransportNodeStandardHostSwitchIpAssignmentStaticIp:TransportNodeStandardHostSwitchIpAssignmentStaticIp",
                    "description": "IP assignment specification for Static IP List.\n"
                },
                "staticIpMac": {
                    "$ref": "#/types/nsxt:index/TransportNodeStandardHostSwitchIpAssignmentStaticIpMac:TransportNodeStandardHostSwitchIpAssignmentStaticIpMac",
                    "description": "IP and MAC assignment specification for Static IP List.\n"
                },
                "staticIpPool": {
                    "type": "string",
                    "description": "IP assignment specification for Static IP Pool.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/TransportNodeStandardHostSwitchIpAssignmentStaticIp:TransportNodeStandardHostSwitchIpAssignmentStaticIp": {
            "properties": {
                "defaultGateway": {
                    "type": "string",
                    "description": "Gateway IP.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs for transport node host switch virtual tunnel endpoints.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "Subnet mask.\n"
                }
            },
            "type": "object",
            "required": [
                "defaultGateway",
                "ipAddresses",
                "subnetMask"
            ]
        },
        "nsxt:index/TransportNodeStandardHostSwitchIpAssignmentStaticIpMac:TransportNodeStandardHostSwitchIpAssignmentStaticIpMac": {
            "properties": {
                "defaultGateway": {
                    "type": "string",
                    "description": "Gateway IP.\n"
                },
                "ipMacPairs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/TransportNodeStandardHostSwitchIpAssignmentStaticIpMacIpMacPair:TransportNodeStandardHostSwitchIpAssignmentStaticIpMacIpMacPair"
                    },
                    "description": "List of IPs and MACs for transport node host switch virtual tunnel endpoints.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "Subnet mask.\n"
                }
            },
            "type": "object",
            "required": [
                "defaultGateway",
                "ipMacPairs",
                "subnetMask"
            ]
        },
        "nsxt:index/TransportNodeStandardHostSwitchIpAssignmentStaticIpMacIpMacPair:TransportNodeStandardHostSwitchIpAssignmentStaticIpMacIpMacPair": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IP address.\n"
                },
                "mac": {
                    "type": "string",
                    "description": "MAC address.\n"
                }
            },
            "type": "object",
            "required": [
                "ip"
            ]
        },
        "nsxt:index/TransportNodeStandardHostSwitchPnic:TransportNodeStandardHostSwitchPnic": {
            "properties": {
                "deviceName": {
                    "type": "string",
                    "description": "ESX vmk interface name.\n"
                },
                "uplinkName": {
                    "type": "string",
                    "description": "Uplink name from UplinkHostSwitch profile.\n"
                }
            },
            "type": "object",
            "required": [
                "deviceName",
                "uplinkName"
            ]
        },
        "nsxt:index/TransportNodeStandardHostSwitchTransportNodeProfileSubConfig:TransportNodeStandardHostSwitchTransportNodeProfileSubConfig": {
            "properties": {
                "hostSwitchConfigOption": {
                    "$ref": "#/types/nsxt:index/TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOption:TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOption",
                    "description": "Subset of the host switch configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Display name of the syslog server.\n"
                }
            },
            "type": "object",
            "required": [
                "hostSwitchConfigOption",
                "name"
            ]
        },
        "nsxt:index/TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOption:TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOption": {
            "properties": {
                "hostSwitchId": {
                    "type": "string",
                    "description": "External Id of the preconfigured host switch.\n"
                },
                "hostSwitchProfiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Identifiers of host switch profiles to be associated with this host switch.\n"
                },
                "ipAssignment": {
                    "$ref": "#/types/nsxt:index/TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignment:TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignment",
                    "description": "Specification for IPs to be used with host switch virtual tunnel endpoints. Should contain exatly one of the below:\n"
                },
                "uplinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionUplink:TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionUplink"
                    },
                    "description": "Uplink/LAG of VMware vSphere Distributed Switch connected to the HostSwitch.\n"
                }
            },
            "type": "object",
            "required": [
                "ipAssignment"
            ]
        },
        "nsxt:index/TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignment:TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignment": {
            "properties": {
                "assignedByDhcp": {
                    "type": "boolean",
                    "description": "Enables DHCP assignment.\n"
                },
                "staticIp": {
                    "$ref": "#/types/nsxt:index/TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIp:TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIp",
                    "description": "IP assignment specification for Static IP List.\n"
                },
                "staticIpMac": {
                    "$ref": "#/types/nsxt:index/TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIpMac:TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIpMac",
                    "description": "IP and MAC assignment specification for Static IP List.\n"
                },
                "staticIpPool": {
                    "type": "string",
                    "description": "IP assignment specification for Static IP Pool.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIp:TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIp": {
            "properties": {
                "defaultGateway": {
                    "type": "string",
                    "description": "Gateway IP.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs for transport node host switch virtual tunnel endpoints.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "Subnet mask.\n"
                }
            },
            "type": "object",
            "required": [
                "defaultGateway",
                "ipAddresses",
                "subnetMask"
            ]
        },
        "nsxt:index/TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIpMac:TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIpMac": {
            "properties": {
                "defaultGateway": {
                    "type": "string",
                    "description": "Gateway IP.\n"
                },
                "ipMacPairs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIpMacIpMacPair:TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIpMacIpMacPair"
                    },
                    "description": "List of IPs and MACs for transport node host switch virtual tunnel endpoints.\n"
                },
                "subnetMask": {
                    "type": "string",
                    "description": "Subnet mask.\n"
                }
            },
            "type": "object",
            "required": [
                "defaultGateway",
                "ipMacPairs",
                "subnetMask"
            ]
        },
        "nsxt:index/TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIpMacIpMacPair:TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionIpAssignmentStaticIpMacIpMacPair": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "IP address.\n"
                },
                "mac": {
                    "type": "string",
                    "description": "MAC address.\n"
                }
            },
            "type": "object",
            "required": [
                "ip"
            ]
        },
        "nsxt:index/TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionUplink:TransportNodeStandardHostSwitchTransportNodeProfileSubConfigHostSwitchConfigOptionUplink": {
            "properties": {
                "uplinkName": {
                    "type": "string",
                    "description": "Uplink name from UplinkHostSwitch profile.\n"
                },
                "vdsLagName": {
                    "type": "string",
                    "description": "Link Aggregation Group (LAG) name of Virtual Distributed Switch.\n"
                },
                "vdsUplinkName": {
                    "type": "string",
                    "description": "Uplink name of VMware vSphere Distributed Switch (VDS).\n"
                }
            },
            "type": "object",
            "required": [
                "uplinkName"
            ]
        },
        "nsxt:index/TransportNodeStandardHostSwitchTransportZoneEndpoint:TransportNodeStandardHostSwitchTransportZoneEndpoint": {
            "properties": {
                "transportZone": {
                    "type": "string",
                    "description": "Unique ID identifying the transport zone for this endpoint.\n"
                },
                "transportZoneProfiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Identifiers of the transport zone profiles associated with this transport zone endpoint on this transport node.\n"
                }
            },
            "type": "object",
            "required": [
                "transportZone"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "transportZone",
                        "transportZoneProfiles"
                    ]
                }
            }
        },
        "nsxt:index/TransportNodeStandardHostSwitchUplink:TransportNodeStandardHostSwitchUplink": {
            "properties": {
                "uplinkName": {
                    "type": "string",
                    "description": "Uplink name from UplinkHostSwitch profile.\n"
                },
                "vdsLagName": {
                    "type": "string",
                    "description": "Link Aggregation Group (LAG) name of Virtual Distributed Switch.\n"
                },
                "vdsUplinkName": {
                    "type": "string",
                    "description": "Uplink name of VMware vSphere Distributed Switch (VDS).\n"
                }
            },
            "type": "object",
            "required": [
                "uplinkName"
            ]
        },
        "nsxt:index/TransportNodeStandardHostSwitchVmkInstallMigration:TransportNodeStandardHostSwitchVmkInstallMigration": {
            "properties": {
                "destinationNetwork": {
                    "type": "string",
                    "description": "The network id to which the ESX vmk interface will be migrated.\n"
                },
                "deviceName": {
                    "type": "string",
                    "description": "ESX vmk interface name.\n"
                }
            },
            "type": "object",
            "required": [
                "destinationNetwork",
                "deviceName"
            ]
        },
        "nsxt:index/TransportNodeTag:TransportNodeTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/UplinkHostSwitchProfileLag:UplinkHostSwitchProfileLag": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the resource.\n"
                },
                "loadBalanceAlgorithm": {
                    "type": "string",
                    "description": "LACP load balance Algorithm. Possible values are: `SRCMAC`, `DESTMAC`, `SRCDESTMAC`, `SRCDESTIPVLAN`, `SRCDESTMACIPPORT`.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "LACP group mode. Possible values are: `ACTIVE`, `PASSIVE`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "An uplink teaming policy of a given name defined in UplinkHostSwitchProfile. The names of all NamedTeamingPolicies in an UplinkHostSwitchProfile must be different, but a name can be shared by different UplinkHostSwitchProfiles. Different TransportNodes can use different NamedTeamingPolicies having the same name in different UplinkHostSwitchProfiles to realize an uplink teaming policy on a logical switch. An uplink teaming policy on a logical switch can be any policy defined by a user; it does not have to be a single type of FAILOVER or LOADBALANCE. It can be a combination of types, for instance, a user can define a policy with name `MyHybridTeamingPolicy` as `FAILOVER on all ESX TransportNodes and LOADBALANCE on all KVM TransportNodes`.\n"
                },
                "numberOfUplinks": {
                    "type": "integer",
                    "description": "Number of uplinks. Minimum: 2, maximum: 32.\n"
                },
                "timeoutType": {
                    "type": "string",
                    "description": "LACP timeout type. Possible values are: `SLOW`, `FAST`. Default: `SLOW`.\n"
                },
                "uplinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/UplinkHostSwitchProfileLagUplink:UplinkHostSwitchProfileLagUplink"
                    }
                }
            },
            "type": "object",
            "required": [
                "loadBalanceAlgorithm",
                "mode",
                "name",
                "numberOfUplinks"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "loadBalanceAlgorithm",
                        "mode",
                        "name",
                        "numberOfUplinks",
                        "uplinks"
                    ]
                }
            }
        },
        "nsxt:index/UplinkHostSwitchProfileLagUplink:UplinkHostSwitchProfileLagUplink": {
            "properties": {
                "uplinkName": {
                    "type": "string",
                    "description": "Name of this uplink.\n"
                },
                "uplinkType": {
                    "type": "string",
                    "description": "Type of the uplink. Possible values are: `PNIC`, `LAG`.\n"
                }
            },
            "type": "object",
            "required": [
                "uplinkName",
                "uplinkType"
            ]
        },
        "nsxt:index/UplinkHostSwitchProfileNamedTeaming:UplinkHostSwitchProfileNamedTeaming": {
            "properties": {
                "actives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/UplinkHostSwitchProfileNamedTeamingActive:UplinkHostSwitchProfileNamedTeamingActive"
                    },
                    "description": "List of Uplinks used in active list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "An uplink teaming policy of a given name defined in UplinkHostSwitchProfile. The names of all NamedTeamingPolicies in an UplinkHostSwitchProfile must be different, but a name can be shared by different UplinkHostSwitchProfiles. Different TransportNodes can use different NamedTeamingPolicies having the same name in different UplinkHostSwitchProfiles to realize an uplink teaming policy on a logical switch. An uplink teaming policy on a logical switch can be any policy defined by a user; it does not have to be a single type of FAILOVER or LOADBALANCE. It can be a combination of types, for instance, a user can define a policy with name `MyHybridTeamingPolicy` as `FAILOVER on all ESX TransportNodes and LOADBALANCE on all KVM TransportNodes`.\n"
                },
                "policy": {
                    "type": "string",
                    "description": "Teaming policy. Possible values are: `FAILOVER_ORDER`, `LOADBALANCE_SRCID`, `LOADBALANCE_SRC_MAC`.\n"
                },
                "standbies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/UplinkHostSwitchProfileNamedTeamingStandby:UplinkHostSwitchProfileNamedTeamingStandby"
                    },
                    "description": "List of Uplinks used in standby list.\n"
                }
            },
            "type": "object",
            "required": [
                "actives",
                "name",
                "policy"
            ]
        },
        "nsxt:index/UplinkHostSwitchProfileNamedTeamingActive:UplinkHostSwitchProfileNamedTeamingActive": {
            "properties": {
                "uplinkName": {
                    "type": "string",
                    "description": "Name of this uplink.\n"
                },
                "uplinkType": {
                    "type": "string",
                    "description": "Type of the uplink. Possible values are: `PNIC`, `LAG`.\n"
                }
            },
            "type": "object",
            "required": [
                "uplinkName",
                "uplinkType"
            ]
        },
        "nsxt:index/UplinkHostSwitchProfileNamedTeamingStandby:UplinkHostSwitchProfileNamedTeamingStandby": {
            "properties": {
                "uplinkName": {
                    "type": "string",
                    "description": "Name of this uplink.\n"
                },
                "uplinkType": {
                    "type": "string",
                    "description": "Type of the uplink. Possible values are: `PNIC`, `LAG`.\n"
                }
            },
            "type": "object",
            "required": [
                "uplinkName",
                "uplinkType"
            ]
        },
        "nsxt:index/UplinkHostSwitchProfileTag:UplinkHostSwitchProfileTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/UplinkHostSwitchProfileTeaming:UplinkHostSwitchProfileTeaming": {
            "properties": {
                "actives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/UplinkHostSwitchProfileTeamingActive:UplinkHostSwitchProfileTeamingActive"
                    },
                    "description": "List of Uplinks used in active list.\n"
                },
                "policy": {
                    "type": "string",
                    "description": "Teaming policy. Possible values are: `FAILOVER_ORDER`, `LOADBALANCE_SRCID`, `LOADBALANCE_SRC_MAC`.\n"
                },
                "standbies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/UplinkHostSwitchProfileTeamingStandby:UplinkHostSwitchProfileTeamingStandby"
                    },
                    "description": "List of Uplinks used in standby list.\n"
                }
            },
            "type": "object",
            "required": [
                "actives",
                "policy"
            ]
        },
        "nsxt:index/UplinkHostSwitchProfileTeamingActive:UplinkHostSwitchProfileTeamingActive": {
            "properties": {
                "uplinkName": {
                    "type": "string",
                    "description": "Name of this uplink.\n"
                },
                "uplinkType": {
                    "type": "string",
                    "description": "Type of the uplink. Possible values are: `PNIC`, `LAG`.\n"
                }
            },
            "type": "object",
            "required": [
                "uplinkName",
                "uplinkType"
            ]
        },
        "nsxt:index/UplinkHostSwitchProfileTeamingStandby:UplinkHostSwitchProfileTeamingStandby": {
            "properties": {
                "uplinkName": {
                    "type": "string",
                    "description": "Name of this uplink.\n"
                },
                "uplinkType": {
                    "type": "string",
                    "description": "Type of the uplink. Possible values are: `PNIC`, `LAG`.\n"
                }
            },
            "type": "object",
            "required": [
                "uplinkName",
                "uplinkType"
            ]
        },
        "nsxt:index/VlanLogicalSwitchAddressBinding:VlanLogicalSwitchAddressBinding": {
            "properties": {
                "ipAddress": {
                    "type": "string"
                },
                "macAddress": {
                    "type": "string"
                },
                "vlan": {
                    "type": "integer",
                    "description": "Vlan for the logical switch.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/VlanLogicalSwitchSwitchingProfileId:VlanLogicalSwitchSwitchingProfileId": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "nsxt:index/VlanLogicalSwitchTag:VlanLogicalSwitchTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this logical switch.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/VmTagsLogicalPortTag:VmTagsLogicalPortTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this VM.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/VmTagsTag:VmTagsTag": {
            "properties": {
                "scope": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "A list of scope + tag pairs to associate with this VM.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/getPolicyContextProfileContext:getPolicyContextProfileContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicyDhcpServerContext:getPolicyDhcpServerContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicyGatewayLocaleServiceContext:getPolicyGatewayLocaleServiceContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicyGatewayPolicyContext:getPolicyGatewayPolicyContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicyGatewayQosProfileContext:getPolicyGatewayQosProfileContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicyGroupContext:getPolicyGroupContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicyIpBlockContext:getPolicyIpBlockContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicyIpDiscoveryProfileContext:getPolicyIpDiscoveryProfileContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicyIpPoolContext:getPolicyIpPoolContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicyIpv6DadProfileContext:getPolicyIpv6DadProfileContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicyIpv6NdraProfileContext:getPolicyIpv6NdraProfileContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicyMacDiscoveryProfileContext:getPolicyMacDiscoveryProfileContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicyProjectSiteInfo:getPolicyProjectSiteInfo": {
            "properties": {
                "edgeClusterPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The edge cluster on which the networking elements for the Org will be created.\n"
                },
                "sitePath": {
                    "type": "string",
                    "description": "This represents the path of the site which is managed by Global Manager. For the local manager, if set, this needs to point to 'default'.\n"
                }
            },
            "type": "object"
        },
        "nsxt:index/getPolicyQosProfileContext:getPolicyQosProfileContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicyRealizationInfoContext:getPolicyRealizationInfoContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicySecurityPolicyContext:getPolicySecurityPolicyContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicySegmentContext:getPolicySegmentContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicySegmentRealizationContext:getPolicySegmentRealizationContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicySegmentSecurityProfileContext:getPolicySegmentSecurityProfileContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicyServiceContext:getPolicyServiceContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicySpoofguardProfileContext:getPolicySpoofguardProfileContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicyTier1GatewayContext:getPolicyTier1GatewayContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicyVmContext:getPolicyVmContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "nsxt:index/getPolicyVmsContext:getPolicyVmsContext": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project which the object belongs to\n"
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the nsxt package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "allowUnverifiedSsl": {
                "type": "boolean"
            },
            "ca": {
                "type": "string",
                "description": "CA certificate passed as string\n"
            },
            "caFile": {
                "type": "string"
            },
            "clientAuthCert": {
                "type": "string",
                "description": "Client certificate passed as string\n"
            },
            "clientAuthCertFile": {
                "type": "string"
            },
            "clientAuthKey": {
                "type": "string",
                "description": "Client certificate key passed as string\n"
            },
            "clientAuthKeyFile": {
                "type": "string"
            },
            "enforcementPoint": {
                "type": "string",
                "description": "Enforcement Point for NSXT Policy\n"
            },
            "globalManager": {
                "type": "boolean",
                "description": "Is this a policy global manager endpoint\n"
            },
            "host": {
                "type": "string",
                "description": "The hostname or IP address of the NSX manager.\n"
            },
            "licenseKeys": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "license keys\n"
            },
            "maxRetries": {
                "type": "integer",
                "description": "Maximum number of HTTP client retries\n"
            },
            "onDemandConnection": {
                "type": "boolean",
                "description": "Avoid initializing NSX connection on startup\n"
            },
            "password": {
                "type": "string",
                "secret": true
            },
            "remoteAuth": {
                "type": "boolean"
            },
            "retryMaxDelay": {
                "type": "integer",
                "description": "Maximum delay in milliseconds between retries of a request\n"
            },
            "retryMinDelay": {
                "type": "integer",
                "description": "Minimum delay in milliseconds between retries of a request\n"
            },
            "retryOnStatusCodes": {
                "type": "array",
                "items": {
                    "type": "integer"
                },
                "description": "HTTP replies status codes to retry on\n"
            },
            "sessionAuth": {
                "type": "boolean"
            },
            "toleratePartialSuccess": {
                "type": "boolean",
                "description": "Treat partial success status as success\n"
            },
            "username": {
                "type": "string"
            },
            "vmcAuthHost": {
                "type": "string",
                "description": "URL for VMC authorization service (CSP)\n"
            },
            "vmcAuthMode": {
                "type": "string",
                "description": "Mode for VMC authorization\n"
            },
            "vmcToken": {
                "type": "string",
                "description": "Long-living API token for VMC authorization\n"
            }
        },
        "inputProperties": {
            "allowUnverifiedSsl": {
                "type": "boolean"
            },
            "ca": {
                "type": "string",
                "description": "CA certificate passed as string\n"
            },
            "caFile": {
                "type": "string"
            },
            "clientAuthCert": {
                "type": "string",
                "description": "Client certificate passed as string\n"
            },
            "clientAuthCertFile": {
                "type": "string"
            },
            "clientAuthKey": {
                "type": "string",
                "description": "Client certificate key passed as string\n"
            },
            "clientAuthKeyFile": {
                "type": "string"
            },
            "enforcementPoint": {
                "type": "string",
                "description": "Enforcement Point for NSXT Policy\n"
            },
            "globalManager": {
                "type": "boolean",
                "description": "Is this a policy global manager endpoint\n"
            },
            "host": {
                "type": "string",
                "description": "The hostname or IP address of the NSX manager.\n"
            },
            "licenseKeys": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "license keys\n"
            },
            "maxRetries": {
                "type": "integer",
                "description": "Maximum number of HTTP client retries\n"
            },
            "onDemandConnection": {
                "type": "boolean",
                "description": "Avoid initializing NSX connection on startup\n"
            },
            "password": {
                "type": "string",
                "secret": true
            },
            "remoteAuth": {
                "type": "boolean"
            },
            "retryMaxDelay": {
                "type": "integer",
                "description": "Maximum delay in milliseconds between retries of a request\n"
            },
            "retryMinDelay": {
                "type": "integer",
                "description": "Minimum delay in milliseconds between retries of a request\n"
            },
            "retryOnStatusCodes": {
                "type": "array",
                "items": {
                    "type": "integer"
                },
                "description": "HTTP replies status codes to retry on\n"
            },
            "sessionAuth": {
                "type": "boolean"
            },
            "toleratePartialSuccess": {
                "type": "boolean",
                "description": "Treat partial success status as success\n"
            },
            "username": {
                "type": "string"
            },
            "vmcAuthHost": {
                "type": "string",
                "description": "URL for VMC authorization service (CSP)\n"
            },
            "vmcAuthMode": {
                "type": "string",
                "description": "Mode for VMC authorization\n"
            },
            "vmcToken": {
                "type": "string",
                "description": "Long-living API token for VMC authorization\n"
            }
        }
    },
    "resources": {
        "nsxt:index/algorithmTypeNsService:AlgorithmTypeNsService": {
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "Algorithm one of \"ORACLE_TNS\", \"FTP\", \"SUN_RPC_TCP\", \"SUN_RPC_UDP\", \"MS_RPC_TCP\", \"MS_RPC_UDP\", \"NBNS_BROADCAST\", \"NBDG_BROADCAST\", \"TFTP\"\n"
                },
                "defaultService": {
                    "type": "boolean",
                    "description": "The default NSServices are created in the system by default. These NSServices can't be modified/deleted.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description.\n"
                },
                "destinationPort": {
                    "type": "string",
                    "description": "a single destination port.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "sourcePorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of source ports/ranges.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/AlgorithmTypeNsServiceTag:AlgorithmTypeNsServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this service.\n"
                }
            },
            "required": [
                "algorithm",
                "defaultService",
                "destinationPort",
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "algorithm": {
                    "type": "string",
                    "description": "Algorithm one of \"ORACLE_TNS\", \"FTP\", \"SUN_RPC_TCP\", \"SUN_RPC_UDP\", \"MS_RPC_TCP\", \"MS_RPC_UDP\", \"NBNS_BROADCAST\", \"NBDG_BROADCAST\", \"TFTP\"\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description.\n"
                },
                "destinationPort": {
                    "type": "string",
                    "description": "a single destination port.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "sourcePorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of source ports/ranges.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/AlgorithmTypeNsServiceTag:AlgorithmTypeNsServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this service.\n"
                }
            },
            "requiredInputs": [
                "algorithm",
                "destinationPort"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlgorithmTypeNsService resources.\n",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "Algorithm one of \"ORACLE_TNS\", \"FTP\", \"SUN_RPC_TCP\", \"SUN_RPC_UDP\", \"MS_RPC_TCP\", \"MS_RPC_UDP\", \"NBNS_BROADCAST\", \"NBDG_BROADCAST\", \"TFTP\"\n"
                    },
                    "defaultService": {
                        "type": "boolean",
                        "description": "The default NSServices are created in the system by default. These NSServices can't be modified/deleted.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description.\n"
                    },
                    "destinationPort": {
                        "type": "string",
                        "description": "a single destination port.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name, defaults to ID if not set.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "sourcePorts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of source ports/ranges.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/AlgorithmTypeNsServiceTag:AlgorithmTypeNsServiceTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this service.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/clusterVirtualIp:ClusterVirtualIp": {
            "description": "This resource provides a method for configuring the virtual IP of NSXT cluster.\nThis resource is supported with NSX 4.1.0 onwards.\nOnly one instance of nsxt.ClusterVirtualIp resource is supported.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@SCC-Hyperscale-fr/nsxt\";\n\nconst test = new nsxt.ClusterVirtualIp(\"test\", {\n    force: true,\n    ipAddress: \"10.0.0.251\",\n    ipv6Address: \"fd01:1:2:2918:250:56ff:fe8b:7e4d\",\n});\n```\n```python\nimport pulumi\nimport hyperscale_pulumi_nsxt as nsxt\n\ntest = nsxt.ClusterVirtualIp(\"test\",\n    force=True,\n    ip_address=\"10.0.0.251\",\n    ipv6_address=\"fd01:1:2:2918:250:56ff:fe8b:7e4d\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = SCC-Hyperscale-fr.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Nsxt.ClusterVirtualIp(\"test\", new()\n    {\n        Force = true,\n        IpAddress = \"10.0.0.251\",\n        Ipv6Address = \"fd01:1:2:2918:250:56ff:fe8b:7e4d\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.NewClusterVirtualIp(ctx, \"test\", \u0026nsxt.ClusterVirtualIpArgs{\n\t\t\tForce:       pulumi.Bool(true),\n\t\t\tIpAddress:   pulumi.String(\"10.0.0.251\"),\n\t\t\tIpv6Address: pulumi.String(\"fd01:1:2:2918:250:56ff:fe8b:7e4d\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.ClusterVirtualIp;\nimport com.pulumi.nsxt.ClusterVirtualIpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new ClusterVirtualIp(\"test\", ClusterVirtualIpArgs.builder()        \n            .force(\"true\")\n            .ipAddress(\"10.0.0.251\")\n            .ipv6Address(\"fd01:1:2:2918:250:56ff:fe8b:7e4d\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: nsxt:ClusterVirtualIp\n    properties:\n      force: 'true'\n      ipAddress: 10.0.0.251\n      ipv6Address: fd01:1:2:2918:250:56ff:fe8b:7e4d\n```\n{{% /example %}}\n{{% /examples %}}\n## Importing\n\nImporting is not supported for this resource.\n",
            "properties": {
                "force": {
                    "type": "boolean",
                    "description": "A flag to determine if need to ignore duplicate address detection and DNS lookup validation check. Value can be `true` or `false`. Default value is `false`.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Virtual IP Address of the cluster. Must be in the same subnet as the manager nodes. Default value is `0.0.0.0`.\n"
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "Virtual IPv6 Address of the cluster. To set ipv6 virtual IP address, IPv6 interface needs to be configured on manager nodes. Default value is `::`.\n"
                }
            },
            "inputProperties": {
                "force": {
                    "type": "boolean",
                    "description": "A flag to determine if need to ignore duplicate address detection and DNS lookup validation check. Value can be `true` or `false`. Default value is `false`.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Virtual IP Address of the cluster. Must be in the same subnet as the manager nodes. Default value is `0.0.0.0`.\n"
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "Virtual IPv6 Address of the cluster. To set ipv6 virtual IP address, IPv6 interface needs to be configured on manager nodes. Default value is `::`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ClusterVirtualIp resources.\n",
                "properties": {
                    "force": {
                        "type": "boolean",
                        "description": "A flag to determine if need to ignore duplicate address detection and DNS lookup validation check. Value can be `true` or `false`. Default value is `false`.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "Virtual IP Address of the cluster. Must be in the same subnet as the manager nodes. Default value is `0.0.0.0`.\n"
                    },
                    "ipv6Address": {
                        "type": "string",
                        "description": "Virtual IPv6 Address of the cluster. To set ipv6 virtual IP address, IPv6 interface needs to be configured on manager nodes. Default value is `::`.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/computeManager:ComputeManager": {
            "properties": {
                "accessLevelForOidc": {
                    "type": "string",
                    "description": "Specifies access level to NSX from the compute manager. Accepted values - 'FULL' or 'LIMITED'. The default value is 'FULL'.\n"
                },
                "createServiceAccount": {
                    "type": "boolean",
                    "description": "Specifies whether service account is created or not on compute manager.\n"
                },
                "credential": {
                    "$ref": "#/types/nsxt:index/ComputeManagerCredential:ComputeManagerCredential",
                    "description": "Login credentials for the compute manager. Should contain exactly one credential enlisted below:\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "extensionCertificate": {
                    "$ref": "#/types/nsxt:index/ComputeManagerExtensionCertificate:ComputeManagerExtensionCertificate",
                    "description": "Specifies certificate for compute manager extension.\n"
                },
                "multiNsx": {
                    "type": "boolean",
                    "description": "Specifies whether multi nsx feature is enabled for compute manager.\n"
                },
                "originType": {
                    "type": "string",
                    "description": "Compute manager type like vCenter. Defaults to vCenter if not set.\n"
                },
                "reverseProxyHttpsPort": {
                    "type": "integer",
                    "description": "Proxy https port of compute manager.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "server": {
                    "type": "string",
                    "description": "IP address or hostname of compute manager.\n"
                },
                "setAsOidcProvider": {
                    "type": "boolean",
                    "description": "Specifies whether compute manager has been set as OIDC provider.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/ComputeManagerTag:ComputeManagerTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "credential",
                "displayName",
                "revision",
                "server"
            ],
            "inputProperties": {
                "accessLevelForOidc": {
                    "type": "string",
                    "description": "Specifies access level to NSX from the compute manager. Accepted values - 'FULL' or 'LIMITED'. The default value is 'FULL'.\n"
                },
                "createServiceAccount": {
                    "type": "boolean",
                    "description": "Specifies whether service account is created or not on compute manager.\n"
                },
                "credential": {
                    "$ref": "#/types/nsxt:index/ComputeManagerCredential:ComputeManagerCredential",
                    "description": "Login credentials for the compute manager. Should contain exactly one credential enlisted below:\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "extensionCertificate": {
                    "$ref": "#/types/nsxt:index/ComputeManagerExtensionCertificate:ComputeManagerExtensionCertificate",
                    "description": "Specifies certificate for compute manager extension.\n"
                },
                "multiNsx": {
                    "type": "boolean",
                    "description": "Specifies whether multi nsx feature is enabled for compute manager.\n"
                },
                "originType": {
                    "type": "string",
                    "description": "Compute manager type like vCenter. Defaults to vCenter if not set.\n"
                },
                "reverseProxyHttpsPort": {
                    "type": "integer",
                    "description": "Proxy https port of compute manager.\n"
                },
                "server": {
                    "type": "string",
                    "description": "IP address or hostname of compute manager.\n"
                },
                "setAsOidcProvider": {
                    "type": "boolean",
                    "description": "Specifies whether compute manager has been set as OIDC provider.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/ComputeManagerTag:ComputeManagerTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "credential",
                "displayName",
                "server"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ComputeManager resources.\n",
                "properties": {
                    "accessLevelForOidc": {
                        "type": "string",
                        "description": "Specifies access level to NSX from the compute manager. Accepted values - 'FULL' or 'LIMITED'. The default value is 'FULL'.\n"
                    },
                    "createServiceAccount": {
                        "type": "boolean",
                        "description": "Specifies whether service account is created or not on compute manager.\n"
                    },
                    "credential": {
                        "$ref": "#/types/nsxt:index/ComputeManagerCredential:ComputeManagerCredential",
                        "description": "Login credentials for the compute manager. Should contain exactly one credential enlisted below:\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "extensionCertificate": {
                        "$ref": "#/types/nsxt:index/ComputeManagerExtensionCertificate:ComputeManagerExtensionCertificate",
                        "description": "Specifies certificate for compute manager extension.\n"
                    },
                    "multiNsx": {
                        "type": "boolean",
                        "description": "Specifies whether multi nsx feature is enabled for compute manager.\n"
                    },
                    "originType": {
                        "type": "string",
                        "description": "Compute manager type like vCenter. Defaults to vCenter if not set.\n"
                    },
                    "reverseProxyHttpsPort": {
                        "type": "integer",
                        "description": "Proxy https port of compute manager.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "server": {
                        "type": "string",
                        "description": "IP address or hostname of compute manager.\n"
                    },
                    "setAsOidcProvider": {
                        "type": "boolean",
                        "description": "Specifies whether compute manager has been set as OIDC provider.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/ComputeManagerTag:ComputeManagerTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/dhcpRelayProfile:DhcpRelayProfile": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "serverAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IP addresses of the DHCP relay servers. Maximum allowed amount is 2.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/DhcpRelayProfileTag:DhcpRelayProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this DHCP relay profile.\n"
                }
            },
            "required": [
                "displayName",
                "revision",
                "serverAddresses"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "serverAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IP addresses of the DHCP relay servers. Maximum allowed amount is 2.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/DhcpRelayProfileTag:DhcpRelayProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this DHCP relay profile.\n"
                }
            },
            "requiredInputs": [
                "serverAddresses"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DhcpRelayProfile resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "serverAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IP addresses of the DHCP relay servers. Maximum allowed amount is 2.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/DhcpRelayProfileTag:DhcpRelayProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this DHCP relay profile.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/dhcpRelayService:DhcpRelayService": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "dhcpRelayProfileId": {
                    "type": "string",
                    "description": "DHCP relay profile referenced by the DHCP relay service.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/DhcpRelayServiceTag:DhcpRelayServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this dhcp_relay_service.\n"
                }
            },
            "required": [
                "dhcpRelayProfileId",
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "dhcpRelayProfileId": {
                    "type": "string",
                    "description": "DHCP relay profile referenced by the DHCP relay service.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/DhcpRelayServiceTag:DhcpRelayServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this dhcp_relay_service.\n"
                }
            },
            "requiredInputs": [
                "dhcpRelayProfileId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DhcpRelayService resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "dhcpRelayProfileId": {
                        "type": "string",
                        "description": "DHCP relay profile referenced by the DHCP relay service.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/DhcpRelayServiceTag:DhcpRelayServiceTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this dhcp_relay_service.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/dhcpServerIpPool:DhcpServerIpPool": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "dhcpGenericOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/DhcpServerIpPoolDhcpGenericOption:DhcpServerIpPoolDhcpGenericOption"
                    },
                    "description": "Generic DHCP options. If specified, overrides DHCP server settings.\n"
                },
                "dhcpOption121s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/DhcpServerIpPoolDhcpOption121:DhcpServerIpPoolDhcpOption121"
                    },
                    "description": "DHCP classless static routes. If specified, overrides DHCP server settings.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "errorThreshold": {
                    "type": "integer",
                    "description": "Error threshold in percent. Valid values are from 80 to 100, default is 100.\n"
                },
                "gatewayIp": {
                    "type": "string",
                    "description": "Gateway IP.\n"
                },
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/DhcpServerIpPoolIpRange:DhcpServerIpPoolIpRange"
                    },
                    "description": "IP Ranges to be used within this pool.\n"
                },
                "leaseTime": {
                    "type": "integer",
                    "description": "Lease time in seconds. Default is 86400.\n"
                },
                "logicalDhcpServerId": {
                    "type": "string",
                    "description": "DHCP server uuid. Changing this would force new pool to be created.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/DhcpServerIpPoolTag:DhcpServerIpPoolTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this logical DHCP server.\n"
                },
                "warningThreshold": {
                    "type": "integer",
                    "description": "Warning threshold in percent. Valid values are from 50 to 80, default is 80.\n"
                }
            },
            "required": [
                "displayName",
                "logicalDhcpServerId",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "dhcpGenericOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/DhcpServerIpPoolDhcpGenericOption:DhcpServerIpPoolDhcpGenericOption"
                    },
                    "description": "Generic DHCP options. If specified, overrides DHCP server settings.\n"
                },
                "dhcpOption121s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/DhcpServerIpPoolDhcpOption121:DhcpServerIpPoolDhcpOption121"
                    },
                    "description": "DHCP classless static routes. If specified, overrides DHCP server settings.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "errorThreshold": {
                    "type": "integer",
                    "description": "Error threshold in percent. Valid values are from 80 to 100, default is 100.\n"
                },
                "gatewayIp": {
                    "type": "string",
                    "description": "Gateway IP.\n"
                },
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/DhcpServerIpPoolIpRange:DhcpServerIpPoolIpRange"
                    },
                    "description": "IP Ranges to be used within this pool.\n"
                },
                "leaseTime": {
                    "type": "integer",
                    "description": "Lease time in seconds. Default is 86400.\n"
                },
                "logicalDhcpServerId": {
                    "type": "string",
                    "description": "DHCP server uuid. Changing this would force new pool to be created.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/DhcpServerIpPoolTag:DhcpServerIpPoolTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this logical DHCP server.\n"
                },
                "warningThreshold": {
                    "type": "integer",
                    "description": "Warning threshold in percent. Valid values are from 50 to 80, default is 80.\n"
                }
            },
            "requiredInputs": [
                "logicalDhcpServerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DhcpServerIpPool resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "dhcpGenericOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/DhcpServerIpPoolDhcpGenericOption:DhcpServerIpPoolDhcpGenericOption"
                        },
                        "description": "Generic DHCP options. If specified, overrides DHCP server settings.\n"
                    },
                    "dhcpOption121s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/DhcpServerIpPoolDhcpOption121:DhcpServerIpPoolDhcpOption121"
                        },
                        "description": "DHCP classless static routes. If specified, overrides DHCP server settings.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "errorThreshold": {
                        "type": "integer",
                        "description": "Error threshold in percent. Valid values are from 80 to 100, default is 100.\n"
                    },
                    "gatewayIp": {
                        "type": "string",
                        "description": "Gateway IP.\n"
                    },
                    "ipRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/DhcpServerIpPoolIpRange:DhcpServerIpPoolIpRange"
                        },
                        "description": "IP Ranges to be used within this pool.\n"
                    },
                    "leaseTime": {
                        "type": "integer",
                        "description": "Lease time in seconds. Default is 86400.\n"
                    },
                    "logicalDhcpServerId": {
                        "type": "string",
                        "description": "DHCP server uuid. Changing this would force new pool to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/DhcpServerIpPoolTag:DhcpServerIpPoolTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this logical DHCP server.\n"
                    },
                    "warningThreshold": {
                        "type": "integer",
                        "description": "Warning threshold in percent. Valid values are from 50 to 80, default is 80.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/dhcpServerProfile:DhcpServerProfile": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "edgeClusterId": {
                    "type": "string",
                    "description": "Edge cluster uuid.\n"
                },
                "edgeClusterMemberIndexes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Up to 2 edge nodes from the given cluster. If none is provided, the NSX will auto-select two edge-nodes from the given edge cluster. If user provides only one edge node, there will be no HA support.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/DhcpServerProfileTag:DhcpServerProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this DHCP profile.\n"
                }
            },
            "required": [
                "displayName",
                "edgeClusterId",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "edgeClusterId": {
                    "type": "string",
                    "description": "Edge cluster uuid.\n"
                },
                "edgeClusterMemberIndexes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Up to 2 edge nodes from the given cluster. If none is provided, the NSX will auto-select two edge-nodes from the given edge cluster. If user provides only one edge node, there will be no HA support.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/DhcpServerProfileTag:DhcpServerProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this DHCP profile.\n"
                }
            },
            "requiredInputs": [
                "edgeClusterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DhcpServerProfile resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "edgeClusterId": {
                        "type": "string",
                        "description": "Edge cluster uuid.\n"
                    },
                    "edgeClusterMemberIndexes": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Up to 2 edge nodes from the given cluster. If none is provided, the NSX will auto-select two edge-nodes from the given edge cluster. If user provides only one edge node, there will be no HA support.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/DhcpServerProfileTag:DhcpServerProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this DHCP profile.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/edgeCluster:EdgeCluster": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "edgeHaProfileId": {
                    "type": "string",
                    "description": "Edge high availability cluster profile ID.\n"
                },
                "memberNodeType": {
                    "type": "string",
                    "description": "Node type of the cluster members.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/EdgeClusterMember:EdgeClusterMember"
                    },
                    "description": "Edge cluster members\n"
                },
                "nodeRtepIps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/EdgeClusterNodeRtepIp:EdgeClusterNodeRtepIp"
                    },
                    "description": "Remote tunnel endpoint ip address.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/EdgeClusterTag:EdgeClusterTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "displayName",
                "edgeHaProfileId",
                "memberNodeType",
                "nodeRtepIps",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "edgeHaProfileId": {
                    "type": "string",
                    "description": "Edge high availability cluster profile ID.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/EdgeClusterMember:EdgeClusterMember"
                    },
                    "description": "Edge cluster members\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/EdgeClusterTag:EdgeClusterTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EdgeCluster resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "edgeHaProfileId": {
                        "type": "string",
                        "description": "Edge high availability cluster profile ID.\n"
                    },
                    "memberNodeType": {
                        "type": "string",
                        "description": "Node type of the cluster members.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/EdgeClusterMember:EdgeClusterMember"
                        },
                        "description": "Edge cluster members\n"
                    },
                    "nodeRtepIps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/EdgeClusterNodeRtepIp:EdgeClusterNodeRtepIp"
                        },
                        "description": "Remote tunnel endpoint ip address.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/EdgeClusterTag:EdgeClusterTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/etherTypeNsService:EtherTypeNsService": {
            "properties": {
                "defaultService": {
                    "type": "boolean",
                    "description": "The default NSServices are created in the system by default. These NSServices can't be modified/deleted.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "etherType": {
                    "type": "integer",
                    "description": "Type of the encapsulated protocol.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/EtherTypeNsServiceTag:EtherTypeNsServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this service.\n"
                }
            },
            "required": [
                "defaultService",
                "displayName",
                "etherType",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "etherType": {
                    "type": "integer",
                    "description": "Type of the encapsulated protocol.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/EtherTypeNsServiceTag:EtherTypeNsServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this service.\n"
                }
            },
            "requiredInputs": [
                "etherType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EtherTypeNsService resources.\n",
                "properties": {
                    "defaultService": {
                        "type": "boolean",
                        "description": "The default NSServices are created in the system by default. These NSServices can't be modified/deleted.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name, defaults to ID if not set.\n"
                    },
                    "etherType": {
                        "type": "integer",
                        "description": "Type of the encapsulated protocol.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/EtherTypeNsServiceTag:EtherTypeNsServiceTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this service.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/failureDomain:FailureDomain": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "preferredEdgeServices": {
                    "type": "string",
                    "description": "Set preference for failure domain. Set preference for edge transport node failure domain which will be considered while doing auto placement of logical router, DHCP and MDProxy on edge node. `active`: For preemptive failover mode, active edge cluster member allocation prefers this failure domain. `standby`: For preemptive failover mode, standby edge cluster member allocation prefers this failure domain. Default will be `no_preference`. It means no explicit preference.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/FailureDomainTag:FailureDomainTag"
                    },
                    "description": "Set of opaque identifiers meaningful to the user\n"
                }
            },
            "required": [
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "preferredEdgeServices": {
                    "type": "string",
                    "description": "Set preference for failure domain. Set preference for edge transport node failure domain which will be considered while doing auto placement of logical router, DHCP and MDProxy on edge node. `active`: For preemptive failover mode, active edge cluster member allocation prefers this failure domain. `standby`: For preemptive failover mode, standby edge cluster member allocation prefers this failure domain. Default will be `no_preference`. It means no explicit preference.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/FailureDomainTag:FailureDomainTag"
                    },
                    "description": "Set of opaque identifiers meaningful to the user\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FailureDomain resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "preferredEdgeServices": {
                        "type": "string",
                        "description": "Set preference for failure domain. Set preference for edge transport node failure domain which will be considered while doing auto placement of logical router, DHCP and MDProxy on edge node. `active`: For preemptive failover mode, active edge cluster member allocation prefers this failure domain. `standby`: For preemptive failover mode, standby edge cluster member allocation prefers this failure domain. Default will be `no_preference`. It means no explicit preference.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/FailureDomainTag:FailureDomainTag"
                        },
                        "description": "Set of opaque identifiers meaningful to the user\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/firewallSection:FirewallSection": {
            "properties": {
                "appliedTos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/FirewallSectionAppliedTo:FirewallSectionAppliedTo"
                    },
                    "description": "List of objects where rule will be enforced. The section level field overrides this one. Null will be treated as any. [Supported target types: \"LogicalPort\", \"LogicalSwitch\", \"NSGroup\", \"LogicalRouterPort\"]\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this rule.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this rule. Defaults to ID if not set.\n"
                },
                "insertBefore": {
                    "type": "string",
                    "description": "Firewall section id that should come immediately after this one. It is user responsibility to use this attribute in consistent manner (for example, if same value would be set in two separate sections, the outcome would depend on order of creation). Changing this attribute would force recreation of the firewall section.\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether a firewall section is default section or not. Each Layer 3 and Layer 2 section will have at least and at most one default section.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/FirewallSectionRule:FirewallSectionRule"
                    },
                    "description": "A list of rules to be applied in this section. each rule has the following arguments:\n"
                },
                "sectionType": {
                    "type": "string",
                    "description": "Type of the rules which a section can contain. Either LAYER2 or LAYER3. Only homogeneous sections are supported.\n"
                },
                "stateful": {
                    "type": "boolean",
                    "description": "Stateful or Stateless nature of firewall section is enforced on all rules inside the section. Layer3 sections can be stateful or stateless. Layer2 sections can only be stateless.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/FirewallSectionTag:FirewallSectionTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this firewall section.\n"
                }
            },
            "required": [
                "displayName",
                "isDefault",
                "revision",
                "sectionType",
                "stateful"
            ],
            "inputProperties": {
                "appliedTos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/FirewallSectionAppliedTo:FirewallSectionAppliedTo"
                    },
                    "description": "List of objects where rule will be enforced. The section level field overrides this one. Null will be treated as any. [Supported target types: \"LogicalPort\", \"LogicalSwitch\", \"NSGroup\", \"LogicalRouterPort\"]\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this rule.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this rule. Defaults to ID if not set.\n"
                },
                "insertBefore": {
                    "type": "string",
                    "description": "Firewall section id that should come immediately after this one. It is user responsibility to use this attribute in consistent manner (for example, if same value would be set in two separate sections, the outcome would depend on order of creation). Changing this attribute would force recreation of the firewall section.\n",
                    "willReplaceOnChanges": true
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/FirewallSectionRule:FirewallSectionRule"
                    },
                    "description": "A list of rules to be applied in this section. each rule has the following arguments:\n"
                },
                "sectionType": {
                    "type": "string",
                    "description": "Type of the rules which a section can contain. Either LAYER2 or LAYER3. Only homogeneous sections are supported.\n"
                },
                "stateful": {
                    "type": "boolean",
                    "description": "Stateful or Stateless nature of firewall section is enforced on all rules inside the section. Layer3 sections can be stateful or stateless. Layer2 sections can only be stateless.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/FirewallSectionTag:FirewallSectionTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this firewall section.\n"
                }
            },
            "requiredInputs": [
                "sectionType",
                "stateful"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallSection resources.\n",
                "properties": {
                    "appliedTos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/FirewallSectionAppliedTo:FirewallSectionAppliedTo"
                        },
                        "description": "List of objects where rule will be enforced. The section level field overrides this one. Null will be treated as any. [Supported target types: \"LogicalPort\", \"LogicalSwitch\", \"NSGroup\", \"LogicalRouterPort\"]\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this rule.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this rule. Defaults to ID if not set.\n"
                    },
                    "insertBefore": {
                        "type": "string",
                        "description": "Firewall section id that should come immediately after this one. It is user responsibility to use this attribute in consistent manner (for example, if same value would be set in two separate sections, the outcome would depend on order of creation). Changing this attribute would force recreation of the firewall section.\n",
                        "willReplaceOnChanges": true
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "A boolean flag which reflects whether a firewall section is default section or not. Each Layer 3 and Layer 2 section will have at least and at most one default section.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/FirewallSectionRule:FirewallSectionRule"
                        },
                        "description": "A list of rules to be applied in this section. each rule has the following arguments:\n"
                    },
                    "sectionType": {
                        "type": "string",
                        "description": "Type of the rules which a section can contain. Either LAYER2 or LAYER3. Only homogeneous sections are supported.\n"
                    },
                    "stateful": {
                        "type": "boolean",
                        "description": "Stateful or Stateless nature of firewall section is enforced on all rules inside the section. Layer3 sections can be stateful or stateless. Layer2 sections can only be stateless.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/FirewallSectionTag:FirewallSectionTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this firewall section.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/icmpTypeNsService:IcmpTypeNsService": {
            "properties": {
                "defaultService": {
                    "type": "boolean",
                    "description": "The default NSServices are created in the system by default. These NSServices can't be modified/deleted.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "icmpCode": {
                    "type": "integer",
                    "description": "ICMP message code\n"
                },
                "icmpType": {
                    "type": "integer",
                    "description": "ICMP message type.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Version of ICMP protocol ICMPv4 or ICMPv6.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/IcmpTypeNsServiceTag:IcmpTypeNsServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this service.\n"
                }
            },
            "required": [
                "defaultService",
                "displayName",
                "protocol",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "icmpCode": {
                    "type": "integer",
                    "description": "ICMP message code\n"
                },
                "icmpType": {
                    "type": "integer",
                    "description": "ICMP message type.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Version of ICMP protocol ICMPv4 or ICMPv6.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/IcmpTypeNsServiceTag:IcmpTypeNsServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this service.\n"
                }
            },
            "requiredInputs": [
                "protocol"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IcmpTypeNsService resources.\n",
                "properties": {
                    "defaultService": {
                        "type": "boolean",
                        "description": "The default NSServices are created in the system by default. These NSServices can't be modified/deleted.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name, defaults to ID if not set.\n"
                    },
                    "icmpCode": {
                        "type": "integer",
                        "description": "ICMP message code\n"
                    },
                    "icmpType": {
                        "type": "integer",
                        "description": "ICMP message type.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Version of ICMP protocol ICMPv4 or ICMPv6.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/IcmpTypeNsServiceTag:IcmpTypeNsServiceTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this service.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/igmpTypeNsService:IgmpTypeNsService": {
            "properties": {
                "defaultService": {
                    "type": "boolean",
                    "description": "The default NSServices are created in the system by default. These NSServices can't be modified/deleted.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/IgmpTypeNsServiceTag:IgmpTypeNsServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this service.\n"
                }
            },
            "required": [
                "defaultService",
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/IgmpTypeNsServiceTag:IgmpTypeNsServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this service.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IgmpTypeNsService resources.\n",
                "properties": {
                    "defaultService": {
                        "type": "boolean",
                        "description": "The default NSServices are created in the system by default. These NSServices can't be modified/deleted.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name, defaults to ID if not set.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/IgmpTypeNsServiceTag:IgmpTypeNsServiceTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this service.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/ipBlock:IpBlock": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "description": "Represents network address and the prefix length which will be associated with a layer-2 broadcast domain.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/IpBlockTag:IpBlockTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this IP block.\n"
                }
            },
            "required": [
                "cidr",
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "cidr": {
                    "type": "string",
                    "description": "Represents network address and the prefix length which will be associated with a layer-2 broadcast domain.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/IpBlockTag:IpBlockTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this IP block.\n"
                }
            },
            "requiredInputs": [
                "cidr"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpBlock resources.\n",
                "properties": {
                    "cidr": {
                        "type": "string",
                        "description": "Represents network address and the prefix length which will be associated with a layer-2 broadcast domain.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/IpBlockTag:IpBlockTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this IP block.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/ipBlockSubnet:IpBlockSubnet": {
            "properties": {
                "allocationRanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/IpBlockSubnetAllocationRange:IpBlockSubnetAllocationRange"
                    },
                    "description": "A collection of IPv4 Pool Ranges\n"
                },
                "blockId": {
                    "type": "string",
                    "description": "Block id for which the subnet is created.\n"
                },
                "cidr": {
                    "type": "string",
                    "description": "Represents the size or number of IP addresses in the subnet. All subnets of the same block must have the same size, which must be a power of 2.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "Represents the size or number of IP addresses in the subnet.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/IpBlockSubnetTag:IpBlockSubnetTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this IP block subnet.\n"
                }
            },
            "required": [
                "allocationRanges",
                "blockId",
                "cidr",
                "displayName",
                "revision",
                "size"
            ],
            "inputProperties": {
                "blockId": {
                    "type": "string",
                    "description": "Block id for which the subnet is created.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n",
                    "willReplaceOnChanges": true
                },
                "size": {
                    "type": "integer",
                    "description": "Represents the size or number of IP addresses in the subnet.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/IpBlockSubnetTag:IpBlockSubnetTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this IP block subnet.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "blockId",
                "size"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpBlockSubnet resources.\n",
                "properties": {
                    "allocationRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/IpBlockSubnetAllocationRange:IpBlockSubnetAllocationRange"
                        },
                        "description": "A collection of IPv4 Pool Ranges\n"
                    },
                    "blockId": {
                        "type": "string",
                        "description": "Block id for which the subnet is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "cidr": {
                        "type": "string",
                        "description": "Represents the size or number of IP addresses in the subnet. All subnets of the same block must have the same size, which must be a power of 2.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n",
                        "willReplaceOnChanges": true
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Represents the size or number of IP addresses in the subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/IpBlockSubnetTag:IpBlockSubnetTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this IP block subnet.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/ipDiscoverySwitchingProfile:IpDiscoverySwitchingProfile": {
            "properties": {
                "arpBindingsLimit": {
                    "type": "integer",
                    "description": "Limit for the amount of ARP bindings.\n"
                },
                "arpSnoopingEnabled": {
                    "type": "boolean",
                    "description": "A boolean flag iIndicates whether ARP snooping is enabled.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "dhcpSnoopingEnabled": {
                    "type": "boolean",
                    "description": "A boolean flag iIndicates whether DHCP snooping is enabled.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/IpDiscoverySwitchingProfileTag:IpDiscoverySwitchingProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this IP discovery switching profile.\n"
                },
                "vmToolsEnabled": {
                    "type": "boolean",
                    "description": "A boolean flag iIndicates whether VM tools will be enabled. This option is only supported on ESX where vm-tools is installed.\n"
                }
            },
            "required": [
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "arpBindingsLimit": {
                    "type": "integer",
                    "description": "Limit for the amount of ARP bindings.\n"
                },
                "arpSnoopingEnabled": {
                    "type": "boolean",
                    "description": "A boolean flag iIndicates whether ARP snooping is enabled.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "dhcpSnoopingEnabled": {
                    "type": "boolean",
                    "description": "A boolean flag iIndicates whether DHCP snooping is enabled.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/IpDiscoverySwitchingProfileTag:IpDiscoverySwitchingProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this IP discovery switching profile.\n"
                },
                "vmToolsEnabled": {
                    "type": "boolean",
                    "description": "A boolean flag iIndicates whether VM tools will be enabled. This option is only supported on ESX where vm-tools is installed.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpDiscoverySwitchingProfile resources.\n",
                "properties": {
                    "arpBindingsLimit": {
                        "type": "integer",
                        "description": "Limit for the amount of ARP bindings.\n"
                    },
                    "arpSnoopingEnabled": {
                        "type": "boolean",
                        "description": "A boolean flag iIndicates whether ARP snooping is enabled.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "dhcpSnoopingEnabled": {
                        "type": "boolean",
                        "description": "A boolean flag iIndicates whether DHCP snooping is enabled.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/IpDiscoverySwitchingProfileTag:IpDiscoverySwitchingProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this IP discovery switching profile.\n"
                    },
                    "vmToolsEnabled": {
                        "type": "boolean",
                        "description": "A boolean flag iIndicates whether VM tools will be enabled. This option is only supported on ESX where vm-tools is installed.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/ipPool:IpPool": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/IpPoolSubnet:IpPoolSubnet"
                    },
                    "description": "Subnets can be IPv4 or IPv6 and they should not overlap. The maximum number will not exceed 5 subnets. Each subnet has the following arguments:\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/IpPoolTag:IpPoolTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this IP pool.\n"
                }
            },
            "required": [
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/IpPoolSubnet:IpPoolSubnet"
                    },
                    "description": "Subnets can be IPv4 or IPv6 and they should not overlap. The maximum number will not exceed 5 subnets. Each subnet has the following arguments:\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/IpPoolTag:IpPoolTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this IP pool.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpPool resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "subnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/IpPoolSubnet:IpPoolSubnet"
                        },
                        "description": "Subnets can be IPv4 or IPv6 and they should not overlap. The maximum number will not exceed 5 subnets. Each subnet has the following arguments:\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/IpPoolTag:IpPoolTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this IP pool.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/ipPoolAllocationIpAddress:IpPoolAllocationIpAddress": {
            "properties": {
                "allocationId": {
                    "type": "string",
                    "description": "IP Address that is allocated from the pool\n"
                },
                "ipPoolId": {
                    "type": "string",
                    "description": "Ip Pool ID from which the IP address will be allocated.\n"
                }
            },
            "required": [
                "allocationId",
                "ipPoolId"
            ],
            "inputProperties": {
                "allocationId": {
                    "type": "string",
                    "description": "IP Address that is allocated from the pool\n",
                    "willReplaceOnChanges": true
                },
                "ipPoolId": {
                    "type": "string",
                    "description": "Ip Pool ID from which the IP address will be allocated.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "ipPoolId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpPoolAllocationIpAddress resources.\n",
                "properties": {
                    "allocationId": {
                        "type": "string",
                        "description": "IP Address that is allocated from the pool\n",
                        "willReplaceOnChanges": true
                    },
                    "ipPoolId": {
                        "type": "string",
                        "description": "Ip Pool ID from which the IP address will be allocated.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/ipProtocolNsService:IpProtocolNsService": {
            "properties": {
                "defaultService": {
                    "type": "boolean",
                    "description": "The default NSServices are created in the system by default. These NSServices can't be modified/deleted.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "protocol": {
                    "type": "integer",
                    "description": "IP protocol number (0-255)\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/IpProtocolNsServiceTag:IpProtocolNsServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this service.\n"
                }
            },
            "required": [
                "defaultService",
                "displayName",
                "protocol",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "protocol": {
                    "type": "integer",
                    "description": "IP protocol number (0-255)\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/IpProtocolNsServiceTag:IpProtocolNsServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this service.\n"
                }
            },
            "requiredInputs": [
                "protocol"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpProtocolNsService resources.\n",
                "properties": {
                    "defaultService": {
                        "type": "boolean",
                        "description": "The default NSServices are created in the system by default. These NSServices can't be modified/deleted.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name, defaults to ID if not set.\n"
                    },
                    "protocol": {
                        "type": "integer",
                        "description": "IP protocol number (0-255)\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/IpProtocolNsServiceTag:IpProtocolNsServiceTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this service.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/ipSet:IpSet": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IP addresses.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/IpSetTag:IpSetTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this IP set.\n"
                }
            },
            "required": [
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IP addresses.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/IpSetTag:IpSetTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this IP set.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpSet resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IP addresses.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/IpSetTag:IpSetTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this IP set.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/l4PortSetNsService:L4PortSetNsService": {
            "properties": {
                "defaultService": {
                    "type": "boolean",
                    "description": "The default NSServices are created in the system by default. These NSServices can't be modified/deleted.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "destinationPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of destination ports.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "L4 protocol. Accepted values - 'TCP' or 'UDP'.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "sourcePorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of source ports.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/L4PortSetNsServiceTag:L4PortSetNsServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this service.\n"
                }
            },
            "required": [
                "defaultService",
                "displayName",
                "protocol",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "destinationPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of destination ports.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "L4 protocol. Accepted values - 'TCP' or 'UDP'.\n"
                },
                "sourcePorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of source ports.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/L4PortSetNsServiceTag:L4PortSetNsServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this service.\n"
                }
            },
            "requiredInputs": [
                "protocol"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering L4PortSetNsService resources.\n",
                "properties": {
                    "defaultService": {
                        "type": "boolean",
                        "description": "The default NSServices are created in the system by default. These NSServices can't be modified/deleted.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "destinationPorts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of destination ports.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name, defaults to ID if not set.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "L4 protocol. Accepted values - 'TCP' or 'UDP'.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "sourcePorts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of source ports.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/L4PortSetNsServiceTag:L4PortSetNsServiceTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this service.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbClientSslProfile:LbClientSslProfile": {
            "properties": {
                "ciphers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "supported SSL cipher list to client side. The supported ciphers can contain: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "isSecure": {
                    "type": "boolean",
                    "description": "This flag is set to true when all the ciphers and protocols are secure. It is set to false when one of the ciphers or protocols is insecure.\n"
                },
                "preferServerCiphers": {
                    "type": "boolean",
                    "description": "During SSL handshake as part of the SSL client Hello client sends an ordered list of ciphers that it can support (or prefers) and typically server selects the first one from the top of that list it can also support. For Perfect Forward Secrecy(PFS), server could override the client's preference. Defaults to false.\n"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSL versions TLS_V1_1 and TLS_V1_2 are supported and enabled by default. SSL_V2, SSL_V3, and TLS_V1 are supported, but disabled by default.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "sessionCacheEnabled": {
                    "type": "boolean",
                    "description": "SSL session caching allows SSL client and server to reuse previously negotiated security parameters avoiding the expensive public key operation during handshake. Defaults to true.\n"
                },
                "sessionCacheTimeout": {
                    "type": "integer",
                    "description": "Session cache timeout specifies how long the SSL session parameters are held on to and can be reused. Default value is 300.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbClientSslProfileTag:LbClientSslProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb client ssl profile.\n"
                }
            },
            "required": [
                "ciphers",
                "displayName",
                "isSecure",
                "protocols",
                "revision"
            ],
            "inputProperties": {
                "ciphers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "supported SSL cipher list to client side. The supported ciphers can contain: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "preferServerCiphers": {
                    "type": "boolean",
                    "description": "During SSL handshake as part of the SSL client Hello client sends an ordered list of ciphers that it can support (or prefers) and typically server selects the first one from the top of that list it can also support. For Perfect Forward Secrecy(PFS), server could override the client's preference. Defaults to false.\n"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSL versions TLS_V1_1 and TLS_V1_2 are supported and enabled by default. SSL_V2, SSL_V3, and TLS_V1 are supported, but disabled by default.\n"
                },
                "sessionCacheEnabled": {
                    "type": "boolean",
                    "description": "SSL session caching allows SSL client and server to reuse previously negotiated security parameters avoiding the expensive public key operation during handshake. Defaults to true.\n"
                },
                "sessionCacheTimeout": {
                    "type": "integer",
                    "description": "Session cache timeout specifies how long the SSL session parameters are held on to and can be reused. Default value is 300.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbClientSslProfileTag:LbClientSslProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb client ssl profile.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbClientSslProfile resources.\n",
                "properties": {
                    "ciphers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "supported SSL cipher list to client side. The supported ciphers can contain: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "isSecure": {
                        "type": "boolean",
                        "description": "This flag is set to true when all the ciphers and protocols are secure. It is set to false when one of the ciphers or protocols is insecure.\n"
                    },
                    "preferServerCiphers": {
                        "type": "boolean",
                        "description": "During SSL handshake as part of the SSL client Hello client sends an ordered list of ciphers that it can support (or prefers) and typically server selects the first one from the top of that list it can also support. For Perfect Forward Secrecy(PFS), server could override the client's preference. Defaults to false.\n"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "SSL versions TLS_V1_1 and TLS_V1_2 are supported and enabled by default. SSL_V2, SSL_V3, and TLS_V1 are supported, but disabled by default.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "sessionCacheEnabled": {
                        "type": "boolean",
                        "description": "SSL session caching allows SSL client and server to reuse previously negotiated security parameters avoiding the expensive public key operation during handshake. Defaults to true.\n"
                    },
                    "sessionCacheTimeout": {
                        "type": "integer",
                        "description": "Session cache timeout specifies how long the SSL session parameters are held on to and can be reused. Default value is 300.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbClientSslProfileTag:LbClientSslProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb client ssl profile.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbCookiePersistenceProfile:LbCookiePersistenceProfile": {
            "properties": {
                "cookieFallback": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether once the server points by this cookie is down, a new server is selected, or the requests will be rejected.\n"
                },
                "cookieGarble": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether the cookie value (server IP and port) would be encrypted or in plain text.\n"
                },
                "cookieMode": {
                    "type": "string",
                    "description": "The cookie persistence mode. Accepted values: PREFIX, REWRITE and INSERT which is the default.\n"
                },
                "cookieName": {
                    "type": "string",
                    "description": "cookie name.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "insertModeParams": {
                    "$ref": "#/types/nsxt:index/LbCookiePersistenceProfileInsertModeParams:LbCookiePersistenceProfileInsertModeParams",
                    "description": "Additional parameters for the INSERT cookie mode:\n"
                },
                "persistenceShared": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether the cookie persistence is private or shared. When false (which is the default value), the cookie persistence is private to each virtual server and is qualified by the pool. If set to true, in cookie insert mode, cookie persistence could be shared across multiple virtual servers that are bound to the same pools.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbCookiePersistenceProfileTag:LbCookiePersistenceProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb cookie persistence profile.\n"
                }
            },
            "required": [
                "cookieName",
                "displayName",
                "insertModeParams",
                "revision"
            ],
            "inputProperties": {
                "cookieFallback": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether once the server points by this cookie is down, a new server is selected, or the requests will be rejected.\n"
                },
                "cookieGarble": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether the cookie value (server IP and port) would be encrypted or in plain text.\n"
                },
                "cookieMode": {
                    "type": "string",
                    "description": "The cookie persistence mode. Accepted values: PREFIX, REWRITE and INSERT which is the default.\n"
                },
                "cookieName": {
                    "type": "string",
                    "description": "cookie name.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "insertModeParams": {
                    "$ref": "#/types/nsxt:index/LbCookiePersistenceProfileInsertModeParams:LbCookiePersistenceProfileInsertModeParams",
                    "description": "Additional parameters for the INSERT cookie mode:\n"
                },
                "persistenceShared": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether the cookie persistence is private or shared. When false (which is the default value), the cookie persistence is private to each virtual server and is qualified by the pool. If set to true, in cookie insert mode, cookie persistence could be shared across multiple virtual servers that are bound to the same pools.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbCookiePersistenceProfileTag:LbCookiePersistenceProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb cookie persistence profile.\n"
                }
            },
            "requiredInputs": [
                "cookieName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbCookiePersistenceProfile resources.\n",
                "properties": {
                    "cookieFallback": {
                        "type": "boolean",
                        "description": "A boolean flag which reflects whether once the server points by this cookie is down, a new server is selected, or the requests will be rejected.\n"
                    },
                    "cookieGarble": {
                        "type": "boolean",
                        "description": "A boolean flag which reflects whether the cookie value (server IP and port) would be encrypted or in plain text.\n"
                    },
                    "cookieMode": {
                        "type": "string",
                        "description": "The cookie persistence mode. Accepted values: PREFIX, REWRITE and INSERT which is the default.\n"
                    },
                    "cookieName": {
                        "type": "string",
                        "description": "cookie name.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "insertModeParams": {
                        "$ref": "#/types/nsxt:index/LbCookiePersistenceProfileInsertModeParams:LbCookiePersistenceProfileInsertModeParams",
                        "description": "Additional parameters for the INSERT cookie mode:\n"
                    },
                    "persistenceShared": {
                        "type": "boolean",
                        "description": "A boolean flag which reflects whether the cookie persistence is private or shared. When false (which is the default value), the cookie persistence is private to each virtual server and is qualified by the pool. If set to true, in cookie insert mode, cookie persistence could be shared across multiple virtual servers that are bound to the same pools.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbCookiePersistenceProfileTag:LbCookiePersistenceProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb cookie persistence profile.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbFastTcpApplicationProfile:LbFastTcpApplicationProfile": {
            "properties": {
                "closeTimeout": {
                    "type": "integer",
                    "description": "Timeout in seconds to specify how long a closed TCP connection should be kept for this application before cleaning up the connection. Value can range between 1-60, with a default of 8 seconds.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "haFlowMirroring": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether flow mirroring is enabled, and all the flows to the bounded virtual server are mirrored to the standby node. By default this is disabled.\n"
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "Timeout in seconds to specify how long an idle TCP connection in ESTABLISHED state should be kept for this application before cleaning up. The default value will be 1800 seconds\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbFastTcpApplicationProfileTag:LbFastTcpApplicationProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb fast tcp profile.\n"
                }
            },
            "required": [
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "closeTimeout": {
                    "type": "integer",
                    "description": "Timeout in seconds to specify how long a closed TCP connection should be kept for this application before cleaning up the connection. Value can range between 1-60, with a default of 8 seconds.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "haFlowMirroring": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether flow mirroring is enabled, and all the flows to the bounded virtual server are mirrored to the standby node. By default this is disabled.\n"
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "Timeout in seconds to specify how long an idle TCP connection in ESTABLISHED state should be kept for this application before cleaning up. The default value will be 1800 seconds\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbFastTcpApplicationProfileTag:LbFastTcpApplicationProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb fast tcp profile.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbFastTcpApplicationProfile resources.\n",
                "properties": {
                    "closeTimeout": {
                        "type": "integer",
                        "description": "Timeout in seconds to specify how long a closed TCP connection should be kept for this application before cleaning up the connection. Value can range between 1-60, with a default of 8 seconds.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "haFlowMirroring": {
                        "type": "boolean",
                        "description": "A boolean flag which reflects whether flow mirroring is enabled, and all the flows to the bounded virtual server are mirrored to the standby node. By default this is disabled.\n"
                    },
                    "idleTimeout": {
                        "type": "integer",
                        "description": "Timeout in seconds to specify how long an idle TCP connection in ESTABLISHED state should be kept for this application before cleaning up. The default value will be 1800 seconds\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbFastTcpApplicationProfileTag:LbFastTcpApplicationProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb fast tcp profile.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbFastUdpApplicationProfile:LbFastUdpApplicationProfile": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "haFlowMirroring": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether flow mirroring is enabled, and all the flows to the bounded virtual server are mirrored to the standby node. By default this is disabled.\n"
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "Timeout in seconds to specify how long an idle UDP connection in ESTABLISHED state should be kept for this application before cleaning up. The default value will be 300 seconds\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbFastUdpApplicationProfileTag:LbFastUdpApplicationProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb fast udp profile.\n"
                }
            },
            "required": [
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "haFlowMirroring": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether flow mirroring is enabled, and all the flows to the bounded virtual server are mirrored to the standby node. By default this is disabled.\n"
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "Timeout in seconds to specify how long an idle UDP connection in ESTABLISHED state should be kept for this application before cleaning up. The default value will be 300 seconds\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbFastUdpApplicationProfileTag:LbFastUdpApplicationProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb fast udp profile.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbFastUdpApplicationProfile resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "haFlowMirroring": {
                        "type": "boolean",
                        "description": "A boolean flag which reflects whether flow mirroring is enabled, and all the flows to the bounded virtual server are mirrored to the standby node. By default this is disabled.\n"
                    },
                    "idleTimeout": {
                        "type": "integer",
                        "description": "Timeout in seconds to specify how long an idle UDP connection in ESTABLISHED state should be kept for this application before cleaning up. The default value will be 300 seconds\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbFastUdpApplicationProfileTag:LbFastUdpApplicationProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb fast udp profile.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbHttpApplicationProfile:LbHttpApplicationProfile": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "httpRedirectTo": {
                    "type": "string",
                    "description": "A URL that incoming requests for that virtual server can be temporarily redirected to, If a website is temporarily down or has moved. When set, http_redirect_to_https should be false.\n"
                },
                "httpRedirectToHttps": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether the client will automatically be redirected to use SSL. When true, the http_redirect_to should not be specified.\n"
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "Timeout in seconds to specify how long an HTTP application can remain idle. Defaults to 15 seconds.\n"
                },
                "ntlm": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether NTLM challenge/response methodology will be used over HTTP. Can be set to true only if http_redirect_to_https is false.\n"
                },
                "requestBodySize": {
                    "type": "integer",
                    "description": "Maximum request body size in bytes. If it is not specified, it means that request body size is unlimited.\n"
                },
                "requestHeaderSize": {
                    "type": "integer",
                    "description": "Maximum request header size in bytes. Requests with larger header size will be processed as best effort whereas a request with header below this specified size is guaranteed to be processed. Defaults to 1024 bytes.\n"
                },
                "responseTimeout": {
                    "type": "integer",
                    "description": "Number of seconds waiting for the server response before the connection is closed. Defaults to 60 seconds.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpApplicationProfileTag:LbHttpApplicationProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb http profile.\n"
                },
                "xForwardedFor": {
                    "type": "string",
                    "description": "When this value is set, the x_forwarded_for header in the incoming request will be inserted or replaced. Supported values are \"INSERT\" and \"REPLACE\".\n"
                }
            },
            "required": [
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "httpRedirectTo": {
                    "type": "string",
                    "description": "A URL that incoming requests for that virtual server can be temporarily redirected to, If a website is temporarily down or has moved. When set, http_redirect_to_https should be false.\n"
                },
                "httpRedirectToHttps": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether the client will automatically be redirected to use SSL. When true, the http_redirect_to should not be specified.\n"
                },
                "idleTimeout": {
                    "type": "integer",
                    "description": "Timeout in seconds to specify how long an HTTP application can remain idle. Defaults to 15 seconds.\n"
                },
                "ntlm": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether NTLM challenge/response methodology will be used over HTTP. Can be set to true only if http_redirect_to_https is false.\n"
                },
                "requestBodySize": {
                    "type": "integer",
                    "description": "Maximum request body size in bytes. If it is not specified, it means that request body size is unlimited.\n"
                },
                "requestHeaderSize": {
                    "type": "integer",
                    "description": "Maximum request header size in bytes. Requests with larger header size will be processed as best effort whereas a request with header below this specified size is guaranteed to be processed. Defaults to 1024 bytes.\n"
                },
                "responseTimeout": {
                    "type": "integer",
                    "description": "Number of seconds waiting for the server response before the connection is closed. Defaults to 60 seconds.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpApplicationProfileTag:LbHttpApplicationProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb http profile.\n"
                },
                "xForwardedFor": {
                    "type": "string",
                    "description": "When this value is set, the x_forwarded_for header in the incoming request will be inserted or replaced. Supported values are \"INSERT\" and \"REPLACE\".\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbHttpApplicationProfile resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "httpRedirectTo": {
                        "type": "string",
                        "description": "A URL that incoming requests for that virtual server can be temporarily redirected to, If a website is temporarily down or has moved. When set, http_redirect_to_https should be false.\n"
                    },
                    "httpRedirectToHttps": {
                        "type": "boolean",
                        "description": "A boolean flag which reflects whether the client will automatically be redirected to use SSL. When true, the http_redirect_to should not be specified.\n"
                    },
                    "idleTimeout": {
                        "type": "integer",
                        "description": "Timeout in seconds to specify how long an HTTP application can remain idle. Defaults to 15 seconds.\n"
                    },
                    "ntlm": {
                        "type": "boolean",
                        "description": "A boolean flag which reflects whether NTLM challenge/response methodology will be used over HTTP. Can be set to true only if http_redirect_to_https is false.\n"
                    },
                    "requestBodySize": {
                        "type": "integer",
                        "description": "Maximum request body size in bytes. If it is not specified, it means that request body size is unlimited.\n"
                    },
                    "requestHeaderSize": {
                        "type": "integer",
                        "description": "Maximum request header size in bytes. Requests with larger header size will be processed as best effort whereas a request with header below this specified size is guaranteed to be processed. Defaults to 1024 bytes.\n"
                    },
                    "responseTimeout": {
                        "type": "integer",
                        "description": "Number of seconds waiting for the server response before the connection is closed. Defaults to 60 seconds.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpApplicationProfileTag:LbHttpApplicationProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb http profile.\n"
                    },
                    "xForwardedFor": {
                        "type": "string",
                        "description": "When this value is set, the x_forwarded_for header in the incoming request will be inserted or replaced. Supported values are \"INSERT\" and \"REPLACE\".\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbHttpForwardingRule:LbHttpForwardingRule": {
            "properties": {
                "bodyConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpForwardingRuleBodyCondition:LbHttpForwardingRuleBodyCondition"
                    },
                    "description": "Set of match conditions used to match http request body:\n"
                },
                "cookieConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpForwardingRuleCookieCondition:LbHttpForwardingRuleCookieCondition"
                    },
                    "description": "Set of match conditions used to match http request cookie:\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "headerConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpForwardingRuleHeaderCondition:LbHttpForwardingRuleHeaderCondition"
                    },
                    "description": "Set of match conditions used to match http request header:\n"
                },
                "httpRedirectAction": {
                    "$ref": "#/types/nsxt:index/LbHttpForwardingRuleHttpRedirectAction:LbHttpForwardingRuleHttpRedirectAction",
                    "description": "Set of http redirect actions to be executed when load balancer rule matches:\n"
                },
                "httpRejectAction": {
                    "$ref": "#/types/nsxt:index/LbHttpForwardingRuleHttpRejectAction:LbHttpForwardingRuleHttpRejectAction",
                    "description": "Set of http reject actions to be executed when load balancer rule matches:\n"
                },
                "ipConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpForwardingRuleIpCondition:LbHttpForwardingRuleIpCondition"
                    },
                    "description": "Set of match conditions used to match IP header values of HTTP request:\n"
                },
                "matchStrategy": {
                    "type": "string",
                    "description": "Strategy to define how load balancer rule is considered a match when multiple match conditions are specified in one rule. If set to ALL, then load balancer rule is considered a match only if all the conditions match. If set to ANY, then load balancer rule is considered a match if any one of the conditions match.\n"
                },
                "methodConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpForwardingRuleMethodCondition:LbHttpForwardingRuleMethodCondition"
                    },
                    "description": "Set of match conditions used to match http request method:\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "selectPoolAction": {
                    "$ref": "#/types/nsxt:index/LbHttpForwardingRuleSelectPoolAction:LbHttpForwardingRuleSelectPoolAction",
                    "description": "Set of pool selection actions to be executed when load balancer rule matches:\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpForwardingRuleTag:LbHttpForwardingRuleTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb rule.\n"
                },
                "tcpConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpForwardingRuleTcpCondition:LbHttpForwardingRuleTcpCondition"
                    },
                    "description": "Rule condition based on TCP settings of the message\n"
                },
                "uriConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpForwardingRuleUriCondition:LbHttpForwardingRuleUriCondition"
                    },
                    "description": "Set of match conditions used to match http request URI:\n"
                },
                "versionCondition": {
                    "$ref": "#/types/nsxt:index/LbHttpForwardingRuleVersionCondition:LbHttpForwardingRuleVersionCondition",
                    "description": "Match condition used to match http version of the request:\n"
                }
            },
            "required": [
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "bodyConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpForwardingRuleBodyCondition:LbHttpForwardingRuleBodyCondition"
                    },
                    "description": "Set of match conditions used to match http request body:\n"
                },
                "cookieConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpForwardingRuleCookieCondition:LbHttpForwardingRuleCookieCondition"
                    },
                    "description": "Set of match conditions used to match http request cookie:\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "headerConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpForwardingRuleHeaderCondition:LbHttpForwardingRuleHeaderCondition"
                    },
                    "description": "Set of match conditions used to match http request header:\n"
                },
                "httpRedirectAction": {
                    "$ref": "#/types/nsxt:index/LbHttpForwardingRuleHttpRedirectAction:LbHttpForwardingRuleHttpRedirectAction",
                    "description": "Set of http redirect actions to be executed when load balancer rule matches:\n"
                },
                "httpRejectAction": {
                    "$ref": "#/types/nsxt:index/LbHttpForwardingRuleHttpRejectAction:LbHttpForwardingRuleHttpRejectAction",
                    "description": "Set of http reject actions to be executed when load balancer rule matches:\n"
                },
                "ipConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpForwardingRuleIpCondition:LbHttpForwardingRuleIpCondition"
                    },
                    "description": "Set of match conditions used to match IP header values of HTTP request:\n"
                },
                "matchStrategy": {
                    "type": "string",
                    "description": "Strategy to define how load balancer rule is considered a match when multiple match conditions are specified in one rule. If set to ALL, then load balancer rule is considered a match only if all the conditions match. If set to ANY, then load balancer rule is considered a match if any one of the conditions match.\n"
                },
                "methodConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpForwardingRuleMethodCondition:LbHttpForwardingRuleMethodCondition"
                    },
                    "description": "Set of match conditions used to match http request method:\n"
                },
                "selectPoolAction": {
                    "$ref": "#/types/nsxt:index/LbHttpForwardingRuleSelectPoolAction:LbHttpForwardingRuleSelectPoolAction",
                    "description": "Set of pool selection actions to be executed when load balancer rule matches:\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpForwardingRuleTag:LbHttpForwardingRuleTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb rule.\n"
                },
                "tcpConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpForwardingRuleTcpCondition:LbHttpForwardingRuleTcpCondition"
                    },
                    "description": "Rule condition based on TCP settings of the message\n"
                },
                "uriConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpForwardingRuleUriCondition:LbHttpForwardingRuleUriCondition"
                    },
                    "description": "Set of match conditions used to match http request URI:\n"
                },
                "versionCondition": {
                    "$ref": "#/types/nsxt:index/LbHttpForwardingRuleVersionCondition:LbHttpForwardingRuleVersionCondition",
                    "description": "Match condition used to match http version of the request:\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbHttpForwardingRule resources.\n",
                "properties": {
                    "bodyConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpForwardingRuleBodyCondition:LbHttpForwardingRuleBodyCondition"
                        },
                        "description": "Set of match conditions used to match http request body:\n"
                    },
                    "cookieConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpForwardingRuleCookieCondition:LbHttpForwardingRuleCookieCondition"
                        },
                        "description": "Set of match conditions used to match http request cookie:\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "headerConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpForwardingRuleHeaderCondition:LbHttpForwardingRuleHeaderCondition"
                        },
                        "description": "Set of match conditions used to match http request header:\n"
                    },
                    "httpRedirectAction": {
                        "$ref": "#/types/nsxt:index/LbHttpForwardingRuleHttpRedirectAction:LbHttpForwardingRuleHttpRedirectAction",
                        "description": "Set of http redirect actions to be executed when load balancer rule matches:\n"
                    },
                    "httpRejectAction": {
                        "$ref": "#/types/nsxt:index/LbHttpForwardingRuleHttpRejectAction:LbHttpForwardingRuleHttpRejectAction",
                        "description": "Set of http reject actions to be executed when load balancer rule matches:\n"
                    },
                    "ipConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpForwardingRuleIpCondition:LbHttpForwardingRuleIpCondition"
                        },
                        "description": "Set of match conditions used to match IP header values of HTTP request:\n"
                    },
                    "matchStrategy": {
                        "type": "string",
                        "description": "Strategy to define how load balancer rule is considered a match when multiple match conditions are specified in one rule. If set to ALL, then load balancer rule is considered a match only if all the conditions match. If set to ANY, then load balancer rule is considered a match if any one of the conditions match.\n"
                    },
                    "methodConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpForwardingRuleMethodCondition:LbHttpForwardingRuleMethodCondition"
                        },
                        "description": "Set of match conditions used to match http request method:\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "selectPoolAction": {
                        "$ref": "#/types/nsxt:index/LbHttpForwardingRuleSelectPoolAction:LbHttpForwardingRuleSelectPoolAction",
                        "description": "Set of pool selection actions to be executed when load balancer rule matches:\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpForwardingRuleTag:LbHttpForwardingRuleTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb rule.\n"
                    },
                    "tcpConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpForwardingRuleTcpCondition:LbHttpForwardingRuleTcpCondition"
                        },
                        "description": "Rule condition based on TCP settings of the message\n"
                    },
                    "uriConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpForwardingRuleUriCondition:LbHttpForwardingRuleUriCondition"
                        },
                        "description": "Set of match conditions used to match http request URI:\n"
                    },
                    "versionCondition": {
                        "$ref": "#/types/nsxt:index/LbHttpForwardingRuleVersionCondition:LbHttpForwardingRuleVersionCondition",
                        "description": "Match condition used to match http version of the request:\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbHttpMonitor:LbHttpMonitor": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "fallCount": {
                    "type": "integer",
                    "description": "Number of consecutive checks that must fail before marking it down.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "The frequency at which the system issues the monitor check (in seconds).\n"
                },
                "monitorPort": {
                    "type": "string",
                    "description": "If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not supported.\n"
                },
                "requestBody": {
                    "type": "string",
                    "description": "String to send as HTTP health check request body. Valid only for certain HTTP methods like POST.\n"
                },
                "requestHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpMonitorRequestHeader:LbHttpMonitorRequestHeader"
                    },
                    "description": "HTTP request headers.\n"
                },
                "requestMethod": {
                    "type": "string",
                    "description": "Health check method for HTTP monitor type. Valid values are GET, HEAD, PUT, POST and OPTIONS.\n"
                },
                "requestUrl": {
                    "type": "string",
                    "description": "URL used for HTTP monitor.\n"
                },
                "requestVersion": {
                    "type": "string",
                    "description": "HTTP request version. Valid values are HTTP_VERSION_1_0 and HTTP_VERSION_1_1.\n"
                },
                "responseBody": {
                    "type": "string",
                    "description": "If response body is specified, healthcheck HTTP response body is matched against the specified string and server is considered healthy only if there is a match (regular expressions not supported). If response body string is not specified, HTTP healthcheck is considered successful if the HTTP response status code is among configured values.\n"
                },
                "responseStatusCodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "HTTP response status code should be a valid HTTP status code.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "riseCount": {
                    "type": "integer",
                    "description": "Number of consecutive checks that must pass before marking it up.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpMonitorTag:LbHttpMonitorTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb http monitor.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Number of seconds the target has to respond to the monitor request.\n"
                }
            },
            "required": [
                "displayName",
                "responseStatusCodes",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "fallCount": {
                    "type": "integer",
                    "description": "Number of consecutive checks that must fail before marking it down.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "The frequency at which the system issues the monitor check (in seconds).\n"
                },
                "monitorPort": {
                    "type": "string",
                    "description": "If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not supported.\n"
                },
                "requestBody": {
                    "type": "string",
                    "description": "String to send as HTTP health check request body. Valid only for certain HTTP methods like POST.\n"
                },
                "requestHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpMonitorRequestHeader:LbHttpMonitorRequestHeader"
                    },
                    "description": "HTTP request headers.\n"
                },
                "requestMethod": {
                    "type": "string",
                    "description": "Health check method for HTTP monitor type. Valid values are GET, HEAD, PUT, POST and OPTIONS.\n"
                },
                "requestUrl": {
                    "type": "string",
                    "description": "URL used for HTTP monitor.\n"
                },
                "requestVersion": {
                    "type": "string",
                    "description": "HTTP request version. Valid values are HTTP_VERSION_1_0 and HTTP_VERSION_1_1.\n"
                },
                "responseBody": {
                    "type": "string",
                    "description": "If response body is specified, healthcheck HTTP response body is matched against the specified string and server is considered healthy only if there is a match (regular expressions not supported). If response body string is not specified, HTTP healthcheck is considered successful if the HTTP response status code is among configured values.\n"
                },
                "responseStatusCodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "HTTP response status code should be a valid HTTP status code.\n"
                },
                "riseCount": {
                    "type": "integer",
                    "description": "Number of consecutive checks that must pass before marking it up.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpMonitorTag:LbHttpMonitorTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb http monitor.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Number of seconds the target has to respond to the monitor request.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbHttpMonitor resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "fallCount": {
                        "type": "integer",
                        "description": "Number of consecutive checks that must fail before marking it down.\n"
                    },
                    "interval": {
                        "type": "integer",
                        "description": "The frequency at which the system issues the monitor check (in seconds).\n"
                    },
                    "monitorPort": {
                        "type": "string",
                        "description": "If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not supported.\n"
                    },
                    "requestBody": {
                        "type": "string",
                        "description": "String to send as HTTP health check request body. Valid only for certain HTTP methods like POST.\n"
                    },
                    "requestHeaders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpMonitorRequestHeader:LbHttpMonitorRequestHeader"
                        },
                        "description": "HTTP request headers.\n"
                    },
                    "requestMethod": {
                        "type": "string",
                        "description": "Health check method for HTTP monitor type. Valid values are GET, HEAD, PUT, POST and OPTIONS.\n"
                    },
                    "requestUrl": {
                        "type": "string",
                        "description": "URL used for HTTP monitor.\n"
                    },
                    "requestVersion": {
                        "type": "string",
                        "description": "HTTP request version. Valid values are HTTP_VERSION_1_0 and HTTP_VERSION_1_1.\n"
                    },
                    "responseBody": {
                        "type": "string",
                        "description": "If response body is specified, healthcheck HTTP response body is matched against the specified string and server is considered healthy only if there is a match (regular expressions not supported). If response body string is not specified, HTTP healthcheck is considered successful if the HTTP response status code is among configured values.\n"
                    },
                    "responseStatusCodes": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "HTTP response status code should be a valid HTTP status code.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "riseCount": {
                        "type": "integer",
                        "description": "Number of consecutive checks that must pass before marking it up.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpMonitorTag:LbHttpMonitorTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb http monitor.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "Number of seconds the target has to respond to the monitor request.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbHttpRequestRewriteRule:LbHttpRequestRewriteRule": {
            "properties": {
                "bodyConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleBodyCondition:LbHttpRequestRewriteRuleBodyCondition"
                    },
                    "description": "Set of match conditions used to match http request body:\n"
                },
                "cookieConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleCookieCondition:LbHttpRequestRewriteRuleCookieCondition"
                    },
                    "description": "Set of match conditions used to match http request cookie:\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "headerConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleHeaderCondition:LbHttpRequestRewriteRuleHeaderCondition"
                    },
                    "description": "Set of match conditions used to match http request header:\n"
                },
                "headerRewriteAction": {
                    "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleHeaderRewriteAction:LbHttpRequestRewriteRuleHeaderRewriteAction",
                    "description": "Set of header rewrite actions to be executed when load balancer rule matches:\n"
                },
                "ipConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleIpCondition:LbHttpRequestRewriteRuleIpCondition"
                    },
                    "description": "Set of match conditions used to match IP header values of HTTP request:\n"
                },
                "matchStrategy": {
                    "type": "string",
                    "description": "Strategy to define how load balancer rule is considered a match when multiple match conditions are specified in one rule. If set to ALL, then load balancer rule is considered a match only if all the conditions match. If set to ANY, then load balancer rule is considered a match if any one of the conditions match.\n"
                },
                "methodConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleMethodCondition:LbHttpRequestRewriteRuleMethodCondition"
                    },
                    "description": "Set of match conditions used to match http request method:\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleTag:LbHttpRequestRewriteRuleTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb rule.\n"
                },
                "tcpConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleTcpCondition:LbHttpRequestRewriteRuleTcpCondition"
                    },
                    "description": "Rule condition based on TCP settings of the message\n"
                },
                "uriArgumentsConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleUriArgumentsCondition:LbHttpRequestRewriteRuleUriArgumentsCondition"
                    },
                    "description": "Set of match conditions used to match http request URI arguments (query string):\n"
                },
                "uriConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleUriCondition:LbHttpRequestRewriteRuleUriCondition"
                    },
                    "description": "Set of match conditions used to match http request URI:\n"
                },
                "uriRewriteAction": {
                    "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleUriRewriteAction:LbHttpRequestRewriteRuleUriRewriteAction",
                    "description": "Set of URI rewrite actions to be executed when load balancer rule matches:\n"
                },
                "versionCondition": {
                    "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleVersionCondition:LbHttpRequestRewriteRuleVersionCondition",
                    "description": "Match condition used to match http version of the request:\n"
                }
            },
            "required": [
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "bodyConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleBodyCondition:LbHttpRequestRewriteRuleBodyCondition"
                    },
                    "description": "Set of match conditions used to match http request body:\n"
                },
                "cookieConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleCookieCondition:LbHttpRequestRewriteRuleCookieCondition"
                    },
                    "description": "Set of match conditions used to match http request cookie:\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "headerConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleHeaderCondition:LbHttpRequestRewriteRuleHeaderCondition"
                    },
                    "description": "Set of match conditions used to match http request header:\n"
                },
                "headerRewriteAction": {
                    "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleHeaderRewriteAction:LbHttpRequestRewriteRuleHeaderRewriteAction",
                    "description": "Set of header rewrite actions to be executed when load balancer rule matches:\n"
                },
                "ipConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleIpCondition:LbHttpRequestRewriteRuleIpCondition"
                    },
                    "description": "Set of match conditions used to match IP header values of HTTP request:\n"
                },
                "matchStrategy": {
                    "type": "string",
                    "description": "Strategy to define how load balancer rule is considered a match when multiple match conditions are specified in one rule. If set to ALL, then load balancer rule is considered a match only if all the conditions match. If set to ANY, then load balancer rule is considered a match if any one of the conditions match.\n"
                },
                "methodConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleMethodCondition:LbHttpRequestRewriteRuleMethodCondition"
                    },
                    "description": "Set of match conditions used to match http request method:\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleTag:LbHttpRequestRewriteRuleTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb rule.\n"
                },
                "tcpConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleTcpCondition:LbHttpRequestRewriteRuleTcpCondition"
                    },
                    "description": "Rule condition based on TCP settings of the message\n"
                },
                "uriArgumentsConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleUriArgumentsCondition:LbHttpRequestRewriteRuleUriArgumentsCondition"
                    },
                    "description": "Set of match conditions used to match http request URI arguments (query string):\n"
                },
                "uriConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleUriCondition:LbHttpRequestRewriteRuleUriCondition"
                    },
                    "description": "Set of match conditions used to match http request URI:\n"
                },
                "uriRewriteAction": {
                    "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleUriRewriteAction:LbHttpRequestRewriteRuleUriRewriteAction",
                    "description": "Set of URI rewrite actions to be executed when load balancer rule matches:\n"
                },
                "versionCondition": {
                    "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleVersionCondition:LbHttpRequestRewriteRuleVersionCondition",
                    "description": "Match condition used to match http version of the request:\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbHttpRequestRewriteRule resources.\n",
                "properties": {
                    "bodyConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleBodyCondition:LbHttpRequestRewriteRuleBodyCondition"
                        },
                        "description": "Set of match conditions used to match http request body:\n"
                    },
                    "cookieConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleCookieCondition:LbHttpRequestRewriteRuleCookieCondition"
                        },
                        "description": "Set of match conditions used to match http request cookie:\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "headerConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleHeaderCondition:LbHttpRequestRewriteRuleHeaderCondition"
                        },
                        "description": "Set of match conditions used to match http request header:\n"
                    },
                    "headerRewriteAction": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleHeaderRewriteAction:LbHttpRequestRewriteRuleHeaderRewriteAction",
                        "description": "Set of header rewrite actions to be executed when load balancer rule matches:\n"
                    },
                    "ipConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleIpCondition:LbHttpRequestRewriteRuleIpCondition"
                        },
                        "description": "Set of match conditions used to match IP header values of HTTP request:\n"
                    },
                    "matchStrategy": {
                        "type": "string",
                        "description": "Strategy to define how load balancer rule is considered a match when multiple match conditions are specified in one rule. If set to ALL, then load balancer rule is considered a match only if all the conditions match. If set to ANY, then load balancer rule is considered a match if any one of the conditions match.\n"
                    },
                    "methodConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleMethodCondition:LbHttpRequestRewriteRuleMethodCondition"
                        },
                        "description": "Set of match conditions used to match http request method:\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleTag:LbHttpRequestRewriteRuleTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb rule.\n"
                    },
                    "tcpConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleTcpCondition:LbHttpRequestRewriteRuleTcpCondition"
                        },
                        "description": "Rule condition based on TCP settings of the message\n"
                    },
                    "uriArgumentsConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleUriArgumentsCondition:LbHttpRequestRewriteRuleUriArgumentsCondition"
                        },
                        "description": "Set of match conditions used to match http request URI arguments (query string):\n"
                    },
                    "uriConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleUriCondition:LbHttpRequestRewriteRuleUriCondition"
                        },
                        "description": "Set of match conditions used to match http request URI:\n"
                    },
                    "uriRewriteAction": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleUriRewriteAction:LbHttpRequestRewriteRuleUriRewriteAction",
                        "description": "Set of URI rewrite actions to be executed when load balancer rule matches:\n"
                    },
                    "versionCondition": {
                        "$ref": "#/types/nsxt:index/LbHttpRequestRewriteRuleVersionCondition:LbHttpRequestRewriteRuleVersionCondition",
                        "description": "Match condition used to match http version of the request:\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbHttpResponseRewriteRule:LbHttpResponseRewriteRule": {
            "properties": {
                "cookieConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleCookieCondition:LbHttpResponseRewriteRuleCookieCondition"
                    },
                    "description": "Set of match conditions used to match http request cookie:\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "headerRewriteAction": {
                    "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleHeaderRewriteAction:LbHttpResponseRewriteRuleHeaderRewriteAction",
                    "description": "Set of header rewrite actions to be executed on the outgoing response when load balancer rule matches:\n"
                },
                "ipConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleIpCondition:LbHttpResponseRewriteRuleIpCondition"
                    },
                    "description": "Set of match conditions used to match IP header values of HTTP message:\n"
                },
                "matchStrategy": {
                    "type": "string",
                    "description": "Strategy to define how load balancer rule is considered a match when multiple match conditions are specified in one rule. If set to ALL, then load balancer rule is considered a match only if all the conditions match. If set to ANY, then load balancer rule is considered a match if any one of the conditions match.\n"
                },
                "methodConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleMethodCondition:LbHttpResponseRewriteRuleMethodCondition"
                    },
                    "description": "Set of match conditions used to match http request method:\n"
                },
                "requestHeaderConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleRequestHeaderCondition:LbHttpResponseRewriteRuleRequestHeaderCondition"
                    },
                    "description": "Set of match conditions used to match http request header:\n"
                },
                "responseHeaderConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleResponseHeaderCondition:LbHttpResponseRewriteRuleResponseHeaderCondition"
                    },
                    "description": "Set of match conditions used to match http response header:\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleTag:LbHttpResponseRewriteRuleTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb rule.\n"
                },
                "tcpConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleTcpCondition:LbHttpResponseRewriteRuleTcpCondition"
                    },
                    "description": "Rule condition based on TCP settings of the message\n"
                },
                "uriArgumentsConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleUriArgumentsCondition:LbHttpResponseRewriteRuleUriArgumentsCondition"
                    },
                    "description": "Set of match conditions used to match http request URI arguments (query string):\n"
                },
                "uriConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleUriCondition:LbHttpResponseRewriteRuleUriCondition"
                    },
                    "description": "Set of match conditions used to match http request URI:\n"
                },
                "versionCondition": {
                    "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleVersionCondition:LbHttpResponseRewriteRuleVersionCondition",
                    "description": "Match condition used to match http version of the request:\n"
                }
            },
            "required": [
                "displayName",
                "headerRewriteAction",
                "revision"
            ],
            "inputProperties": {
                "cookieConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleCookieCondition:LbHttpResponseRewriteRuleCookieCondition"
                    },
                    "description": "Set of match conditions used to match http request cookie:\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "headerRewriteAction": {
                    "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleHeaderRewriteAction:LbHttpResponseRewriteRuleHeaderRewriteAction",
                    "description": "Set of header rewrite actions to be executed on the outgoing response when load balancer rule matches:\n"
                },
                "ipConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleIpCondition:LbHttpResponseRewriteRuleIpCondition"
                    },
                    "description": "Set of match conditions used to match IP header values of HTTP message:\n"
                },
                "matchStrategy": {
                    "type": "string",
                    "description": "Strategy to define how load balancer rule is considered a match when multiple match conditions are specified in one rule. If set to ALL, then load balancer rule is considered a match only if all the conditions match. If set to ANY, then load balancer rule is considered a match if any one of the conditions match.\n"
                },
                "methodConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleMethodCondition:LbHttpResponseRewriteRuleMethodCondition"
                    },
                    "description": "Set of match conditions used to match http request method:\n"
                },
                "requestHeaderConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleRequestHeaderCondition:LbHttpResponseRewriteRuleRequestHeaderCondition"
                    },
                    "description": "Set of match conditions used to match http request header:\n"
                },
                "responseHeaderConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleResponseHeaderCondition:LbHttpResponseRewriteRuleResponseHeaderCondition"
                    },
                    "description": "Set of match conditions used to match http response header:\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleTag:LbHttpResponseRewriteRuleTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb rule.\n"
                },
                "tcpConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleTcpCondition:LbHttpResponseRewriteRuleTcpCondition"
                    },
                    "description": "Rule condition based on TCP settings of the message\n"
                },
                "uriArgumentsConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleUriArgumentsCondition:LbHttpResponseRewriteRuleUriArgumentsCondition"
                    },
                    "description": "Set of match conditions used to match http request URI arguments (query string):\n"
                },
                "uriConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleUriCondition:LbHttpResponseRewriteRuleUriCondition"
                    },
                    "description": "Set of match conditions used to match http request URI:\n"
                },
                "versionCondition": {
                    "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleVersionCondition:LbHttpResponseRewriteRuleVersionCondition",
                    "description": "Match condition used to match http version of the request:\n"
                }
            },
            "requiredInputs": [
                "headerRewriteAction"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbHttpResponseRewriteRule resources.\n",
                "properties": {
                    "cookieConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleCookieCondition:LbHttpResponseRewriteRuleCookieCondition"
                        },
                        "description": "Set of match conditions used to match http request cookie:\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "headerRewriteAction": {
                        "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleHeaderRewriteAction:LbHttpResponseRewriteRuleHeaderRewriteAction",
                        "description": "Set of header rewrite actions to be executed on the outgoing response when load balancer rule matches:\n"
                    },
                    "ipConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleIpCondition:LbHttpResponseRewriteRuleIpCondition"
                        },
                        "description": "Set of match conditions used to match IP header values of HTTP message:\n"
                    },
                    "matchStrategy": {
                        "type": "string",
                        "description": "Strategy to define how load balancer rule is considered a match when multiple match conditions are specified in one rule. If set to ALL, then load balancer rule is considered a match only if all the conditions match. If set to ANY, then load balancer rule is considered a match if any one of the conditions match.\n"
                    },
                    "methodConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleMethodCondition:LbHttpResponseRewriteRuleMethodCondition"
                        },
                        "description": "Set of match conditions used to match http request method:\n"
                    },
                    "requestHeaderConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleRequestHeaderCondition:LbHttpResponseRewriteRuleRequestHeaderCondition"
                        },
                        "description": "Set of match conditions used to match http request header:\n"
                    },
                    "responseHeaderConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleResponseHeaderCondition:LbHttpResponseRewriteRuleResponseHeaderCondition"
                        },
                        "description": "Set of match conditions used to match http response header:\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleTag:LbHttpResponseRewriteRuleTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb rule.\n"
                    },
                    "tcpConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleTcpCondition:LbHttpResponseRewriteRuleTcpCondition"
                        },
                        "description": "Rule condition based on TCP settings of the message\n"
                    },
                    "uriArgumentsConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleUriArgumentsCondition:LbHttpResponseRewriteRuleUriArgumentsCondition"
                        },
                        "description": "Set of match conditions used to match http request URI arguments (query string):\n"
                    },
                    "uriConditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleUriCondition:LbHttpResponseRewriteRuleUriCondition"
                        },
                        "description": "Set of match conditions used to match http request URI:\n"
                    },
                    "versionCondition": {
                        "$ref": "#/types/nsxt:index/LbHttpResponseRewriteRuleVersionCondition:LbHttpResponseRewriteRuleVersionCondition",
                        "description": "Match condition used to match http version of the request:\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbHttpVirtualServer:LbHttpVirtualServer": {
            "properties": {
                "accessLogEnabled": {
                    "type": "boolean",
                    "description": "Whether access log is enabled. Default is false.\n"
                },
                "applicationProfileId": {
                    "type": "string",
                    "description": "The application profile defines the application protocol characteristics.\n"
                },
                "clientSsl": {
                    "$ref": "#/types/nsxt:index/LbHttpVirtualServerClientSsl:LbHttpVirtualServerClientSsl",
                    "description": "Client side SSL customization.\n"
                },
                "defaultPoolMemberPort": {
                    "type": "string",
                    "description": "Default pool member port.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the virtual server is enabled. Default is true.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Virtual server IP address.\n"
                },
                "maxConcurrentConnections": {
                    "type": "integer",
                    "description": "To ensure one virtual server does not over consume resources, affecting other applications hosted on the same LBS, connections to a virtual server can be capped. If it is not specified, it means that connections are unlimited.\n"
                },
                "maxNewConnectionRate": {
                    "type": "integer",
                    "description": "To ensure one virtual server does not over consume resources, connections to a member can be rate limited. If it is not specified, it means that connection rate is unlimited.\n"
                },
                "persistenceProfileId": {
                    "type": "string",
                    "description": "Persistence profile is used to allow related client connections to be sent to the same backend server.\n"
                },
                "poolId": {
                    "type": "string",
                    "description": "Pool of backend servers. Server pool consists of one or more servers, also referred to as pool members, that are similarly configured and are running the same application.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Virtual server port.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "ruleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of load balancer rules that provide customization of load balancing behavior using match/action rules.\n"
                },
                "serverSsl": {
                    "$ref": "#/types/nsxt:index/LbHttpVirtualServerServerSsl:LbHttpVirtualServerServerSsl",
                    "description": "Server side SSL customization.\n"
                },
                "sorryPoolId": {
                    "type": "string",
                    "description": "When load balancer can not select a backend server to serve the request in default pool or pool in rules, the request would be served by sorry server pool.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpVirtualServerTag:LbHttpVirtualServerTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb http virtual server.\n"
                }
            },
            "required": [
                "applicationProfileId",
                "displayName",
                "ipAddress",
                "port",
                "revision"
            ],
            "inputProperties": {
                "accessLogEnabled": {
                    "type": "boolean",
                    "description": "Whether access log is enabled. Default is false.\n"
                },
                "applicationProfileId": {
                    "type": "string",
                    "description": "The application profile defines the application protocol characteristics.\n"
                },
                "clientSsl": {
                    "$ref": "#/types/nsxt:index/LbHttpVirtualServerClientSsl:LbHttpVirtualServerClientSsl",
                    "description": "Client side SSL customization.\n"
                },
                "defaultPoolMemberPort": {
                    "type": "string",
                    "description": "Default pool member port.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the virtual server is enabled. Default is true.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Virtual server IP address.\n"
                },
                "maxConcurrentConnections": {
                    "type": "integer",
                    "description": "To ensure one virtual server does not over consume resources, affecting other applications hosted on the same LBS, connections to a virtual server can be capped. If it is not specified, it means that connections are unlimited.\n"
                },
                "maxNewConnectionRate": {
                    "type": "integer",
                    "description": "To ensure one virtual server does not over consume resources, connections to a member can be rate limited. If it is not specified, it means that connection rate is unlimited.\n"
                },
                "persistenceProfileId": {
                    "type": "string",
                    "description": "Persistence profile is used to allow related client connections to be sent to the same backend server.\n"
                },
                "poolId": {
                    "type": "string",
                    "description": "Pool of backend servers. Server pool consists of one or more servers, also referred to as pool members, that are similarly configured and are running the same application.\n"
                },
                "port": {
                    "type": "string",
                    "description": "Virtual server port.\n"
                },
                "ruleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of load balancer rules that provide customization of load balancing behavior using match/action rules.\n"
                },
                "serverSsl": {
                    "$ref": "#/types/nsxt:index/LbHttpVirtualServerServerSsl:LbHttpVirtualServerServerSsl",
                    "description": "Server side SSL customization.\n"
                },
                "sorryPoolId": {
                    "type": "string",
                    "description": "When load balancer can not select a backend server to serve the request in default pool or pool in rules, the request would be served by sorry server pool.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpVirtualServerTag:LbHttpVirtualServerTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb http virtual server.\n"
                }
            },
            "requiredInputs": [
                "applicationProfileId",
                "ipAddress",
                "port"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbHttpVirtualServer resources.\n",
                "properties": {
                    "accessLogEnabled": {
                        "type": "boolean",
                        "description": "Whether access log is enabled. Default is false.\n"
                    },
                    "applicationProfileId": {
                        "type": "string",
                        "description": "The application profile defines the application protocol characteristics.\n"
                    },
                    "clientSsl": {
                        "$ref": "#/types/nsxt:index/LbHttpVirtualServerClientSsl:LbHttpVirtualServerClientSsl",
                        "description": "Client side SSL customization.\n"
                    },
                    "defaultPoolMemberPort": {
                        "type": "string",
                        "description": "Default pool member port.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the virtual server is enabled. Default is true.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "Virtual server IP address.\n"
                    },
                    "maxConcurrentConnections": {
                        "type": "integer",
                        "description": "To ensure one virtual server does not over consume resources, affecting other applications hosted on the same LBS, connections to a virtual server can be capped. If it is not specified, it means that connections are unlimited.\n"
                    },
                    "maxNewConnectionRate": {
                        "type": "integer",
                        "description": "To ensure one virtual server does not over consume resources, connections to a member can be rate limited. If it is not specified, it means that connection rate is unlimited.\n"
                    },
                    "persistenceProfileId": {
                        "type": "string",
                        "description": "Persistence profile is used to allow related client connections to be sent to the same backend server.\n"
                    },
                    "poolId": {
                        "type": "string",
                        "description": "Pool of backend servers. Server pool consists of one or more servers, also referred to as pool members, that are similarly configured and are running the same application.\n"
                    },
                    "port": {
                        "type": "string",
                        "description": "Virtual server port.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "ruleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of load balancer rules that provide customization of load balancing behavior using match/action rules.\n"
                    },
                    "serverSsl": {
                        "$ref": "#/types/nsxt:index/LbHttpVirtualServerServerSsl:LbHttpVirtualServerServerSsl",
                        "description": "Server side SSL customization.\n"
                    },
                    "sorryPoolId": {
                        "type": "string",
                        "description": "When load balancer can not select a backend server to serve the request in default pool or pool in rules, the request would be served by sorry server pool.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpVirtualServerTag:LbHttpVirtualServerTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb http virtual server.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbHttpsMonitor:LbHttpsMonitor": {
            "properties": {
                "certificateChainDepth": {
                    "type": "integer",
                    "description": "Authentication depth is used to set the verification depth in the server certificates chain.\n"
                },
                "ciphers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of supported SSL ciphers.\n"
                },
                "clientCertificateId": {
                    "type": "string",
                    "description": "Client certificate can be specified to support client authentication.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "fallCount": {
                    "type": "integer",
                    "description": "Number of consecutive checks that must fail before marking it down.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "The frequency at which the system issues the monitor check (in seconds).\n"
                },
                "isSecure": {
                    "type": "boolean",
                    "description": "This flag is set to true when all the ciphers and protocols are secure. It is set to false when one of the ciphers or protocols is insecure.\n"
                },
                "monitorPort": {
                    "type": "string",
                    "description": "If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not supported.\n"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but disabled by default.\n"
                },
                "requestBody": {
                    "type": "string",
                    "description": "String to send as HTTP health check request body. Valid only for certain HTTP methods like POST.\n"
                },
                "requestHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpsMonitorRequestHeader:LbHttpsMonitorRequestHeader"
                    },
                    "description": "HTTP request headers.\n"
                },
                "requestMethod": {
                    "type": "string",
                    "description": "Health check method for HTTP monitor type. Valid values are GET, HEAD, PUT, POST and OPTIONS.\n"
                },
                "requestUrl": {
                    "type": "string",
                    "description": "URL used for HTTP monitor.\n"
                },
                "requestVersion": {
                    "type": "string",
                    "description": "HTTP request version. Valid values are HTTP_VERSION_1_0 and HTTP_VERSION_1_1.\n"
                },
                "responseBody": {
                    "type": "string",
                    "description": "If response body is specified, healthcheck HTTP response body is matched against the specified string and server is considered healthy only if there is a match (regular expressions not supported). If response body string is not specified, HTTP healthcheck is considered successful if the HTTP response status code is among configured values.\n"
                },
                "responseStatusCodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "HTTP response status code should be a valid HTTP status code.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "riseCount": {
                    "type": "integer",
                    "description": "Number of consecutive checks that must pass before marking it up.\n"
                },
                "serverAuth": {
                    "type": "string",
                    "description": "Server authentication mode - REQUIRED or IGNORE.\n"
                },
                "serverAuthCaIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If server auth type is REQUIRED, server certificate must be signed by one of the trusted Certificate Authorities (CAs), also referred to as root CAs, whose self signed certificates are specified.\n"
                },
                "serverAuthCrlIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A Certificate Revocation List (CRL) can be specified in the server-side SSL profile binding to disallow compromised server certificates.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpsMonitorTag:LbHttpsMonitorTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb https monitor.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Number of seconds the target has to respond to the monitor request.\n"
                }
            },
            "required": [
                "ciphers",
                "displayName",
                "isSecure",
                "protocols",
                "responseStatusCodes",
                "revision"
            ],
            "inputProperties": {
                "certificateChainDepth": {
                    "type": "integer",
                    "description": "Authentication depth is used to set the verification depth in the server certificates chain.\n"
                },
                "ciphers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of supported SSL ciphers.\n"
                },
                "clientCertificateId": {
                    "type": "string",
                    "description": "Client certificate can be specified to support client authentication.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "fallCount": {
                    "type": "integer",
                    "description": "Number of consecutive checks that must fail before marking it down.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "The frequency at which the system issues the monitor check (in seconds).\n"
                },
                "monitorPort": {
                    "type": "string",
                    "description": "If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not supported.\n"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but disabled by default.\n"
                },
                "requestBody": {
                    "type": "string",
                    "description": "String to send as HTTP health check request body. Valid only for certain HTTP methods like POST.\n"
                },
                "requestHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpsMonitorRequestHeader:LbHttpsMonitorRequestHeader"
                    },
                    "description": "HTTP request headers.\n"
                },
                "requestMethod": {
                    "type": "string",
                    "description": "Health check method for HTTP monitor type. Valid values are GET, HEAD, PUT, POST and OPTIONS.\n"
                },
                "requestUrl": {
                    "type": "string",
                    "description": "URL used for HTTP monitor.\n"
                },
                "requestVersion": {
                    "type": "string",
                    "description": "HTTP request version. Valid values are HTTP_VERSION_1_0 and HTTP_VERSION_1_1.\n"
                },
                "responseBody": {
                    "type": "string",
                    "description": "If response body is specified, healthcheck HTTP response body is matched against the specified string and server is considered healthy only if there is a match (regular expressions not supported). If response body string is not specified, HTTP healthcheck is considered successful if the HTTP response status code is among configured values.\n"
                },
                "responseStatusCodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "HTTP response status code should be a valid HTTP status code.\n"
                },
                "riseCount": {
                    "type": "integer",
                    "description": "Number of consecutive checks that must pass before marking it up.\n"
                },
                "serverAuth": {
                    "type": "string",
                    "description": "Server authentication mode - REQUIRED or IGNORE.\n"
                },
                "serverAuthCaIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If server auth type is REQUIRED, server certificate must be signed by one of the trusted Certificate Authorities (CAs), also referred to as root CAs, whose self signed certificates are specified.\n"
                },
                "serverAuthCrlIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A Certificate Revocation List (CRL) can be specified in the server-side SSL profile binding to disallow compromised server certificates.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbHttpsMonitorTag:LbHttpsMonitorTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb https monitor.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Number of seconds the target has to respond to the monitor request.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbHttpsMonitor resources.\n",
                "properties": {
                    "certificateChainDepth": {
                        "type": "integer",
                        "description": "Authentication depth is used to set the verification depth in the server certificates chain.\n"
                    },
                    "ciphers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of supported SSL ciphers.\n"
                    },
                    "clientCertificateId": {
                        "type": "string",
                        "description": "Client certificate can be specified to support client authentication.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "fallCount": {
                        "type": "integer",
                        "description": "Number of consecutive checks that must fail before marking it down.\n"
                    },
                    "interval": {
                        "type": "integer",
                        "description": "The frequency at which the system issues the monitor check (in seconds).\n"
                    },
                    "isSecure": {
                        "type": "boolean",
                        "description": "This flag is set to true when all the ciphers and protocols are secure. It is set to false when one of the ciphers or protocols is insecure.\n"
                    },
                    "monitorPort": {
                        "type": "string",
                        "description": "If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not supported.\n"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but disabled by default.\n"
                    },
                    "requestBody": {
                        "type": "string",
                        "description": "String to send as HTTP health check request body. Valid only for certain HTTP methods like POST.\n"
                    },
                    "requestHeaders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpsMonitorRequestHeader:LbHttpsMonitorRequestHeader"
                        },
                        "description": "HTTP request headers.\n"
                    },
                    "requestMethod": {
                        "type": "string",
                        "description": "Health check method for HTTP monitor type. Valid values are GET, HEAD, PUT, POST and OPTIONS.\n"
                    },
                    "requestUrl": {
                        "type": "string",
                        "description": "URL used for HTTP monitor.\n"
                    },
                    "requestVersion": {
                        "type": "string",
                        "description": "HTTP request version. Valid values are HTTP_VERSION_1_0 and HTTP_VERSION_1_1.\n"
                    },
                    "responseBody": {
                        "type": "string",
                        "description": "If response body is specified, healthcheck HTTP response body is matched against the specified string and server is considered healthy only if there is a match (regular expressions not supported). If response body string is not specified, HTTP healthcheck is considered successful if the HTTP response status code is among configured values.\n"
                    },
                    "responseStatusCodes": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "HTTP response status code should be a valid HTTP status code.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "riseCount": {
                        "type": "integer",
                        "description": "Number of consecutive checks that must pass before marking it up.\n"
                    },
                    "serverAuth": {
                        "type": "string",
                        "description": "Server authentication mode - REQUIRED or IGNORE.\n"
                    },
                    "serverAuthCaIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "If server auth type is REQUIRED, server certificate must be signed by one of the trusted Certificate Authorities (CAs), also referred to as root CAs, whose self signed certificates are specified.\n"
                    },
                    "serverAuthCrlIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A Certificate Revocation List (CRL) can be specified in the server-side SSL profile binding to disallow compromised server certificates.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbHttpsMonitorTag:LbHttpsMonitorTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb https monitor.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "Number of seconds the target has to respond to the monitor request.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbIcmpMonitor:LbIcmpMonitor": {
            "properties": {
                "dataLength": {
                    "type": "integer",
                    "description": "The data size (in bytes) of the ICMP healthcheck packet.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "fallCount": {
                    "type": "integer",
                    "description": "Number of consecutive checks must fail before marking it down.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "The frequency at which the system issues the monitor check (in seconds).\n"
                },
                "monitorPort": {
                    "type": "string",
                    "description": "If the monitor port is specified, it would override pool member port setting for healthcheck. Port range is not supported.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "riseCount": {
                    "type": "integer",
                    "description": "Number of consecutive checks must pass before marking it up.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbIcmpMonitorTag:LbIcmpMonitorTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb icmp monitor.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Number of seconds the target has in which to respond to the monitor request.\n"
                }
            },
            "required": [
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "dataLength": {
                    "type": "integer",
                    "description": "The data size (in bytes) of the ICMP healthcheck packet.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "fallCount": {
                    "type": "integer",
                    "description": "Number of consecutive checks must fail before marking it down.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "The frequency at which the system issues the monitor check (in seconds).\n"
                },
                "monitorPort": {
                    "type": "string",
                    "description": "If the monitor port is specified, it would override pool member port setting for healthcheck. Port range is not supported.\n"
                },
                "riseCount": {
                    "type": "integer",
                    "description": "Number of consecutive checks must pass before marking it up.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbIcmpMonitorTag:LbIcmpMonitorTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb icmp monitor.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Number of seconds the target has in which to respond to the monitor request.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbIcmpMonitor resources.\n",
                "properties": {
                    "dataLength": {
                        "type": "integer",
                        "description": "The data size (in bytes) of the ICMP healthcheck packet.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "fallCount": {
                        "type": "integer",
                        "description": "Number of consecutive checks must fail before marking it down.\n"
                    },
                    "interval": {
                        "type": "integer",
                        "description": "The frequency at which the system issues the monitor check (in seconds).\n"
                    },
                    "monitorPort": {
                        "type": "string",
                        "description": "If the monitor port is specified, it would override pool member port setting for healthcheck. Port range is not supported.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "riseCount": {
                        "type": "integer",
                        "description": "Number of consecutive checks must pass before marking it up.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbIcmpMonitorTag:LbIcmpMonitorTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb icmp monitor.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "Number of seconds the target has in which to respond to the monitor request.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbPassiveMonitor:LbPassiveMonitor": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "maxFails": {
                    "type": "integer",
                    "description": "When consecutive failures reach this value, the member is considered temporarily unavailable for a configurable period.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbPassiveMonitorTag:LbPassiveMonitorTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb passive monitor.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "After this timeout period, the member is probed again.\n"
                }
            },
            "required": [
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "maxFails": {
                    "type": "integer",
                    "description": "When consecutive failures reach this value, the member is considered temporarily unavailable for a configurable period.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbPassiveMonitorTag:LbPassiveMonitorTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb passive monitor.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "After this timeout period, the member is probed again.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbPassiveMonitor resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "maxFails": {
                        "type": "integer",
                        "description": "When consecutive failures reach this value, the member is considered temporarily unavailable for a configurable period.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbPassiveMonitorTag:LbPassiveMonitorTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb passive monitor.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "After this timeout period, the member is probed again.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbPool:LbPool": {
            "properties": {
                "activeMonitorId": {
                    "type": "string",
                    "description": "Active health monitor Id. If one is not set, the active healthchecks will be disabled.\n"
                },
                "algorithm": {
                    "type": "string",
                    "description": "Load balancing algorithm controls how the incoming connections are distributed among the members. Supported algorithms are: ROUND_ROBIN, WEIGHTED_ROUND_ROBIN, LEAST_CONNECTION, WEIGHTED_LEAST_CONNECTION, IP_HASH.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. pool member name.\n"
                },
                "memberGroup": {
                    "$ref": "#/types/nsxt:index/LbPoolMemberGroup:LbPoolMemberGroup",
                    "description": "Dynamic pool members for the loadbalancing pool. When member group is defined, members setting should not be specified. The member_group has the following arguments:\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbPoolMember:LbPoolMember"
                    },
                    "description": "Server pool consists of one or more pool members. Each pool member is identified, typically, by an IP address and a port. Each member has the following arguments:\n"
                },
                "minActiveMembers": {
                    "type": "integer",
                    "description": "The minimum number of members for the pool to be considered active. This value is 1 by default.\n"
                },
                "passiveMonitorId": {
                    "type": "string",
                    "description": "Passive health monitor Id. If one is not set, the passive healthchecks will be disabled.\n* `snat_translation - (Optional) SNAT translation configuration for the pool.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "snatTranslation": {
                    "$ref": "#/types/nsxt:index/LbPoolSnatTranslation:LbPoolSnatTranslation",
                    "description": "SNAT translation configuration\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbPoolTag:LbPoolTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb pool.\n"
                },
                "tcpMultiplexingEnabled": {
                    "type": "boolean",
                    "description": "TCP multiplexing allows the same TCP connection between load balancer and the backend server to be used for sending multiple client requests from different client TCP connections. Disabled by default.\n"
                },
                "tcpMultiplexingNumber": {
                    "type": "integer",
                    "description": "The maximum number of TCP connections per pool that are idly kept alive for sending future client requests. The default value for this is 6.\n"
                }
            },
            "required": [
                "displayName",
                "revision",
                "snatTranslation"
            ],
            "inputProperties": {
                "activeMonitorId": {
                    "type": "string",
                    "description": "Active health monitor Id. If one is not set, the active healthchecks will be disabled.\n"
                },
                "algorithm": {
                    "type": "string",
                    "description": "Load balancing algorithm controls how the incoming connections are distributed among the members. Supported algorithms are: ROUND_ROBIN, WEIGHTED_ROUND_ROBIN, LEAST_CONNECTION, WEIGHTED_LEAST_CONNECTION, IP_HASH.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. pool member name.\n"
                },
                "memberGroup": {
                    "$ref": "#/types/nsxt:index/LbPoolMemberGroup:LbPoolMemberGroup",
                    "description": "Dynamic pool members for the loadbalancing pool. When member group is defined, members setting should not be specified. The member_group has the following arguments:\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbPoolMember:LbPoolMember"
                    },
                    "description": "Server pool consists of one or more pool members. Each pool member is identified, typically, by an IP address and a port. Each member has the following arguments:\n"
                },
                "minActiveMembers": {
                    "type": "integer",
                    "description": "The minimum number of members for the pool to be considered active. This value is 1 by default.\n"
                },
                "passiveMonitorId": {
                    "type": "string",
                    "description": "Passive health monitor Id. If one is not set, the passive healthchecks will be disabled.\n* `snat_translation - (Optional) SNAT translation configuration for the pool.\n"
                },
                "snatTranslation": {
                    "$ref": "#/types/nsxt:index/LbPoolSnatTranslation:LbPoolSnatTranslation",
                    "description": "SNAT translation configuration\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbPoolTag:LbPoolTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb pool.\n"
                },
                "tcpMultiplexingEnabled": {
                    "type": "boolean",
                    "description": "TCP multiplexing allows the same TCP connection between load balancer and the backend server to be used for sending multiple client requests from different client TCP connections. Disabled by default.\n"
                },
                "tcpMultiplexingNumber": {
                    "type": "integer",
                    "description": "The maximum number of TCP connections per pool that are idly kept alive for sending future client requests. The default value for this is 6.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbPool resources.\n",
                "properties": {
                    "activeMonitorId": {
                        "type": "string",
                        "description": "Active health monitor Id. If one is not set, the active healthchecks will be disabled.\n"
                    },
                    "algorithm": {
                        "type": "string",
                        "description": "Load balancing algorithm controls how the incoming connections are distributed among the members. Supported algorithms are: ROUND_ROBIN, WEIGHTED_ROUND_ROBIN, LEAST_CONNECTION, WEIGHTED_LEAST_CONNECTION, IP_HASH.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. pool member name.\n"
                    },
                    "memberGroup": {
                        "$ref": "#/types/nsxt:index/LbPoolMemberGroup:LbPoolMemberGroup",
                        "description": "Dynamic pool members for the loadbalancing pool. When member group is defined, members setting should not be specified. The member_group has the following arguments:\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbPoolMember:LbPoolMember"
                        },
                        "description": "Server pool consists of one or more pool members. Each pool member is identified, typically, by an IP address and a port. Each member has the following arguments:\n"
                    },
                    "minActiveMembers": {
                        "type": "integer",
                        "description": "The minimum number of members for the pool to be considered active. This value is 1 by default.\n"
                    },
                    "passiveMonitorId": {
                        "type": "string",
                        "description": "Passive health monitor Id. If one is not set, the passive healthchecks will be disabled.\n* `snat_translation - (Optional) SNAT translation configuration for the pool.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "snatTranslation": {
                        "$ref": "#/types/nsxt:index/LbPoolSnatTranslation:LbPoolSnatTranslation",
                        "description": "SNAT translation configuration\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbPoolTag:LbPoolTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb pool.\n"
                    },
                    "tcpMultiplexingEnabled": {
                        "type": "boolean",
                        "description": "TCP multiplexing allows the same TCP connection between load balancer and the backend server to be used for sending multiple client requests from different client TCP connections. Disabled by default.\n"
                    },
                    "tcpMultiplexingNumber": {
                        "type": "integer",
                        "description": "The maximum number of TCP connections per pool that are idly kept alive for sending future client requests. The default value for this is 6.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbServerSslProfile:LbServerSslProfile": {
            "properties": {
                "ciphers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "supported SSL cipher list to client side. The supported ciphers can contain: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "isSecure": {
                    "type": "boolean",
                    "description": "This flag is set to true when all the ciphers and protocols are secure. It is set to false when one of the ciphers or protocols is insecure.\n"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSL versions TLS_V1_1 and TLS_V1_2 are supported and enabled by default. SSL_V2, SSL_V3, and TLS_V1 are supported, but disabled by default.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "sessionCacheEnabled": {
                    "type": "boolean",
                    "description": "SSL session caching allows SSL server and server to reuse previously negotiated security parameters avoiding the expensive public key operation during handshake. Defaults to true.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbServerSslProfileTag:LbServerSslProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb server ssl profile.\n"
                }
            },
            "required": [
                "ciphers",
                "displayName",
                "isSecure",
                "protocols",
                "revision"
            ],
            "inputProperties": {
                "ciphers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "supported SSL cipher list to client side. The supported ciphers can contain: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSL versions TLS_V1_1 and TLS_V1_2 are supported and enabled by default. SSL_V2, SSL_V3, and TLS_V1 are supported, but disabled by default.\n"
                },
                "sessionCacheEnabled": {
                    "type": "boolean",
                    "description": "SSL session caching allows SSL server and server to reuse previously negotiated security parameters avoiding the expensive public key operation during handshake. Defaults to true.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbServerSslProfileTag:LbServerSslProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb server ssl profile.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbServerSslProfile resources.\n",
                "properties": {
                    "ciphers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "supported SSL cipher list to client side. The supported ciphers can contain: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "isSecure": {
                        "type": "boolean",
                        "description": "This flag is set to true when all the ciphers and protocols are secure. It is set to false when one of the ciphers or protocols is insecure.\n"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "SSL versions TLS_V1_1 and TLS_V1_2 are supported and enabled by default. SSL_V2, SSL_V3, and TLS_V1 are supported, but disabled by default.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "sessionCacheEnabled": {
                        "type": "boolean",
                        "description": "SSL session caching allows SSL server and server to reuse previously negotiated security parameters avoiding the expensive public key operation during handshake. Defaults to true.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbServerSslProfileTag:LbServerSslProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb server ssl profile.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbService:LbService": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "whether the load balancer service is enabled.\n"
                },
                "errorLogLevel": {
                    "type": "string",
                    "description": "Load balancer engine writes information about encountered issues of different severity levels to the error log. This setting is used to define the severity level of the error log.\n"
                },
                "logicalRouterId": {
                    "type": "string",
                    "description": "Tier1 logical router this service is attached to. Note that this router needs to have edge cluster configured, and have an uplink port or CSP (centralized service port).\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "size": {
                    "type": "string",
                    "description": "Size of load balancer service. Accepted values are SMALL/MEDIUM/LARGE.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbServiceTag:LbServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb service.\n"
                },
                "virtualServerIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Virtual servers associated with this Load Balancer.\n"
                }
            },
            "required": [
                "displayName",
                "logicalRouterId",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "whether the load balancer service is enabled.\n"
                },
                "errorLogLevel": {
                    "type": "string",
                    "description": "Load balancer engine writes information about encountered issues of different severity levels to the error log. This setting is used to define the severity level of the error log.\n"
                },
                "logicalRouterId": {
                    "type": "string",
                    "description": "Tier1 logical router this service is attached to. Note that this router needs to have edge cluster configured, and have an uplink port or CSP (centralized service port).\n"
                },
                "size": {
                    "type": "string",
                    "description": "Size of load balancer service. Accepted values are SMALL/MEDIUM/LARGE.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbServiceTag:LbServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb service.\n"
                },
                "virtualServerIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Virtual servers associated with this Load Balancer.\n"
                }
            },
            "requiredInputs": [
                "logicalRouterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbService resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "whether the load balancer service is enabled.\n"
                    },
                    "errorLogLevel": {
                        "type": "string",
                        "description": "Load balancer engine writes information about encountered issues of different severity levels to the error log. This setting is used to define the severity level of the error log.\n"
                    },
                    "logicalRouterId": {
                        "type": "string",
                        "description": "Tier1 logical router this service is attached to. Note that this router needs to have edge cluster configured, and have an uplink port or CSP (centralized service port).\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "size": {
                        "type": "string",
                        "description": "Size of load balancer service. Accepted values are SMALL/MEDIUM/LARGE.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbServiceTag:LbServiceTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb service.\n"
                    },
                    "virtualServerIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Virtual servers associated with this Load Balancer.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbSourceIpPersistenceProfile:LbSourceIpPersistenceProfile": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "haPersistenceMirroring": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether persistence entries will be synchronized to the HA peer.\n"
                },
                "persistenceShared": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether the cookie persistence is private or shared.\n"
                },
                "purgeWhenFull": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether entries will be purged when the persistence table is full. Defaults to true.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbSourceIpPersistenceProfileTag:LbSourceIpPersistenceProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb source ip persistence profile.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Persistence expiration time in seconds, counted from the time all the connections are completed. Defaults to 300 seconds.\n"
                }
            },
            "required": [
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "haPersistenceMirroring": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether persistence entries will be synchronized to the HA peer.\n"
                },
                "persistenceShared": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether the cookie persistence is private or shared.\n"
                },
                "purgeWhenFull": {
                    "type": "boolean",
                    "description": "A boolean flag which reflects whether entries will be purged when the persistence table is full. Defaults to true.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbSourceIpPersistenceProfileTag:LbSourceIpPersistenceProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb source ip persistence profile.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Persistence expiration time in seconds, counted from the time all the connections are completed. Defaults to 300 seconds.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbSourceIpPersistenceProfile resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "haPersistenceMirroring": {
                        "type": "boolean",
                        "description": "A boolean flag which reflects whether persistence entries will be synchronized to the HA peer.\n"
                    },
                    "persistenceShared": {
                        "type": "boolean",
                        "description": "A boolean flag which reflects whether the cookie persistence is private or shared.\n"
                    },
                    "purgeWhenFull": {
                        "type": "boolean",
                        "description": "A boolean flag which reflects whether entries will be purged when the persistence table is full. Defaults to true.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbSourceIpPersistenceProfileTag:LbSourceIpPersistenceProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb source ip persistence profile.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "Persistence expiration time in seconds, counted from the time all the connections are completed. Defaults to 300 seconds.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbTcpMonitor:LbTcpMonitor": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "fallCount": {
                    "type": "integer",
                    "description": "Number of consecutive checks must fail before marking it down.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "The frequency at which the system issues the monitor check (in seconds).\n"
                },
                "monitorPort": {
                    "type": "string",
                    "description": "If the monitor port is specified, it would override pool member port setting for healthcheck. Port range is not supported.\n"
                },
                "receive": {
                    "type": "string",
                    "description": "Expected data, if specified, can be anywhere in the response and it has to be a string, regular expressions are not supported.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "riseCount": {
                    "type": "integer",
                    "description": "Number of consecutive checks must pass before marking it up.\n"
                },
                "send": {
                    "type": "string",
                    "description": "Payload to send out to the monitored server. If both send and receive are not specified, then just a TCP connection is established (3-way handshake) to validate server is healthy, no data is sent.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbTcpMonitorTag:LbTcpMonitorTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb tcp monitor.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Number of seconds the target has in which to respond to the monitor request.\n"
                }
            },
            "required": [
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "fallCount": {
                    "type": "integer",
                    "description": "Number of consecutive checks must fail before marking it down.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "The frequency at which the system issues the monitor check (in seconds).\n"
                },
                "monitorPort": {
                    "type": "string",
                    "description": "If the monitor port is specified, it would override pool member port setting for healthcheck. Port range is not supported.\n"
                },
                "receive": {
                    "type": "string",
                    "description": "Expected data, if specified, can be anywhere in the response and it has to be a string, regular expressions are not supported.\n"
                },
                "riseCount": {
                    "type": "integer",
                    "description": "Number of consecutive checks must pass before marking it up.\n"
                },
                "send": {
                    "type": "string",
                    "description": "Payload to send out to the monitored server. If both send and receive are not specified, then just a TCP connection is established (3-way handshake) to validate server is healthy, no data is sent.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbTcpMonitorTag:LbTcpMonitorTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb tcp monitor.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Number of seconds the target has in which to respond to the monitor request.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbTcpMonitor resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "fallCount": {
                        "type": "integer",
                        "description": "Number of consecutive checks must fail before marking it down.\n"
                    },
                    "interval": {
                        "type": "integer",
                        "description": "The frequency at which the system issues the monitor check (in seconds).\n"
                    },
                    "monitorPort": {
                        "type": "string",
                        "description": "If the monitor port is specified, it would override pool member port setting for healthcheck. Port range is not supported.\n"
                    },
                    "receive": {
                        "type": "string",
                        "description": "Expected data, if specified, can be anywhere in the response and it has to be a string, regular expressions are not supported.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "riseCount": {
                        "type": "integer",
                        "description": "Number of consecutive checks must pass before marking it up.\n"
                    },
                    "send": {
                        "type": "string",
                        "description": "Payload to send out to the monitored server. If both send and receive are not specified, then just a TCP connection is established (3-way handshake) to validate server is healthy, no data is sent.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbTcpMonitorTag:LbTcpMonitorTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb tcp monitor.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "Number of seconds the target has in which to respond to the monitor request.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbTcpVirtualServer:LbTcpVirtualServer": {
            "properties": {
                "accessLogEnabled": {
                    "type": "boolean",
                    "description": "Whether access log is enabled. Default is false.\n"
                },
                "applicationProfileId": {
                    "type": "string",
                    "description": "The application profile defines the application protocol characteristics.\n"
                },
                "defaultPoolMemberPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of default pool member ports.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the virtual server is enabled. Default is true.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Virtual server IP address.\n"
                },
                "maxConcurrentConnections": {
                    "type": "integer",
                    "description": "To ensure one virtual server does not over consume resources, affecting other applications hosted on the same LBS, connections to a virtual server can be capped. If it is not specified, it means that connections are unlimited.\n"
                },
                "maxNewConnectionRate": {
                    "type": "integer",
                    "description": "To ensure one virtual server does not over consume resources, connections to a member can be rate limited. If it is not specified, it means that connection rate is unlimited.\n"
                },
                "persistenceProfileId": {
                    "type": "string",
                    "description": "Persistence profile is used to allow related client connections to be sent to the same backend server. Only source ip persistence profile is accepted.\n"
                },
                "poolId": {
                    "type": "string",
                    "description": "Pool of backend servers. Server pool consists of one or more servers, also referred to as pool members, that are similarly configured and are running the same application.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of virtual server ports.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "sorryPoolId": {
                    "type": "string",
                    "description": "When load balancer can not select a backend server to serve the request in default pool or pool in rules, the request would be served by sorry server pool.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbTcpVirtualServerTag:LbTcpVirtualServerTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb tcp virtual server.\n"
                }
            },
            "required": [
                "applicationProfileId",
                "displayName",
                "ipAddress",
                "ports",
                "revision"
            ],
            "inputProperties": {
                "accessLogEnabled": {
                    "type": "boolean",
                    "description": "Whether access log is enabled. Default is false.\n"
                },
                "applicationProfileId": {
                    "type": "string",
                    "description": "The application profile defines the application protocol characteristics.\n"
                },
                "defaultPoolMemberPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of default pool member ports.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the virtual server is enabled. Default is true.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Virtual server IP address.\n"
                },
                "maxConcurrentConnections": {
                    "type": "integer",
                    "description": "To ensure one virtual server does not over consume resources, affecting other applications hosted on the same LBS, connections to a virtual server can be capped. If it is not specified, it means that connections are unlimited.\n"
                },
                "maxNewConnectionRate": {
                    "type": "integer",
                    "description": "To ensure one virtual server does not over consume resources, connections to a member can be rate limited. If it is not specified, it means that connection rate is unlimited.\n"
                },
                "persistenceProfileId": {
                    "type": "string",
                    "description": "Persistence profile is used to allow related client connections to be sent to the same backend server. Only source ip persistence profile is accepted.\n"
                },
                "poolId": {
                    "type": "string",
                    "description": "Pool of backend servers. Server pool consists of one or more servers, also referred to as pool members, that are similarly configured and are running the same application.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of virtual server ports.\n"
                },
                "sorryPoolId": {
                    "type": "string",
                    "description": "When load balancer can not select a backend server to serve the request in default pool or pool in rules, the request would be served by sorry server pool.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbTcpVirtualServerTag:LbTcpVirtualServerTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb tcp virtual server.\n"
                }
            },
            "requiredInputs": [
                "applicationProfileId",
                "ipAddress",
                "ports"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbTcpVirtualServer resources.\n",
                "properties": {
                    "accessLogEnabled": {
                        "type": "boolean",
                        "description": "Whether access log is enabled. Default is false.\n"
                    },
                    "applicationProfileId": {
                        "type": "string",
                        "description": "The application profile defines the application protocol characteristics.\n"
                    },
                    "defaultPoolMemberPorts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of default pool member ports.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the virtual server is enabled. Default is true.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "Virtual server IP address.\n"
                    },
                    "maxConcurrentConnections": {
                        "type": "integer",
                        "description": "To ensure one virtual server does not over consume resources, affecting other applications hosted on the same LBS, connections to a virtual server can be capped. If it is not specified, it means that connections are unlimited.\n"
                    },
                    "maxNewConnectionRate": {
                        "type": "integer",
                        "description": "To ensure one virtual server does not over consume resources, connections to a member can be rate limited. If it is not specified, it means that connection rate is unlimited.\n"
                    },
                    "persistenceProfileId": {
                        "type": "string",
                        "description": "Persistence profile is used to allow related client connections to be sent to the same backend server. Only source ip persistence profile is accepted.\n"
                    },
                    "poolId": {
                        "type": "string",
                        "description": "Pool of backend servers. Server pool consists of one or more servers, also referred to as pool members, that are similarly configured and are running the same application.\n"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of virtual server ports.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "sorryPoolId": {
                        "type": "string",
                        "description": "When load balancer can not select a backend server to serve the request in default pool or pool in rules, the request would be served by sorry server pool.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbTcpVirtualServerTag:LbTcpVirtualServerTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb tcp virtual server.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbUdpMonitor:LbUdpMonitor": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "fallCount": {
                    "type": "integer",
                    "description": "Number of consecutive checks must fail before marking it down.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "The frequency at which the system issues the monitor check (in seconds).\n"
                },
                "monitorPort": {
                    "type": "string",
                    "description": "If the monitor port is specified, it would override pool member port setting for healthcheck. Port range is not supported.\n"
                },
                "receive": {
                    "type": "string",
                    "description": "Expected data, if specified, can be anywhere in the response and it has to be a string, regular expressions are not supported.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "riseCount": {
                    "type": "integer",
                    "description": "Number of consecutive checks must pass before marking it up.\n"
                },
                "send": {
                    "type": "string",
                    "description": "Payload to send out to the monitored server.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbUdpMonitorTag:LbUdpMonitorTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb udp monitor.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Number of seconds the target has in which to respond to the monitor request.\n"
                }
            },
            "required": [
                "displayName",
                "receive",
                "revision",
                "send"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "fallCount": {
                    "type": "integer",
                    "description": "Number of consecutive checks must fail before marking it down.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "The frequency at which the system issues the monitor check (in seconds).\n"
                },
                "monitorPort": {
                    "type": "string",
                    "description": "If the monitor port is specified, it would override pool member port setting for healthcheck. Port range is not supported.\n"
                },
                "receive": {
                    "type": "string",
                    "description": "Expected data, if specified, can be anywhere in the response and it has to be a string, regular expressions are not supported.\n"
                },
                "riseCount": {
                    "type": "integer",
                    "description": "Number of consecutive checks must pass before marking it up.\n"
                },
                "send": {
                    "type": "string",
                    "description": "Payload to send out to the monitored server.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbUdpMonitorTag:LbUdpMonitorTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb udp monitor.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Number of seconds the target has in which to respond to the monitor request.\n"
                }
            },
            "requiredInputs": [
                "receive",
                "send"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbUdpMonitor resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "fallCount": {
                        "type": "integer",
                        "description": "Number of consecutive checks must fail before marking it down.\n"
                    },
                    "interval": {
                        "type": "integer",
                        "description": "The frequency at which the system issues the monitor check (in seconds).\n"
                    },
                    "monitorPort": {
                        "type": "string",
                        "description": "If the monitor port is specified, it would override pool member port setting for healthcheck. Port range is not supported.\n"
                    },
                    "receive": {
                        "type": "string",
                        "description": "Expected data, if specified, can be anywhere in the response and it has to be a string, regular expressions are not supported.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "riseCount": {
                        "type": "integer",
                        "description": "Number of consecutive checks must pass before marking it up.\n"
                    },
                    "send": {
                        "type": "string",
                        "description": "Payload to send out to the monitored server.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbUdpMonitorTag:LbUdpMonitorTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb udp monitor.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "Number of seconds the target has in which to respond to the monitor request.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/lbUdpVirtualServer:LbUdpVirtualServer": {
            "properties": {
                "accessLogEnabled": {
                    "type": "boolean",
                    "description": "Whether access log is enabled. Default is false.\n"
                },
                "applicationProfileId": {
                    "type": "string",
                    "description": "The application profile defines the application protocol characteristics.\n"
                },
                "defaultPoolMemberPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of default pool member ports.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the virtual server is enabled. Default is true.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Virtual server IP address.\n"
                },
                "maxConcurrentConnections": {
                    "type": "integer",
                    "description": "To ensure one virtual server does not over consume resources, affecting other applications hosted on the same LBS, connections to a virtual server can be capped. If it is not specified, it means that connections are unlimited.\n"
                },
                "maxNewConnectionRate": {
                    "type": "integer",
                    "description": "To ensure one virtual server does not over consume resources, connections to a member can be rate limited. If it is not specified, it means that connection rate is unlimited.\n"
                },
                "persistenceProfileId": {
                    "type": "string",
                    "description": "Persistence profile is used to allow related client connections to be sent to the same backend server. Only source ip persistence profile is accepted.\n"
                },
                "poolId": {
                    "type": "string",
                    "description": "Pool of backend servers. Server pool consists of one or more servers, also referred to as pool members, that are similarly configured and are running the same application.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of virtual server port.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "sorryPoolId": {
                    "type": "string",
                    "description": "When load balancer can not select a backend server to serve the request in default pool or pool in rules, the request would be served by sorry server pool.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbUdpVirtualServerTag:LbUdpVirtualServerTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb udp virtual server.\n"
                }
            },
            "required": [
                "applicationProfileId",
                "displayName",
                "ipAddress",
                "ports",
                "revision"
            ],
            "inputProperties": {
                "accessLogEnabled": {
                    "type": "boolean",
                    "description": "Whether access log is enabled. Default is false.\n"
                },
                "applicationProfileId": {
                    "type": "string",
                    "description": "The application profile defines the application protocol characteristics.\n"
                },
                "defaultPoolMemberPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of default pool member ports.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the virtual server is enabled. Default is true.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Virtual server IP address.\n"
                },
                "maxConcurrentConnections": {
                    "type": "integer",
                    "description": "To ensure one virtual server does not over consume resources, affecting other applications hosted on the same LBS, connections to a virtual server can be capped. If it is not specified, it means that connections are unlimited.\n"
                },
                "maxNewConnectionRate": {
                    "type": "integer",
                    "description": "To ensure one virtual server does not over consume resources, connections to a member can be rate limited. If it is not specified, it means that connection rate is unlimited.\n"
                },
                "persistenceProfileId": {
                    "type": "string",
                    "description": "Persistence profile is used to allow related client connections to be sent to the same backend server. Only source ip persistence profile is accepted.\n"
                },
                "poolId": {
                    "type": "string",
                    "description": "Pool of backend servers. Server pool consists of one or more servers, also referred to as pool members, that are similarly configured and are running the same application.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of virtual server port.\n"
                },
                "sorryPoolId": {
                    "type": "string",
                    "description": "When load balancer can not select a backend server to serve the request in default pool or pool in rules, the request would be served by sorry server pool.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LbUdpVirtualServerTag:LbUdpVirtualServerTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this lb udp virtual server.\n"
                }
            },
            "requiredInputs": [
                "applicationProfileId",
                "ipAddress",
                "ports"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbUdpVirtualServer resources.\n",
                "properties": {
                    "accessLogEnabled": {
                        "type": "boolean",
                        "description": "Whether access log is enabled. Default is false.\n"
                    },
                    "applicationProfileId": {
                        "type": "string",
                        "description": "The application profile defines the application protocol characteristics.\n"
                    },
                    "defaultPoolMemberPorts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of default pool member ports.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the virtual server is enabled. Default is true.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "Virtual server IP address.\n"
                    },
                    "maxConcurrentConnections": {
                        "type": "integer",
                        "description": "To ensure one virtual server does not over consume resources, affecting other applications hosted on the same LBS, connections to a virtual server can be capped. If it is not specified, it means that connections are unlimited.\n"
                    },
                    "maxNewConnectionRate": {
                        "type": "integer",
                        "description": "To ensure one virtual server does not over consume resources, connections to a member can be rate limited. If it is not specified, it means that connection rate is unlimited.\n"
                    },
                    "persistenceProfileId": {
                        "type": "string",
                        "description": "Persistence profile is used to allow related client connections to be sent to the same backend server. Only source ip persistence profile is accepted.\n"
                    },
                    "poolId": {
                        "type": "string",
                        "description": "Pool of backend servers. Server pool consists of one or more servers, also referred to as pool members, that are similarly configured and are running the same application.\n"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of virtual server port.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "sorryPoolId": {
                        "type": "string",
                        "description": "When load balancer can not select a backend server to serve the request in default pool or pool in rules, the request would be served by sorry server pool.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LbUdpVirtualServerTag:LbUdpVirtualServerTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this lb udp virtual server.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/logicalDhcpPort:LogicalDhcpPort": {
            "properties": {
                "adminState": {
                    "type": "string",
                    "description": "Admin state for the logical port. Accepted values - 'UP' or 'DOWN'. The default value is 'UP'.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "dhcpServerId": {
                    "type": "string",
                    "description": "Logical DHCP server ID for the logical port.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "logicalSwitchId": {
                    "type": "string",
                    "description": "Logical switch ID for the logical port.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalDhcpPortTag:LogicalDhcpPortTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this logical port.\n"
                }
            },
            "required": [
                "dhcpServerId",
                "displayName",
                "logicalSwitchId",
                "revision"
            ],
            "inputProperties": {
                "adminState": {
                    "type": "string",
                    "description": "Admin state for the logical port. Accepted values - 'UP' or 'DOWN'. The default value is 'UP'.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "dhcpServerId": {
                    "type": "string",
                    "description": "Logical DHCP server ID for the logical port.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "logicalSwitchId": {
                    "type": "string",
                    "description": "Logical switch ID for the logical port.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalDhcpPortTag:LogicalDhcpPortTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this logical port.\n"
                }
            },
            "requiredInputs": [
                "dhcpServerId",
                "logicalSwitchId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogicalDhcpPort resources.\n",
                "properties": {
                    "adminState": {
                        "type": "string",
                        "description": "Admin state for the logical port. Accepted values - 'UP' or 'DOWN'. The default value is 'UP'.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "dhcpServerId": {
                        "type": "string",
                        "description": "Logical DHCP server ID for the logical port.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name, defaults to ID if not set.\n"
                    },
                    "logicalSwitchId": {
                        "type": "string",
                        "description": "Logical switch ID for the logical port.\n",
                        "willReplaceOnChanges": true
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LogicalDhcpPortTag:LogicalDhcpPortTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this logical port.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/logicalDhcpServer:LogicalDhcpServer": {
            "properties": {
                "attachedLogicalPortId": {
                    "type": "string",
                    "description": "ID of the attached logical port.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "dhcpGenericOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalDhcpServerDhcpGenericOption:LogicalDhcpServerDhcpGenericOption"
                    },
                    "description": "Generic DHCP options.\n"
                },
                "dhcpOption121s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalDhcpServerDhcpOption121:LogicalDhcpServerDhcpOption121"
                    },
                    "description": "DHCP classless static routes.\n"
                },
                "dhcpProfileId": {
                    "type": "string",
                    "description": "DHCP profile uuid.\n"
                },
                "dhcpServerIp": {
                    "type": "string",
                    "description": "DHCP server IP in cidr format.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "dnsNameServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "DNS IPs.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "Domain name.\n"
                },
                "gatewayIp": {
                    "type": "string",
                    "description": "Gateway IP.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalDhcpServerTag:LogicalDhcpServerTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this logical DHCP server.\n"
                }
            },
            "required": [
                "attachedLogicalPortId",
                "dhcpProfileId",
                "dhcpServerIp",
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "dhcpGenericOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalDhcpServerDhcpGenericOption:LogicalDhcpServerDhcpGenericOption"
                    },
                    "description": "Generic DHCP options.\n"
                },
                "dhcpOption121s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalDhcpServerDhcpOption121:LogicalDhcpServerDhcpOption121"
                    },
                    "description": "DHCP classless static routes.\n"
                },
                "dhcpProfileId": {
                    "type": "string",
                    "description": "DHCP profile uuid.\n"
                },
                "dhcpServerIp": {
                    "type": "string",
                    "description": "DHCP server IP in cidr format.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "dnsNameServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "DNS IPs.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "Domain name.\n"
                },
                "gatewayIp": {
                    "type": "string",
                    "description": "Gateway IP.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalDhcpServerTag:LogicalDhcpServerTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this logical DHCP server.\n"
                }
            },
            "requiredInputs": [
                "dhcpProfileId",
                "dhcpServerIp"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogicalDhcpServer resources.\n",
                "properties": {
                    "attachedLogicalPortId": {
                        "type": "string",
                        "description": "ID of the attached logical port.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "dhcpGenericOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LogicalDhcpServerDhcpGenericOption:LogicalDhcpServerDhcpGenericOption"
                        },
                        "description": "Generic DHCP options.\n"
                    },
                    "dhcpOption121s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LogicalDhcpServerDhcpOption121:LogicalDhcpServerDhcpOption121"
                        },
                        "description": "DHCP classless static routes.\n"
                    },
                    "dhcpProfileId": {
                        "type": "string",
                        "description": "DHCP profile uuid.\n"
                    },
                    "dhcpServerIp": {
                        "type": "string",
                        "description": "DHCP server IP in cidr format.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "dnsNameServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "DNS IPs.\n"
                    },
                    "domainName": {
                        "type": "string",
                        "description": "Domain name.\n"
                    },
                    "gatewayIp": {
                        "type": "string",
                        "description": "Gateway IP.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LogicalDhcpServerTag:LogicalDhcpServerTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this logical DHCP server.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/logicalPort:LogicalPort": {
            "properties": {
                "adminState": {
                    "type": "string",
                    "description": "Admin state for the logical port. Accepted values - 'UP' or 'DOWN'. The default value is 'UP'.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "logicalSwitchId": {
                    "type": "string",
                    "description": "Logical switch ID for the logical port.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "switchingProfileIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalPortSwitchingProfileId:LogicalPortSwitchingProfileId"
                    },
                    "description": "List of IDs of switching profiles (of various types) to be associated with this switch. Default switching profiles will be used if not specified.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalPortTag:LogicalPortTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this logical port.\n"
                }
            },
            "required": [
                "displayName",
                "logicalSwitchId",
                "revision"
            ],
            "inputProperties": {
                "adminState": {
                    "type": "string",
                    "description": "Admin state for the logical port. Accepted values - 'UP' or 'DOWN'. The default value is 'UP'.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "logicalSwitchId": {
                    "type": "string",
                    "description": "Logical switch ID for the logical port.\n",
                    "willReplaceOnChanges": true
                },
                "switchingProfileIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalPortSwitchingProfileId:LogicalPortSwitchingProfileId"
                    },
                    "description": "List of IDs of switching profiles (of various types) to be associated with this switch. Default switching profiles will be used if not specified.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalPortTag:LogicalPortTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this logical port.\n"
                }
            },
            "requiredInputs": [
                "logicalSwitchId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogicalPort resources.\n",
                "properties": {
                    "adminState": {
                        "type": "string",
                        "description": "Admin state for the logical port. Accepted values - 'UP' or 'DOWN'. The default value is 'UP'.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name, defaults to ID if not set.\n"
                    },
                    "logicalSwitchId": {
                        "type": "string",
                        "description": "Logical switch ID for the logical port.\n",
                        "willReplaceOnChanges": true
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "switchingProfileIds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LogicalPortSwitchingProfileId:LogicalPortSwitchingProfileId"
                        },
                        "description": "List of IDs of switching profiles (of various types) to be associated with this switch. Default switching profiles will be used if not specified.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LogicalPortTag:LogicalPortTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this logical port.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/logicalRouterCentralizedServicePort:LogicalRouterCentralizedServicePort": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Logical router port subnet (ip_address / prefix length)\n"
                },
                "linkedLogicalSwitchPortId": {
                    "type": "string",
                    "description": "Identifier for port on logical switch to connect to\n"
                },
                "logicalRouterId": {
                    "type": "string",
                    "description": "Identifier for logical Tier-0 or Tier-1 router on which this port is created\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalRouterCentralizedServicePortTag:LogicalRouterCentralizedServicePortTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this port.\n"
                },
                "urpfMode": {
                    "type": "string",
                    "description": "Unicast Reverse Path Forwarding mode. Accepted values are \"NONE\" and \"STRICT\" which is the default value.\n"
                }
            },
            "required": [
                "displayName",
                "ipAddress",
                "linkedLogicalSwitchPortId",
                "logicalRouterId",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Logical router port subnet (ip_address / prefix length)\n"
                },
                "linkedLogicalSwitchPortId": {
                    "type": "string",
                    "description": "Identifier for port on logical switch to connect to\n",
                    "willReplaceOnChanges": true
                },
                "logicalRouterId": {
                    "type": "string",
                    "description": "Identifier for logical Tier-0 or Tier-1 router on which this port is created\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalRouterCentralizedServicePortTag:LogicalRouterCentralizedServicePortTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this port.\n"
                },
                "urpfMode": {
                    "type": "string",
                    "description": "Unicast Reverse Path Forwarding mode. Accepted values are \"NONE\" and \"STRICT\" which is the default value.\n"
                }
            },
            "requiredInputs": [
                "ipAddress",
                "linkedLogicalSwitchPortId",
                "logicalRouterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogicalRouterCentralizedServicePort resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name, defaults to ID if not set.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "Logical router port subnet (ip_address / prefix length)\n"
                    },
                    "linkedLogicalSwitchPortId": {
                        "type": "string",
                        "description": "Identifier for port on logical switch to connect to\n",
                        "willReplaceOnChanges": true
                    },
                    "logicalRouterId": {
                        "type": "string",
                        "description": "Identifier for logical Tier-0 or Tier-1 router on which this port is created\n",
                        "willReplaceOnChanges": true
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LogicalRouterCentralizedServicePortTag:LogicalRouterCentralizedServicePortTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this port.\n"
                    },
                    "urpfMode": {
                        "type": "string",
                        "description": "Unicast Reverse Path Forwarding mode. Accepted values are \"NONE\" and \"STRICT\" which is the default value.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/logicalRouterDownlinkPort:LogicalRouterDownlinkPort": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Logical router port subnet (ip_address / prefix length)\n"
                },
                "linkedLogicalSwitchPortId": {
                    "type": "string",
                    "description": "Identifier for port on logical switch to connect to\n"
                },
                "logicalRouterId": {
                    "type": "string",
                    "description": "Identifier for logical Tier-1 router on which this port is created\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address assigned to this port\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "serviceBindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalRouterDownlinkPortServiceBinding:LogicalRouterDownlinkPortServiceBinding"
                    },
                    "description": "A list of services for this port. Currently only \"LogicalService\" is supported as a target_type, and a DHCP relay service ID as target_id\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalRouterDownlinkPortTag:LogicalRouterDownlinkPortTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this port.\n"
                },
                "urpfMode": {
                    "type": "string",
                    "description": "Unicast Reverse Path Forwarding mode. Accepted values are \"NONE\" and \"STRICT\" which is the default value.\n"
                }
            },
            "required": [
                "displayName",
                "ipAddress",
                "linkedLogicalSwitchPortId",
                "logicalRouterId",
                "macAddress",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Logical router port subnet (ip_address / prefix length)\n"
                },
                "linkedLogicalSwitchPortId": {
                    "type": "string",
                    "description": "Identifier for port on logical switch to connect to\n",
                    "willReplaceOnChanges": true
                },
                "logicalRouterId": {
                    "type": "string",
                    "description": "Identifier for logical Tier-1 router on which this port is created\n",
                    "willReplaceOnChanges": true
                },
                "serviceBindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalRouterDownlinkPortServiceBinding:LogicalRouterDownlinkPortServiceBinding"
                    },
                    "description": "A list of services for this port. Currently only \"LogicalService\" is supported as a target_type, and a DHCP relay service ID as target_id\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalRouterDownlinkPortTag:LogicalRouterDownlinkPortTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this port.\n"
                },
                "urpfMode": {
                    "type": "string",
                    "description": "Unicast Reverse Path Forwarding mode. Accepted values are \"NONE\" and \"STRICT\" which is the default value.\n"
                }
            },
            "requiredInputs": [
                "ipAddress",
                "linkedLogicalSwitchPortId",
                "logicalRouterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogicalRouterDownlinkPort resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name, defaults to ID if not set.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "Logical router port subnet (ip_address / prefix length)\n"
                    },
                    "linkedLogicalSwitchPortId": {
                        "type": "string",
                        "description": "Identifier for port on logical switch to connect to\n",
                        "willReplaceOnChanges": true
                    },
                    "logicalRouterId": {
                        "type": "string",
                        "description": "Identifier for logical Tier-1 router on which this port is created\n",
                        "willReplaceOnChanges": true
                    },
                    "macAddress": {
                        "type": "string",
                        "description": "The MAC address assigned to this port\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "serviceBindings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LogicalRouterDownlinkPortServiceBinding:LogicalRouterDownlinkPortServiceBinding"
                        },
                        "description": "A list of services for this port. Currently only \"LogicalService\" is supported as a target_type, and a DHCP relay service ID as target_id\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LogicalRouterDownlinkPortTag:LogicalRouterDownlinkPortTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this port.\n"
                    },
                    "urpfMode": {
                        "type": "string",
                        "description": "Unicast Reverse Path Forwarding mode. Accepted values are \"NONE\" and \"STRICT\" which is the default value.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/logicalRouterLinkPortOnTier0:LogicalRouterLinkPortOnTier0": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "linkedLogicalRouterPortId": {
                    "type": "string",
                    "description": "Identifier for port on logical router to connect to\n"
                },
                "logicalRouterId": {
                    "type": "string",
                    "description": "Identifier for logical Tier0 router on which this port is created.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalRouterLinkPortOnTier0Tag:LogicalRouterLinkPortOnTier0Tag"
                    },
                    "description": "A list of scope + tag pairs to associate with this port.\n"
                }
            },
            "required": [
                "displayName",
                "linkedLogicalRouterPortId",
                "logicalRouterId",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "logicalRouterId": {
                    "type": "string",
                    "description": "Identifier for logical Tier0 router on which this port is created.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalRouterLinkPortOnTier0Tag:LogicalRouterLinkPortOnTier0Tag"
                    },
                    "description": "A list of scope + tag pairs to associate with this port.\n"
                }
            },
            "requiredInputs": [
                "logicalRouterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogicalRouterLinkPortOnTier0 resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name, defaults to ID if not set.\n"
                    },
                    "linkedLogicalRouterPortId": {
                        "type": "string",
                        "description": "Identifier for port on logical router to connect to\n"
                    },
                    "logicalRouterId": {
                        "type": "string",
                        "description": "Identifier for logical Tier0 router on which this port is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LogicalRouterLinkPortOnTier0Tag:LogicalRouterLinkPortOnTier0Tag"
                        },
                        "description": "A list of scope + tag pairs to associate with this port.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/logicalRouterLinkPortOnTier1:LogicalRouterLinkPortOnTier1": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "linkedLogicalRouterPortId": {
                    "type": "string",
                    "description": "Identifier for port on logical router to connect to\n"
                },
                "logicalRouterId": {
                    "type": "string",
                    "description": "Identifier for logical tier-1 router on which this port is created.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalRouterLinkPortOnTier1Tag:LogicalRouterLinkPortOnTier1Tag"
                    },
                    "description": "A list of scope + tag pairs to associate with this port.\n"
                }
            },
            "required": [
                "displayName",
                "linkedLogicalRouterPortId",
                "logicalRouterId",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "linkedLogicalRouterPortId": {
                    "type": "string",
                    "description": "Identifier for port on logical router to connect to\n",
                    "willReplaceOnChanges": true
                },
                "logicalRouterId": {
                    "type": "string",
                    "description": "Identifier for logical tier-1 router on which this port is created.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalRouterLinkPortOnTier1Tag:LogicalRouterLinkPortOnTier1Tag"
                    },
                    "description": "A list of scope + tag pairs to associate with this port.\n"
                }
            },
            "requiredInputs": [
                "linkedLogicalRouterPortId",
                "logicalRouterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogicalRouterLinkPortOnTier1 resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name, defaults to ID if not set.\n"
                    },
                    "linkedLogicalRouterPortId": {
                        "type": "string",
                        "description": "Identifier for port on logical router to connect to\n",
                        "willReplaceOnChanges": true
                    },
                    "logicalRouterId": {
                        "type": "string",
                        "description": "Identifier for logical tier-1 router on which this port is created.\n",
                        "willReplaceOnChanges": true
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LogicalRouterLinkPortOnTier1Tag:LogicalRouterLinkPortOnTier1Tag"
                        },
                        "description": "A list of scope + tag pairs to associate with this port.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/logicalSwitch:LogicalSwitch": {
            "properties": {
                "addressBindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalSwitchAddressBinding:LogicalSwitchAddressBinding"
                    },
                    "description": "List of Address Bindings for the logical switch. This setting allows to provide bindings between IP address, mac Address and vlan.\n"
                },
                "adminState": {
                    "type": "string",
                    "description": "Admin state for the logical switch. Accepted values - 'UP' or 'DOWN'. The default value is 'UP'.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "ipPoolId": {
                    "type": "string",
                    "description": "Ip Pool ID to be associated with the logical switch.\n"
                },
                "macPoolId": {
                    "type": "string",
                    "description": "Mac Pool ID to be associated with the logical switch.\n"
                },
                "replicationMode": {
                    "type": "string",
                    "description": "Replication mode of the Logical Switch. Accepted values - 'MTEP' (Hierarchical Two-Tier replication) and 'SOURCE' (Head Replication), with 'MTEP' being the default value. Applies to overlay logical switches.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "switchingProfileIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalSwitchSwitchingProfileId:LogicalSwitchSwitchingProfileId"
                    },
                    "description": "List of IDs of switching profiles (of various types) to be associated with this switch. Default switching profiles will be used if not specified.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalSwitchTag:LogicalSwitchTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this logical switch.\n"
                },
                "transportZoneId": {
                    "type": "string",
                    "description": "Transport Zone ID for the logical switch.\n"
                },
                "vlan": {
                    "type": "integer",
                    "description": "Vlan for vlan logical switch. This attribute is deprecated, please use nsxt.VlanLogicalSwitch resource to manage vlan logical switches.\n",
                    "deprecationMessage": "Use nsxt_vlan_logical_switch resource instead"
                },
                "vni": {
                    "type": "integer",
                    "description": "Vni for the logical switch.\n"
                }
            },
            "required": [
                "displayName",
                "revision",
                "transportZoneId",
                "vni"
            ],
            "inputProperties": {
                "addressBindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalSwitchAddressBinding:LogicalSwitchAddressBinding"
                    },
                    "description": "List of Address Bindings for the logical switch. This setting allows to provide bindings between IP address, mac Address and vlan.\n"
                },
                "adminState": {
                    "type": "string",
                    "description": "Admin state for the logical switch. Accepted values - 'UP' or 'DOWN'. The default value is 'UP'.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "ipPoolId": {
                    "type": "string",
                    "description": "Ip Pool ID to be associated with the logical switch.\n"
                },
                "macPoolId": {
                    "type": "string",
                    "description": "Mac Pool ID to be associated with the logical switch.\n"
                },
                "replicationMode": {
                    "type": "string",
                    "description": "Replication mode of the Logical Switch. Accepted values - 'MTEP' (Hierarchical Two-Tier replication) and 'SOURCE' (Head Replication), with 'MTEP' being the default value. Applies to overlay logical switches.\n"
                },
                "switchingProfileIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalSwitchSwitchingProfileId:LogicalSwitchSwitchingProfileId"
                    },
                    "description": "List of IDs of switching profiles (of various types) to be associated with this switch. Default switching profiles will be used if not specified.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalSwitchTag:LogicalSwitchTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this logical switch.\n"
                },
                "transportZoneId": {
                    "type": "string",
                    "description": "Transport Zone ID for the logical switch.\n",
                    "willReplaceOnChanges": true
                },
                "vlan": {
                    "type": "integer",
                    "description": "Vlan for vlan logical switch. This attribute is deprecated, please use nsxt.VlanLogicalSwitch resource to manage vlan logical switches.\n",
                    "deprecationMessage": "Use nsxt_vlan_logical_switch resource instead"
                },
                "vni": {
                    "type": "integer",
                    "description": "Vni for the logical switch.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "transportZoneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogicalSwitch resources.\n",
                "properties": {
                    "addressBindings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LogicalSwitchAddressBinding:LogicalSwitchAddressBinding"
                        },
                        "description": "List of Address Bindings for the logical switch. This setting allows to provide bindings between IP address, mac Address and vlan.\n"
                    },
                    "adminState": {
                        "type": "string",
                        "description": "Admin state for the logical switch. Accepted values - 'UP' or 'DOWN'. The default value is 'UP'.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name, defaults to ID if not set.\n"
                    },
                    "ipPoolId": {
                        "type": "string",
                        "description": "Ip Pool ID to be associated with the logical switch.\n"
                    },
                    "macPoolId": {
                        "type": "string",
                        "description": "Mac Pool ID to be associated with the logical switch.\n"
                    },
                    "replicationMode": {
                        "type": "string",
                        "description": "Replication mode of the Logical Switch. Accepted values - 'MTEP' (Hierarchical Two-Tier replication) and 'SOURCE' (Head Replication), with 'MTEP' being the default value. Applies to overlay logical switches.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "switchingProfileIds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LogicalSwitchSwitchingProfileId:LogicalSwitchSwitchingProfileId"
                        },
                        "description": "List of IDs of switching profiles (of various types) to be associated with this switch. Default switching profiles will be used if not specified.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LogicalSwitchTag:LogicalSwitchTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this logical switch.\n"
                    },
                    "transportZoneId": {
                        "type": "string",
                        "description": "Transport Zone ID for the logical switch.\n",
                        "willReplaceOnChanges": true
                    },
                    "vlan": {
                        "type": "integer",
                        "description": "Vlan for vlan logical switch. This attribute is deprecated, please use nsxt.VlanLogicalSwitch resource to manage vlan logical switches.\n",
                        "deprecationMessage": "Use nsxt_vlan_logical_switch resource instead"
                    },
                    "vni": {
                        "type": "integer",
                        "description": "Vni for the logical switch.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/logicalTier0Router:LogicalTier0Router": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "edgeClusterId": {
                    "type": "string",
                    "description": "Edge Cluster ID for the logical Tier0 router. Changing this setting on existing router will re-create the router.\n"
                },
                "failoverMode": {
                    "type": "string",
                    "description": "Failover mode which determines whether the preferred service router instance for given logical router will preempt the peer. Accepted values are PREEMPTIVE/NON_PREEMPTIVE. This setting is relevant only for ACTIVE_STANDBY high availability mode.\n"
                },
                "firewallSections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalTier0RouterFirewallSection:LogicalTier0RouterFirewallSection"
                    },
                    "description": "(Optional) The list of firewall sections for this router\n"
                },
                "highAvailabilityMode": {
                    "type": "string",
                    "description": "High availability mode \"ACTIVE_ACTIVE\"/\"ACTIVE_STANDBY\". Changing this setting on existing router will re-create the router.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalTier0RouterTag:LogicalTier0RouterTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this logical Tier0 router.\n"
                }
            },
            "required": [
                "displayName",
                "edgeClusterId",
                "failoverMode",
                "firewallSections",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "edgeClusterId": {
                    "type": "string",
                    "description": "Edge Cluster ID for the logical Tier0 router. Changing this setting on existing router will re-create the router.\n",
                    "willReplaceOnChanges": true
                },
                "failoverMode": {
                    "type": "string",
                    "description": "Failover mode which determines whether the preferred service router instance for given logical router will preempt the peer. Accepted values are PREEMPTIVE/NON_PREEMPTIVE. This setting is relevant only for ACTIVE_STANDBY high availability mode.\n"
                },
                "firewallSections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalTier0RouterFirewallSection:LogicalTier0RouterFirewallSection"
                    },
                    "description": "(Optional) The list of firewall sections for this router\n"
                },
                "highAvailabilityMode": {
                    "type": "string",
                    "description": "High availability mode \"ACTIVE_ACTIVE\"/\"ACTIVE_STANDBY\". Changing this setting on existing router will re-create the router.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalTier0RouterTag:LogicalTier0RouterTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this logical Tier0 router.\n"
                }
            },
            "requiredInputs": [
                "edgeClusterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogicalTier0Router resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name, defaults to ID if not set.\n"
                    },
                    "edgeClusterId": {
                        "type": "string",
                        "description": "Edge Cluster ID for the logical Tier0 router. Changing this setting on existing router will re-create the router.\n",
                        "willReplaceOnChanges": true
                    },
                    "failoverMode": {
                        "type": "string",
                        "description": "Failover mode which determines whether the preferred service router instance for given logical router will preempt the peer. Accepted values are PREEMPTIVE/NON_PREEMPTIVE. This setting is relevant only for ACTIVE_STANDBY high availability mode.\n"
                    },
                    "firewallSections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LogicalTier0RouterFirewallSection:LogicalTier0RouterFirewallSection"
                        },
                        "description": "(Optional) The list of firewall sections for this router\n"
                    },
                    "highAvailabilityMode": {
                        "type": "string",
                        "description": "High availability mode \"ACTIVE_ACTIVE\"/\"ACTIVE_STANDBY\". Changing this setting on existing router will re-create the router.\n",
                        "willReplaceOnChanges": true
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LogicalTier0RouterTag:LogicalTier0RouterTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this logical Tier0 router.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/logicalTier1Router:LogicalTier1Router": {
            "properties": {
                "advertiseConfigRevision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the advertisement configuration object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "advertiseConnectedRoutes": {
                    "type": "boolean",
                    "description": "Enable the router advertisement for all NSX connected routes\n"
                },
                "advertiseLbSnatIpRoutes": {
                    "type": "boolean",
                    "description": "Enable the router advertisement for LB SNAT IP routes\n"
                },
                "advertiseLbVipRoutes": {
                    "type": "boolean",
                    "description": "Enable the router advertisement for LB VIP routes\n"
                },
                "advertiseNatRoutes": {
                    "type": "boolean",
                    "description": "Enable the router advertisement for NAT routes\n"
                },
                "advertiseStaticRoutes": {
                    "type": "boolean",
                    "description": "Enable the router advertisement for static routes\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "edgeClusterId": {
                    "type": "string",
                    "description": "Edge Cluster ID for the logical Tier1 router.\n"
                },
                "enableRouterAdvertisement": {
                    "type": "boolean",
                    "description": "Enable the router advertisement\n"
                },
                "failoverMode": {
                    "type": "string",
                    "description": "This failover mode determines, whether the preferred service router instance for given logical router will preempt the peer. Note - It can be specified if and only if logical router is ACTIVE_STANDBY and NON_PREEMPTIVE mode is supported only for a Tier1 logical router. For ACTIVE_ACTIVE logical routers, this field must not be populated\n"
                },
                "firewallSections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalTier1RouterFirewallSection:LogicalTier1RouterFirewallSection"
                    },
                    "description": "(Optional) The list of firewall sections for this router\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalTier1RouterTag:LogicalTier1RouterTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this logical Tier1 router.\n"
                }
            },
            "required": [
                "advertiseConfigRevision",
                "displayName",
                "firewallSections",
                "revision"
            ],
            "inputProperties": {
                "advertiseConnectedRoutes": {
                    "type": "boolean",
                    "description": "Enable the router advertisement for all NSX connected routes\n"
                },
                "advertiseLbSnatIpRoutes": {
                    "type": "boolean",
                    "description": "Enable the router advertisement for LB SNAT IP routes\n"
                },
                "advertiseLbVipRoutes": {
                    "type": "boolean",
                    "description": "Enable the router advertisement for LB VIP routes\n"
                },
                "advertiseNatRoutes": {
                    "type": "boolean",
                    "description": "Enable the router advertisement for NAT routes\n"
                },
                "advertiseStaticRoutes": {
                    "type": "boolean",
                    "description": "Enable the router advertisement for static routes\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "edgeClusterId": {
                    "type": "string",
                    "description": "Edge Cluster ID for the logical Tier1 router.\n",
                    "willReplaceOnChanges": true
                },
                "enableRouterAdvertisement": {
                    "type": "boolean",
                    "description": "Enable the router advertisement\n"
                },
                "failoverMode": {
                    "type": "string",
                    "description": "This failover mode determines, whether the preferred service router instance for given logical router will preempt the peer. Note - It can be specified if and only if logical router is ACTIVE_STANDBY and NON_PREEMPTIVE mode is supported only for a Tier1 logical router. For ACTIVE_ACTIVE logical routers, this field must not be populated\n"
                },
                "firewallSections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalTier1RouterFirewallSection:LogicalTier1RouterFirewallSection"
                    },
                    "description": "(Optional) The list of firewall sections for this router\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/LogicalTier1RouterTag:LogicalTier1RouterTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this logical Tier1 router.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogicalTier1Router resources.\n",
                "properties": {
                    "advertiseConfigRevision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the advertisement configuration object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "advertiseConnectedRoutes": {
                        "type": "boolean",
                        "description": "Enable the router advertisement for all NSX connected routes\n"
                    },
                    "advertiseLbSnatIpRoutes": {
                        "type": "boolean",
                        "description": "Enable the router advertisement for LB SNAT IP routes\n"
                    },
                    "advertiseLbVipRoutes": {
                        "type": "boolean",
                        "description": "Enable the router advertisement for LB VIP routes\n"
                    },
                    "advertiseNatRoutes": {
                        "type": "boolean",
                        "description": "Enable the router advertisement for NAT routes\n"
                    },
                    "advertiseStaticRoutes": {
                        "type": "boolean",
                        "description": "Enable the router advertisement for static routes\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name, defaults to ID if not set.\n"
                    },
                    "edgeClusterId": {
                        "type": "string",
                        "description": "Edge Cluster ID for the logical Tier1 router.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableRouterAdvertisement": {
                        "type": "boolean",
                        "description": "Enable the router advertisement\n"
                    },
                    "failoverMode": {
                        "type": "string",
                        "description": "This failover mode determines, whether the preferred service router instance for given logical router will preempt the peer. Note - It can be specified if and only if logical router is ACTIVE_STANDBY and NON_PREEMPTIVE mode is supported only for a Tier1 logical router. For ACTIVE_ACTIVE logical routers, this field must not be populated\n"
                    },
                    "firewallSections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LogicalTier1RouterFirewallSection:LogicalTier1RouterFirewallSection"
                        },
                        "description": "(Optional) The list of firewall sections for this router\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/LogicalTier1RouterTag:LogicalTier1RouterTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this logical Tier1 router.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/macManagementSwitchingProfile:MacManagementSwitchingProfile": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "macChangeAllowed": {
                    "type": "boolean",
                    "description": "A boolean flag indicating allowing source MAC address change.\n"
                },
                "macLearning": {
                    "$ref": "#/types/nsxt:index/MacManagementSwitchingProfileMacLearning:MacManagementSwitchingProfileMacLearning",
                    "description": "Mac learning configuration:\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/MacManagementSwitchingProfileTag:MacManagementSwitchingProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this MAC management switching profile.\n"
                }
            },
            "required": [
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "macChangeAllowed": {
                    "type": "boolean",
                    "description": "A boolean flag indicating allowing source MAC address change.\n"
                },
                "macLearning": {
                    "$ref": "#/types/nsxt:index/MacManagementSwitchingProfileMacLearning:MacManagementSwitchingProfileMacLearning",
                    "description": "Mac learning configuration:\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/MacManagementSwitchingProfileTag:MacManagementSwitchingProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this MAC management switching profile.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MacManagementSwitchingProfile resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "macChangeAllowed": {
                        "type": "boolean",
                        "description": "A boolean flag indicating allowing source MAC address change.\n"
                    },
                    "macLearning": {
                        "$ref": "#/types/nsxt:index/MacManagementSwitchingProfileMacLearning:MacManagementSwitchingProfileMacLearning",
                        "description": "Mac learning configuration:\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/MacManagementSwitchingProfileTag:MacManagementSwitchingProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this MAC management switching profile.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/managerCluster:ManagerCluster": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@SCC-Hyperscale-fr/nsxt\";\n\nconst test = new nsxt.ManagerCluster(\"test\", {nodes: [\n    {\n        ipAddress: \"192.168.240.32\",\n        password: \"testpassword2\",\n        username: \"admin\",\n    },\n    {\n        ipAddress: \"192.168.240.33\",\n        password: \"testpassword3\",\n        username: \"admin\",\n    },\n]});\n```\n```python\nimport pulumi\nimport hyperscale_pulumi_nsxt as nsxt\n\ntest = nsxt.ManagerCluster(\"test\", nodes=[\n    nsxt.ManagerClusterNodeArgs(\n        ip_address=\"192.168.240.32\",\n        password=\"testpassword2\",\n        username=\"admin\",\n    ),\n    nsxt.ManagerClusterNodeArgs(\n        ip_address=\"192.168.240.33\",\n        password=\"testpassword3\",\n        username=\"admin\",\n    ),\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = SCC-Hyperscale-fr.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Nsxt.ManagerCluster(\"test\", new()\n    {\n        Nodes = new[]\n        {\n            new Nsxt.Inputs.ManagerClusterNodeArgs\n            {\n                IpAddress = \"192.168.240.32\",\n                Password = \"testpassword2\",\n                Username = \"admin\",\n            },\n            new Nsxt.Inputs.ManagerClusterNodeArgs\n            {\n                IpAddress = \"192.168.240.33\",\n                Password = \"testpassword3\",\n                Username = \"admin\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.NewManagerCluster(ctx, \"test\", \u0026nsxt.ManagerClusterArgs{\n\t\t\tNodes: nsxt.ManagerClusterNodeArray{\n\t\t\t\t\u0026nsxt.ManagerClusterNodeArgs{\n\t\t\t\t\tIpAddress: pulumi.String(\"192.168.240.32\"),\n\t\t\t\t\tPassword:  pulumi.String(\"testpassword2\"),\n\t\t\t\t\tUsername:  pulumi.String(\"admin\"),\n\t\t\t\t},\n\t\t\t\t\u0026nsxt.ManagerClusterNodeArgs{\n\t\t\t\t\tIpAddress: pulumi.String(\"192.168.240.33\"),\n\t\t\t\t\tPassword:  pulumi.String(\"testpassword3\"),\n\t\t\t\t\tUsername:  pulumi.String(\"admin\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.ManagerCluster;\nimport com.pulumi.nsxt.ManagerClusterArgs;\nimport com.pulumi.nsxt.inputs.ManagerClusterNodeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new ManagerCluster(\"test\", ManagerClusterArgs.builder()        \n            .nodes(            \n                ManagerClusterNodeArgs.builder()\n                    .ipAddress(\"192.168.240.32\")\n                    .password(\"testpassword2\")\n                    .username(\"admin\")\n                    .build(),\n                ManagerClusterNodeArgs.builder()\n                    .ipAddress(\"192.168.240.33\")\n                    .password(\"testpassword3\")\n                    .username(\"admin\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: nsxt:ManagerCluster\n    properties:\n      nodes:\n        - ipAddress: 192.168.240.32\n          password: testpassword2\n          username: admin\n        - ipAddress: 192.168.240.33\n          password: testpassword3\n          username: admin\n```\n{{% /example %}}\n{{% /examples %}}\n## Importing\n\nImporting is not supported for this resource.\n",
            "properties": {
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/ManagerClusterNode:ManagerClusterNode"
                    },
                    "description": "IP Address of the node that will join the cluster of the host node.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's\nchanges, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET\noperation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected\n"
                }
            },
            "required": [
                "nodes",
                "revision"
            ],
            "inputProperties": {
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/ManagerClusterNode:ManagerClusterNode"
                    },
                    "description": "IP Address of the node that will join the cluster of the host node.\n"
                }
            },
            "requiredInputs": [
                "nodes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagerCluster resources.\n",
                "properties": {
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/ManagerClusterNode:ManagerClusterNode"
                        },
                        "description": "IP Address of the node that will join the cluster of the host node.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's\nchanges, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET\noperation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/natRule:NatRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "NAT rule action type. Valid actions are: SNAT, DNAT, NO_NAT and REFLEXIVE. All rules in a logical router are either stateless or stateful. Mix is not supported. SNAT and DNAT are stateful, and can NOT be supported when the logical router is running at active-active HA mode. The REFLEXIVE action is stateless. The NO_NAT action has no translated_fields, only match fields.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "enable/disable the rule.\n"
                },
                "logging": {
                    "type": "boolean",
                    "description": "enable/disable the logging of rule.\n"
                },
                "logicalRouterId": {
                    "type": "string",
                    "description": "ID of the logical router.\n"
                },
                "matchDestinationNetwork": {
                    "type": "string",
                    "description": "IP Address | CIDR. Omitting this field implies Any.\n"
                },
                "matchSourceNetwork": {
                    "type": "string",
                    "description": "IP Address | CIDR. Omitting this field implies Any.\n"
                },
                "natPass": {
                    "type": "boolean",
                    "description": "Enable/disable to bypass following firewall stage. The default is true, meaning that the following firewall stage will be skipped. Please note, if action is NO_NAT, then nat_pass must be set to true or omitted.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "rulePriority": {
                    "type": "integer",
                    "description": "The priority of the rule which is ascending, valid range [0-2147483647]. If multiple rules have the same priority, evaluation sequence is undefined.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/NatRuleTag:NatRuleTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this NAT rule.\n"
                },
                "translatedNetwork": {
                    "type": "string",
                    "description": "IP Address | IP Range | CIDR.\n"
                },
                "translatedPorts": {
                    "type": "string",
                    "description": "port number or port range. Allowed only when action=DNAT.\n"
                }
            },
            "required": [
                "action",
                "displayName",
                "logicalRouterId",
                "revision",
                "rulePriority"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "NAT rule action type. Valid actions are: SNAT, DNAT, NO_NAT and REFLEXIVE. All rules in a logical router are either stateless or stateful. Mix is not supported. SNAT and DNAT are stateful, and can NOT be supported when the logical router is running at active-active HA mode. The REFLEXIVE action is stateless. The NO_NAT action has no translated_fields, only match fields.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "enable/disable the rule.\n"
                },
                "logging": {
                    "type": "boolean",
                    "description": "enable/disable the logging of rule.\n"
                },
                "logicalRouterId": {
                    "type": "string",
                    "description": "ID of the logical router.\n"
                },
                "matchDestinationNetwork": {
                    "type": "string",
                    "description": "IP Address | CIDR. Omitting this field implies Any.\n"
                },
                "matchSourceNetwork": {
                    "type": "string",
                    "description": "IP Address | CIDR. Omitting this field implies Any.\n"
                },
                "natPass": {
                    "type": "boolean",
                    "description": "Enable/disable to bypass following firewall stage. The default is true, meaning that the following firewall stage will be skipped. Please note, if action is NO_NAT, then nat_pass must be set to true or omitted.\n"
                },
                "rulePriority": {
                    "type": "integer",
                    "description": "The priority of the rule which is ascending, valid range [0-2147483647]. If multiple rules have the same priority, evaluation sequence is undefined.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/NatRuleTag:NatRuleTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this NAT rule.\n"
                },
                "translatedNetwork": {
                    "type": "string",
                    "description": "IP Address | IP Range | CIDR.\n"
                },
                "translatedPorts": {
                    "type": "string",
                    "description": "port number or port range. Allowed only when action=DNAT.\n"
                }
            },
            "requiredInputs": [
                "action",
                "logicalRouterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NatRule resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "NAT rule action type. Valid actions are: SNAT, DNAT, NO_NAT and REFLEXIVE. All rules in a logical router are either stateless or stateful. Mix is not supported. SNAT and DNAT are stateful, and can NOT be supported when the logical router is running at active-active HA mode. The REFLEXIVE action is stateless. The NO_NAT action has no translated_fields, only match fields.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "enable/disable the rule.\n"
                    },
                    "logging": {
                        "type": "boolean",
                        "description": "enable/disable the logging of rule.\n"
                    },
                    "logicalRouterId": {
                        "type": "string",
                        "description": "ID of the logical router.\n"
                    },
                    "matchDestinationNetwork": {
                        "type": "string",
                        "description": "IP Address | CIDR. Omitting this field implies Any.\n"
                    },
                    "matchSourceNetwork": {
                        "type": "string",
                        "description": "IP Address | CIDR. Omitting this field implies Any.\n"
                    },
                    "natPass": {
                        "type": "boolean",
                        "description": "Enable/disable to bypass following firewall stage. The default is true, meaning that the following firewall stage will be skipped. Please note, if action is NO_NAT, then nat_pass must be set to true or omitted.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "rulePriority": {
                        "type": "integer",
                        "description": "The priority of the rule which is ascending, valid range [0-2147483647]. If multiple rules have the same priority, evaluation sequence is undefined.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/NatRuleTag:NatRuleTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this NAT rule.\n"
                    },
                    "translatedNetwork": {
                        "type": "string",
                        "description": "IP Address | IP Range | CIDR.\n"
                    },
                    "translatedPorts": {
                        "type": "string",
                        "description": "port number or port range. Allowed only when action=DNAT.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/nsGroup:NsGroup": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/NsGroupMember:NsGroupMember"
                    },
                    "description": "Reference to the direct/static members of the NSGroup. Can be ID based expressions only. VirtualMachine cannot be added as a static member.\n"
                },
                "membershipCriterias": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/NsGroupMembershipCriteria:NsGroupMembershipCriteria"
                    },
                    "description": "List of tag or ID expressions which define the membership criteria for this NSGroup. An object must satisfy at least one of these expressions to qualify as a member of this group.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/NsGroupTag:NsGroupTag"
                    },
                    "description": "Tag value for matching dynamic members.\n"
                }
            },
            "required": [
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/NsGroupMember:NsGroupMember"
                    },
                    "description": "Reference to the direct/static members of the NSGroup. Can be ID based expressions only. VirtualMachine cannot be added as a static member.\n"
                },
                "membershipCriterias": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/NsGroupMembershipCriteria:NsGroupMembershipCriteria"
                    },
                    "description": "List of tag or ID expressions which define the membership criteria for this NSGroup. An object must satisfy at least one of these expressions to qualify as a member of this group.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/NsGroupTag:NsGroupTag"
                    },
                    "description": "Tag value for matching dynamic members.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/NsGroupMember:NsGroupMember"
                        },
                        "description": "Reference to the direct/static members of the NSGroup. Can be ID based expressions only. VirtualMachine cannot be added as a static member.\n"
                    },
                    "membershipCriterias": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/NsGroupMembershipCriteria:NsGroupMembershipCriteria"
                        },
                        "description": "List of tag or ID expressions which define the membership criteria for this NSGroup. An object must satisfy at least one of these expressions to qualify as a member of this group.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/NsGroupTag:NsGroupTag"
                        },
                        "description": "Tag value for matching dynamic members.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/nsServiceGroup:NsServiceGroup": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of NSServices IDs that can be added as members to an NSServiceGroup. All members should be of the same L2 type: Ethernet, or Non Ethernet.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/NsServiceGroupTag:NsServiceGroupTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this NS service group.\n"
                }
            },
            "required": [
                "displayName",
                "members",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of NSServices IDs that can be added as members to an NSServiceGroup. All members should be of the same L2 type: Ethernet, or Non Ethernet.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/NsServiceGroupTag:NsServiceGroupTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this NS service group.\n"
                }
            },
            "requiredInputs": [
                "members"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NsServiceGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of NSServices IDs that can be added as members to an NSServiceGroup. All members should be of the same L2 type: Ethernet, or Non Ethernet.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/NsServiceGroupTag:NsServiceGroupTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this NS service group.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyBgpConfig:PolicyBgpConfig": {
            "properties": {
                "ecmp": {
                    "type": "boolean",
                    "description": "A boolean flag to enable/disable ECMP. Default is `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A boolean flag to enable/disable BGP. Default is `true`.\n"
                },
                "gatewayId": {
                    "type": "string",
                    "description": "NSX ID of associated Tier0 Gateway\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Gateway for this BGP config\n"
                },
                "gracefulRestartMode": {
                    "type": "string",
                    "description": "Setting to control BGP graceful restart mode, one of `DISABLE`, `GR_AND_HELPER`, `HELPER_ONLY`.\n"
                },
                "gracefulRestartStaleRouteTimer": {
                    "type": "integer",
                    "description": "BGP stale route timer. Default is `600`.\n"
                },
                "gracefulRestartTimer": {
                    "type": "integer",
                    "description": "BGP graceful restart timer. Default is `180`.\n"
                },
                "interSrIbgp": {
                    "type": "boolean",
                    "description": "A boolean flag to enable/disable inter SR IBGP configuration. Default is `true`.\n"
                },
                "localAsNum": {
                    "type": "string",
                    "description": "BGP AS number in ASPLAIN/ASDOT Format. This attribute is required for non-VRF configurations.\n"
                },
                "localeServiceId": {
                    "type": "string",
                    "description": "NSX ID of associated Gateway Locale Service\n"
                },
                "multipathRelax": {
                    "type": "boolean",
                    "description": "A boolean flag to enable/disable multipath relax for BGP. Default is `true`.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource. This path should be used as `bgp_path` in `nsxt.PolicyBgpNeighbor` resource configuration.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "routeAggregations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyBgpConfigRouteAggregation:PolicyBgpConfigRouteAggregation"
                    },
                    "description": "Zero or more route aggregations for BGP.\n"
                },
                "sitePath": {
                    "type": "string",
                    "description": "Path for policy site. This attribute is required for Global Manager and is not relevant for Local Manager.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyBgpConfigTag:PolicyBgpConfigTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Tier-0 gateway's BGP configuration.\n"
                }
            },
            "required": [
                "gatewayId",
                "gatewayPath",
                "interSrIbgp",
                "localAsNum",
                "localeServiceId",
                "multipathRelax",
                "path",
                "revision"
            ],
            "inputProperties": {
                "ecmp": {
                    "type": "boolean",
                    "description": "A boolean flag to enable/disable ECMP. Default is `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A boolean flag to enable/disable BGP. Default is `true`.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Gateway for this BGP config\n",
                    "willReplaceOnChanges": true
                },
                "gracefulRestartMode": {
                    "type": "string",
                    "description": "Setting to control BGP graceful restart mode, one of `DISABLE`, `GR_AND_HELPER`, `HELPER_ONLY`.\n"
                },
                "gracefulRestartStaleRouteTimer": {
                    "type": "integer",
                    "description": "BGP stale route timer. Default is `600`.\n"
                },
                "gracefulRestartTimer": {
                    "type": "integer",
                    "description": "BGP graceful restart timer. Default is `180`.\n"
                },
                "interSrIbgp": {
                    "type": "boolean",
                    "description": "A boolean flag to enable/disable inter SR IBGP configuration. Default is `true`.\n"
                },
                "localAsNum": {
                    "type": "string",
                    "description": "BGP AS number in ASPLAIN/ASDOT Format. This attribute is required for non-VRF configurations.\n"
                },
                "multipathRelax": {
                    "type": "boolean",
                    "description": "A boolean flag to enable/disable multipath relax for BGP. Default is `true`.\n"
                },
                "routeAggregations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyBgpConfigRouteAggregation:PolicyBgpConfigRouteAggregation"
                    },
                    "description": "Zero or more route aggregations for BGP.\n"
                },
                "sitePath": {
                    "type": "string",
                    "description": "Path for policy site. This attribute is required for Global Manager and is not relevant for Local Manager.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyBgpConfigTag:PolicyBgpConfigTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Tier-0 gateway's BGP configuration.\n"
                }
            },
            "requiredInputs": [
                "gatewayPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyBgpConfig resources.\n",
                "properties": {
                    "ecmp": {
                        "type": "boolean",
                        "description": "A boolean flag to enable/disable ECMP. Default is `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A boolean flag to enable/disable BGP. Default is `true`.\n"
                    },
                    "gatewayId": {
                        "type": "string",
                        "description": "NSX ID of associated Tier0 Gateway\n"
                    },
                    "gatewayPath": {
                        "type": "string",
                        "description": "Gateway for this BGP config\n",
                        "willReplaceOnChanges": true
                    },
                    "gracefulRestartMode": {
                        "type": "string",
                        "description": "Setting to control BGP graceful restart mode, one of `DISABLE`, `GR_AND_HELPER`, `HELPER_ONLY`.\n"
                    },
                    "gracefulRestartStaleRouteTimer": {
                        "type": "integer",
                        "description": "BGP stale route timer. Default is `600`.\n"
                    },
                    "gracefulRestartTimer": {
                        "type": "integer",
                        "description": "BGP graceful restart timer. Default is `180`.\n"
                    },
                    "interSrIbgp": {
                        "type": "boolean",
                        "description": "A boolean flag to enable/disable inter SR IBGP configuration. Default is `true`.\n"
                    },
                    "localAsNum": {
                        "type": "string",
                        "description": "BGP AS number in ASPLAIN/ASDOT Format. This attribute is required for non-VRF configurations.\n"
                    },
                    "localeServiceId": {
                        "type": "string",
                        "description": "NSX ID of associated Gateway Locale Service\n"
                    },
                    "multipathRelax": {
                        "type": "boolean",
                        "description": "A boolean flag to enable/disable multipath relax for BGP. Default is `true`.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource. This path should be used as `bgp_path` in `nsxt.PolicyBgpNeighbor` resource configuration.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "routeAggregations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyBgpConfigRouteAggregation:PolicyBgpConfigRouteAggregation"
                        },
                        "description": "Zero or more route aggregations for BGP.\n"
                    },
                    "sitePath": {
                        "type": "string",
                        "description": "Path for policy site. This attribute is required for Global Manager and is not relevant for Local Manager.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyBgpConfigTag:PolicyBgpConfigTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this Tier-0 gateway's BGP configuration.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyBgpNeighbor:PolicyBgpNeighbor": {
            "properties": {
                "allowAsIn": {
                    "type": "boolean",
                    "description": "Flag to enable allowas_in option for BGP neighbor. Defaults to `false`.\n"
                },
                "bfdConfig": {
                    "$ref": "#/types/nsxt:index/PolicyBgpNeighborBfdConfig:PolicyBgpNeighborBfdConfig",
                    "description": "The BFD configuration.\n"
                },
                "bgpPath": {
                    "type": "string",
                    "description": "The policy path to the BGP configuration for this neighbor.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "gracefulRestartMode": {
                    "type": "string",
                    "description": "BGP Graceful Restart Configuration Mode. One of `DISABLE`, `GR_AND_HELPER` or `HELPER_ONLY`.\n"
                },
                "holdDownTime": {
                    "type": "integer",
                    "description": "Wait time in seconds before declaring peer dead. Defaults to `180`.\n"
                },
                "keepAliveTime": {
                    "type": "integer",
                    "description": "Interval between keep alive messages sent to peer. Defaults to `60`.\n"
                },
                "maximumHopLimit": {
                    "type": "integer",
                    "description": "Maximum number of hops allowed to reach BGP neighbor. Defaults to `1`.\n"
                },
                "neighborAddress": {
                    "type": "string",
                    "description": "Neighbor IP Address.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for BGP neighbor authentication. Set to the empty string to clear out the password.\n",
                    "secret": true
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "remoteAsNum": {
                    "type": "string",
                    "description": "ASN of the neighbor in ASPLAIN/ASDOT Format.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "routeFilterings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyBgpNeighborRouteFiltering:PolicyBgpNeighborRouteFiltering"
                    },
                    "description": "Up to 2 route filters for the neighbor. Note that prior to NSX version 3.0.0, only 1 element is supported.\n"
                },
                "sourceAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of up to 8 source IP Addresses for BGP peering. `ip_addresses` field of an existing `nsxt.PolicyTier0GatewayInterface` can be used here.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyBgpNeighborTag:PolicyBgpNeighborTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "bgpPath",
                "displayName",
                "neighborAddress",
                "nsxId",
                "path",
                "remoteAsNum",
                "revision",
                "routeFilterings"
            ],
            "inputProperties": {
                "allowAsIn": {
                    "type": "boolean",
                    "description": "Flag to enable allowas_in option for BGP neighbor. Defaults to `false`.\n"
                },
                "bfdConfig": {
                    "$ref": "#/types/nsxt:index/PolicyBgpNeighborBfdConfig:PolicyBgpNeighborBfdConfig",
                    "description": "The BFD configuration.\n"
                },
                "bgpPath": {
                    "type": "string",
                    "description": "The policy path to the BGP configuration for this neighbor.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "gracefulRestartMode": {
                    "type": "string",
                    "description": "BGP Graceful Restart Configuration Mode. One of `DISABLE`, `GR_AND_HELPER` or `HELPER_ONLY`.\n"
                },
                "holdDownTime": {
                    "type": "integer",
                    "description": "Wait time in seconds before declaring peer dead. Defaults to `180`.\n"
                },
                "keepAliveTime": {
                    "type": "integer",
                    "description": "Interval between keep alive messages sent to peer. Defaults to `60`.\n"
                },
                "maximumHopLimit": {
                    "type": "integer",
                    "description": "Maximum number of hops allowed to reach BGP neighbor. Defaults to `1`.\n"
                },
                "neighborAddress": {
                    "type": "string",
                    "description": "Neighbor IP Address.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "Password for BGP neighbor authentication. Set to the empty string to clear out the password.\n",
                    "secret": true
                },
                "remoteAsNum": {
                    "type": "string",
                    "description": "ASN of the neighbor in ASPLAIN/ASDOT Format.\n"
                },
                "routeFilterings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyBgpNeighborRouteFiltering:PolicyBgpNeighborRouteFiltering"
                    },
                    "description": "Up to 2 route filters for the neighbor. Note that prior to NSX version 3.0.0, only 1 element is supported.\n"
                },
                "sourceAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of up to 8 source IP Addresses for BGP peering. `ip_addresses` field of an existing `nsxt.PolicyTier0GatewayInterface` can be used here.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyBgpNeighborTag:PolicyBgpNeighborTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "bgpPath",
                "displayName",
                "neighborAddress",
                "remoteAsNum"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyBgpNeighbor resources.\n",
                "properties": {
                    "allowAsIn": {
                        "type": "boolean",
                        "description": "Flag to enable allowas_in option for BGP neighbor. Defaults to `false`.\n"
                    },
                    "bfdConfig": {
                        "$ref": "#/types/nsxt:index/PolicyBgpNeighborBfdConfig:PolicyBgpNeighborBfdConfig",
                        "description": "The BFD configuration.\n"
                    },
                    "bgpPath": {
                        "type": "string",
                        "description": "The policy path to the BGP configuration for this neighbor.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "gracefulRestartMode": {
                        "type": "string",
                        "description": "BGP Graceful Restart Configuration Mode. One of `DISABLE`, `GR_AND_HELPER` or `HELPER_ONLY`.\n"
                    },
                    "holdDownTime": {
                        "type": "integer",
                        "description": "Wait time in seconds before declaring peer dead. Defaults to `180`.\n"
                    },
                    "keepAliveTime": {
                        "type": "integer",
                        "description": "Interval between keep alive messages sent to peer. Defaults to `60`.\n"
                    },
                    "maximumHopLimit": {
                        "type": "integer",
                        "description": "Maximum number of hops allowed to reach BGP neighbor. Defaults to `1`.\n"
                    },
                    "neighborAddress": {
                        "type": "string",
                        "description": "Neighbor IP Address.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for BGP neighbor authentication. Set to the empty string to clear out the password.\n",
                        "secret": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "remoteAsNum": {
                        "type": "string",
                        "description": "ASN of the neighbor in ASPLAIN/ASDOT Format.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "routeFilterings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyBgpNeighborRouteFiltering:PolicyBgpNeighborRouteFiltering"
                        },
                        "description": "Up to 2 route filters for the neighbor. Note that prior to NSX version 3.0.0, only 1 element is supported.\n"
                    },
                    "sourceAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of up to 8 source IP Addresses for BGP peering. `ip_addresses` field of an existing `nsxt.PolicyTier0GatewayInterface` can be used here.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyBgpNeighborTag:PolicyBgpNeighborTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyContextProfile:PolicyContextProfile": {
            "properties": {
                "appIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyContextProfileAppId:PolicyContextProfileAppId"
                    },
                    "description": "A block to specify app id attributes for the context profile. Only one block is allowed.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyContextProfileContext:PolicyContextProfileContext",
                    "description": "The context which the object belongs to\n"
                },
                "customUrl": {
                    "$ref": "#/types/nsxt:index/PolicyContextProfileCustomUrl:PolicyContextProfileCustomUrl",
                    "description": "A block to specify custom URL attributes for the context profile. Only one block is allowed.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the attribute.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "domainName": {
                    "$ref": "#/types/nsxt:index/PolicyContextProfileDomainName:PolicyContextProfileDomainName",
                    "description": "A block to specify domain name (FQDN) attributes for the context profile. Only one block is allowed.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyContextProfileTag:PolicyContextProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "urlCategory": {
                    "$ref": "#/types/nsxt:index/PolicyContextProfileUrlCategory:PolicyContextProfileUrlCategory",
                    "description": "A block to specify url category attributes for the context profile. Only one block is allowed.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "appIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyContextProfileAppId:PolicyContextProfileAppId"
                    },
                    "description": "A block to specify app id attributes for the context profile. Only one block is allowed.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyContextProfileContext:PolicyContextProfileContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "customUrl": {
                    "$ref": "#/types/nsxt:index/PolicyContextProfileCustomUrl:PolicyContextProfileCustomUrl",
                    "description": "A block to specify custom URL attributes for the context profile. Only one block is allowed.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the attribute.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "domainName": {
                    "$ref": "#/types/nsxt:index/PolicyContextProfileDomainName:PolicyContextProfileDomainName",
                    "description": "A block to specify domain name (FQDN) attributes for the context profile. Only one block is allowed.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyContextProfileTag:PolicyContextProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "urlCategory": {
                    "$ref": "#/types/nsxt:index/PolicyContextProfileUrlCategory:PolicyContextProfileUrlCategory",
                    "description": "A block to specify url category attributes for the context profile. Only one block is allowed.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyContextProfile resources.\n",
                "properties": {
                    "appIds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyContextProfileAppId:PolicyContextProfileAppId"
                        },
                        "description": "A block to specify app id attributes for the context profile. Only one block is allowed.\n"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyContextProfileContext:PolicyContextProfileContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "customUrl": {
                        "$ref": "#/types/nsxt:index/PolicyContextProfileCustomUrl:PolicyContextProfileCustomUrl",
                        "description": "A block to specify custom URL attributes for the context profile. Only one block is allowed.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the attribute.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "domainName": {
                        "$ref": "#/types/nsxt:index/PolicyContextProfileDomainName:PolicyContextProfileDomainName",
                        "description": "A block to specify domain name (FQDN) attributes for the context profile. Only one block is allowed.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyContextProfileTag:PolicyContextProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    },
                    "urlCategory": {
                        "$ref": "#/types/nsxt:index/PolicyContextProfileUrlCategory:PolicyContextProfileUrlCategory",
                        "description": "A block to specify url category attributes for the context profile. Only one block is allowed.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyContextProfileCustomAttribute:PolicyContextProfileCustomAttribute": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "description": "FQDN or URL to be used as custom attribute.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyContextProfileCustomAttributeContext:PolicyContextProfileCustomAttributeContext",
                    "description": "The context which the object belongs to\n"
                },
                "key": {
                    "type": "string",
                    "description": "Policy Custom Attribute Key. Valid values are \"DOMAIN_NAME\" and \"CUSTOM_URL\"\n"
                }
            },
            "required": [
                "attribute",
                "key"
            ],
            "inputProperties": {
                "attribute": {
                    "type": "string",
                    "description": "FQDN or URL to be used as custom attribute.\n",
                    "willReplaceOnChanges": true
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyContextProfileCustomAttributeContext:PolicyContextProfileCustomAttributeContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "key": {
                    "type": "string",
                    "description": "Policy Custom Attribute Key. Valid values are \"DOMAIN_NAME\" and \"CUSTOM_URL\"\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "attribute",
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyContextProfileCustomAttribute resources.\n",
                "properties": {
                    "attribute": {
                        "type": "string",
                        "description": "FQDN or URL to be used as custom attribute.\n",
                        "willReplaceOnChanges": true
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyContextProfileCustomAttributeContext:PolicyContextProfileCustomAttributeContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "key": {
                        "type": "string",
                        "description": "Policy Custom Attribute Key. Valid values are \"DOMAIN_NAME\" and \"CUSTOM_URL\"\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyDhcpRelay:PolicyDhcpRelay": {
            "properties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyDhcpRelayContext:PolicyDhcpRelayContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "serverAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DHCP server addresses.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyDhcpRelayTag:PolicyDhcpRelayTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision",
                "serverAddresses"
            ],
            "inputProperties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyDhcpRelayContext:PolicyDhcpRelayContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "serverAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DHCP server addresses.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyDhcpRelayTag:PolicyDhcpRelayTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "serverAddresses"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyDhcpRelay resources.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyDhcpRelayContext:PolicyDhcpRelayContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "serverAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of DHCP server addresses.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyDhcpRelayTag:PolicyDhcpRelayTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyDhcpServer:PolicyDhcpServer": {
            "properties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyDhcpServerContext:PolicyDhcpServerContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "edgeClusterPath": {
                    "type": "string",
                    "description": "The Policy path to the edge cluster for this DHCP Server.\n"
                },
                "leaseTime": {
                    "type": "integer",
                    "description": "IP address lease time in seconds. Valid values from `60` to `4294967295`. Default is `86400`.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "preferredEdgePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy paths to edge nodes. The first edge node is assigned as active edge, and second one as standby edge.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "serverAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "DHCP server address in CIDR format. At most 2 supported; one IPv4 and one IPv6 address. Server address can also be specified on segment subnet level.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyDhcpServerTag:PolicyDhcpServerTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision",
                "serverAddresses"
            ],
            "inputProperties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyDhcpServerContext:PolicyDhcpServerContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "edgeClusterPath": {
                    "type": "string",
                    "description": "The Policy path to the edge cluster for this DHCP Server.\n"
                },
                "leaseTime": {
                    "type": "integer",
                    "description": "IP address lease time in seconds. Valid values from `60` to `4294967295`. Default is `86400`.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "preferredEdgePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Policy paths to edge nodes. The first edge node is assigned as active edge, and second one as standby edge.\n"
                },
                "serverAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "DHCP server address in CIDR format. At most 2 supported; one IPv4 and one IPv6 address. Server address can also be specified on segment subnet level.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyDhcpServerTag:PolicyDhcpServerTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyDhcpServer resources.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyDhcpServerContext:PolicyDhcpServerContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "edgeClusterPath": {
                        "type": "string",
                        "description": "The Policy path to the edge cluster for this DHCP Server.\n"
                    },
                    "leaseTime": {
                        "type": "integer",
                        "description": "IP address lease time in seconds. Valid values from `60` to `4294967295`. Default is `86400`.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "preferredEdgePaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Policy paths to edge nodes. The first edge node is assigned as active edge, and second one as standby edge.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "serverAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "DHCP server address in CIDR format. At most 2 supported; one IPv4 and one IPv6 address. Server address can also be specified on segment subnet level.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyDhcpServerTag:PolicyDhcpServerTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyDhcpV4StaticBinding:PolicyDhcpV4StaticBinding": {
            "properties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyDhcpV4StaticBindingContext:PolicyDhcpV4StaticBindingContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "dhcpGenericOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyDhcpV4StaticBindingDhcpGenericOption:PolicyDhcpV4StaticBindingDhcpGenericOption"
                    },
                    "description": "Generic DHCP option number. Please note not all options are supported by the platform.\n"
                },
                "dhcpOption121s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyDhcpV4StaticBindingDhcpOption121:PolicyDhcpV4StaticBindingDhcpOption121"
                    },
                    "description": "DHCP classless static routes.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "gatewayAddress": {
                    "type": "string",
                    "description": "Gateway IPv4 Address. When not specified, gateway address is auto-assigned from segment configuration.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname to assign to the host.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IPv4 address must belong to the subnet, if any, configured on Segment.\n"
                },
                "leaseTime": {
                    "type": "integer",
                    "description": "Lease time, in seconds. Defaults to 86400.\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "MAC address of the host.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "segmentPath": {
                    "type": "string",
                    "description": "Policy path for segment to configure this binding on.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyDhcpV4StaticBindingTag:PolicyDhcpV4StaticBindingTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "displayName",
                "ipAddress",
                "macAddress",
                "nsxId",
                "path",
                "revision",
                "segmentPath"
            ],
            "inputProperties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyDhcpV4StaticBindingContext:PolicyDhcpV4StaticBindingContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "dhcpGenericOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyDhcpV4StaticBindingDhcpGenericOption:PolicyDhcpV4StaticBindingDhcpGenericOption"
                    },
                    "description": "Generic DHCP option number. Please note not all options are supported by the platform.\n"
                },
                "dhcpOption121s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyDhcpV4StaticBindingDhcpOption121:PolicyDhcpV4StaticBindingDhcpOption121"
                    },
                    "description": "DHCP classless static routes.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "gatewayAddress": {
                    "type": "string",
                    "description": "Gateway IPv4 Address. When not specified, gateway address is auto-assigned from segment configuration.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname to assign to the host.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The IPv4 address must belong to the subnet, if any, configured on Segment.\n"
                },
                "leaseTime": {
                    "type": "integer",
                    "description": "Lease time, in seconds. Defaults to 86400.\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "MAC address of the host.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "segmentPath": {
                    "type": "string",
                    "description": "Policy path for segment to configure this binding on.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyDhcpV4StaticBindingTag:PolicyDhcpV4StaticBindingTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "ipAddress",
                "macAddress",
                "segmentPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyDhcpV4StaticBinding resources.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyDhcpV4StaticBindingContext:PolicyDhcpV4StaticBindingContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "dhcpGenericOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyDhcpV4StaticBindingDhcpGenericOption:PolicyDhcpV4StaticBindingDhcpGenericOption"
                        },
                        "description": "Generic DHCP option number. Please note not all options are supported by the platform.\n"
                    },
                    "dhcpOption121s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyDhcpV4StaticBindingDhcpOption121:PolicyDhcpV4StaticBindingDhcpOption121"
                        },
                        "description": "DHCP classless static routes.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "gatewayAddress": {
                        "type": "string",
                        "description": "Gateway IPv4 Address. When not specified, gateway address is auto-assigned from segment configuration.\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "Hostname to assign to the host.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The IPv4 address must belong to the subnet, if any, configured on Segment.\n"
                    },
                    "leaseTime": {
                        "type": "integer",
                        "description": "Lease time, in seconds. Defaults to 86400.\n"
                    },
                    "macAddress": {
                        "type": "string",
                        "description": "MAC address of the host.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "segmentPath": {
                        "type": "string",
                        "description": "Policy path for segment to configure this binding on.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyDhcpV4StaticBindingTag:PolicyDhcpV4StaticBindingTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyDhcpV6StaticBinding:PolicyDhcpV6StaticBinding": {
            "properties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyDhcpV6StaticBindingContext:PolicyDhcpV6StaticBindingContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "dnsNameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DNS Nameservers.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Domain Names.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPv6 addresses.\n"
                },
                "leaseTime": {
                    "type": "integer",
                    "description": "Lease time, in seconds. Defaults to 86400.\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "MAC address of the host.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "preferredTime": {
                    "type": "integer",
                    "description": "Preferred time, in seconds. Must not exceed `lease_lime`.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "segmentPath": {
                    "type": "string",
                    "description": "Policy path for segment to configure this binding on.\n"
                },
                "sntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPv6 Addresses for SNTP Servers.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyDhcpV6StaticBindingTag:PolicyDhcpV6StaticBindingTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "displayName",
                "macAddress",
                "nsxId",
                "path",
                "revision",
                "segmentPath"
            ],
            "inputProperties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyDhcpV6StaticBindingContext:PolicyDhcpV6StaticBindingContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "dnsNameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of DNS Nameservers.\n"
                },
                "domainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Domain Names.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPv6 addresses.\n"
                },
                "leaseTime": {
                    "type": "integer",
                    "description": "Lease time, in seconds. Defaults to 86400.\n"
                },
                "macAddress": {
                    "type": "string",
                    "description": "MAC address of the host.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "preferredTime": {
                    "type": "integer",
                    "description": "Preferred time, in seconds. Must not exceed `lease_lime`.\n"
                },
                "segmentPath": {
                    "type": "string",
                    "description": "Policy path for segment to configure this binding on.\n",
                    "willReplaceOnChanges": true
                },
                "sntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPv6 Addresses for SNTP Servers.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyDhcpV6StaticBindingTag:PolicyDhcpV6StaticBindingTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "macAddress",
                "segmentPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyDhcpV6StaticBinding resources.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyDhcpV6StaticBindingContext:PolicyDhcpV6StaticBindingContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "dnsNameservers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of DNS Nameservers.\n"
                    },
                    "domainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Domain Names.\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IPv6 addresses.\n"
                    },
                    "leaseTime": {
                        "type": "integer",
                        "description": "Lease time, in seconds. Defaults to 86400.\n"
                    },
                    "macAddress": {
                        "type": "string",
                        "description": "MAC address of the host.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "preferredTime": {
                        "type": "integer",
                        "description": "Preferred time, in seconds. Must not exceed `lease_lime`.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "segmentPath": {
                        "type": "string",
                        "description": "Policy path for segment to configure this binding on.\n",
                        "willReplaceOnChanges": true
                    },
                    "sntpServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of IPv6 Addresses for SNTP Servers.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyDhcpV6StaticBindingTag:PolicyDhcpV6StaticBindingTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyDnsForwarderZone:PolicyDnsForwarderZone": {
            "properties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyDnsForwarderZoneContext:PolicyDnsForwarderZoneContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "dnsDomainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "For conditional (FQDN) zones, a list of maximum 5 domains. For Default Forwarder Zone, this attribute should not be specified.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "sourceIp": {
                    "type": "string",
                    "description": "The source IP address used by the DNS Forwarder zone.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyDnsForwarderZoneTag:PolicyDnsForwarderZoneTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "upstreamServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of server IP addresses for this Forwarder Zone.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision",
                "upstreamServers"
            ],
            "inputProperties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyDnsForwarderZoneContext:PolicyDnsForwarderZoneContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "dnsDomainNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "For conditional (FQDN) zones, a list of maximum 5 domains. For Default Forwarder Zone, this attribute should not be specified.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "sourceIp": {
                    "type": "string",
                    "description": "The source IP address used by the DNS Forwarder zone.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyDnsForwarderZoneTag:PolicyDnsForwarderZoneTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "upstreamServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of server IP addresses for this Forwarder Zone.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "upstreamServers"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyDnsForwarderZone resources.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyDnsForwarderZoneContext:PolicyDnsForwarderZoneContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "dnsDomainNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "For conditional (FQDN) zones, a list of maximum 5 domains. For Default Forwarder Zone, this attribute should not be specified.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "sourceIp": {
                        "type": "string",
                        "description": "The source IP address used by the DNS Forwarder zone.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyDnsForwarderZoneTag:PolicyDnsForwarderZoneTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    },
                    "upstreamServers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of server IP addresses for this Forwarder Zone.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyDomain:PolicyDomain": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the Domain resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "sites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of sites (a.k.a locations) for this domain.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyDomainTag:PolicyDomainTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Domain.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision",
                "sites"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the Domain resource.\n",
                    "willReplaceOnChanges": true
                },
                "sites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of sites (a.k.a locations) for this domain.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyDomainTag:PolicyDomainTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Domain.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "sites"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyDomain resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the Domain resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "sites": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of sites (a.k.a locations) for this domain.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyDomainTag:PolicyDomainTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this Domain.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyEvpnConfig:PolicyEvpnConfig": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description for the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name for the resource.\n"
                },
                "evpnTenantPath": {
                    "type": "string",
                    "description": "Policy path for EVPN tenant. Relevant for `ROUTE_SERVER` mode.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Policy Path for Tier0 Gateway to configure EVPN on.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "EVPN Mode, one of `INLINE` or `ROUTE_SERVER`. In `ROUTE_SERVER` mode, edge nodes participate in the BGP EVPN control plane route exchanges only and do not participate in data forwarding.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyEvpnConfigTag:PolicyEvpnConfigTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "vniPoolPath": {
                    "type": "string",
                    "description": "Path of VNI pool to use. This setting is only applicable (and required) with `INLINE` mode.\n"
                }
            },
            "required": [
                "displayName",
                "gatewayPath",
                "mode",
                "path",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description for the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name for the resource.\n"
                },
                "evpnTenantPath": {
                    "type": "string",
                    "description": "Policy path for EVPN tenant. Relevant for `ROUTE_SERVER` mode.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Policy Path for Tier0 Gateway to configure EVPN on.\n",
                    "willReplaceOnChanges": true
                },
                "mode": {
                    "type": "string",
                    "description": "EVPN Mode, one of `INLINE` or `ROUTE_SERVER`. In `ROUTE_SERVER` mode, edge nodes participate in the BGP EVPN control plane route exchanges only and do not participate in data forwarding.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyEvpnConfigTag:PolicyEvpnConfigTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "vniPoolPath": {
                    "type": "string",
                    "description": "Path of VNI pool to use. This setting is only applicable (and required) with `INLINE` mode.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "gatewayPath",
                "mode"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyEvpnConfig resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description for the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name for the resource.\n"
                    },
                    "evpnTenantPath": {
                        "type": "string",
                        "description": "Policy path for EVPN tenant. Relevant for `ROUTE_SERVER` mode.\n"
                    },
                    "gatewayPath": {
                        "type": "string",
                        "description": "Policy Path for Tier0 Gateway to configure EVPN on.\n",
                        "willReplaceOnChanges": true
                    },
                    "mode": {
                        "type": "string",
                        "description": "EVPN Mode, one of `INLINE` or `ROUTE_SERVER`. In `ROUTE_SERVER` mode, edge nodes participate in the BGP EVPN control plane route exchanges only and do not participate in data forwarding.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyEvpnConfigTag:PolicyEvpnConfigTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    },
                    "vniPoolPath": {
                        "type": "string",
                        "description": "Path of VNI pool to use. This setting is only applicable (and required) with `INLINE` mode.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyEvpnTenant:PolicyEvpnTenant": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "mappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyEvpnTenantMapping:PolicyEvpnTenantMapping"
                    },
                    "description": "List of VLAN - VNI mappings for this tenant.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyEvpnTenantTag:PolicyEvpnTenantTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "transportZonePath": {
                    "type": "string",
                    "description": "Policy path for Overlay Transport Zone.\n"
                },
                "vniPoolPath": {
                    "type": "string",
                    "description": "Policy path for existing VNI pool.\n"
                }
            },
            "required": [
                "displayName",
                "mappings",
                "nsxId",
                "path",
                "revision",
                "transportZonePath",
                "vniPoolPath"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "mappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyEvpnTenantMapping:PolicyEvpnTenantMapping"
                    },
                    "description": "List of VLAN - VNI mappings for this tenant.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyEvpnTenantTag:PolicyEvpnTenantTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "transportZonePath": {
                    "type": "string",
                    "description": "Policy path for Overlay Transport Zone.\n"
                },
                "vniPoolPath": {
                    "type": "string",
                    "description": "Policy path for existing VNI pool.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "mappings",
                "transportZonePath",
                "vniPoolPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyEvpnTenant resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "mappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyEvpnTenantMapping:PolicyEvpnTenantMapping"
                        },
                        "description": "List of VLAN - VNI mappings for this tenant.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyEvpnTenantTag:PolicyEvpnTenantTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    },
                    "transportZonePath": {
                        "type": "string",
                        "description": "Policy path for Overlay Transport Zone.\n"
                    },
                    "vniPoolPath": {
                        "type": "string",
                        "description": "Policy path for existing VNI pool.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyEvpnTunnelEndpoint:PolicyEvpnTunnelEndpoint": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "edgeNodePath": {
                    "type": "string",
                    "description": "Edge node path.\n"
                },
                "externalInterfacePath": {
                    "type": "string",
                    "description": "Policy path for External Interface on Tier0 Gateway.\n"
                },
                "gatewayId": {
                    "type": "string",
                    "description": "Tier0 Gateway ID on which EVPN Tunnel is configured.\n"
                },
                "localAddress": {
                    "type": "string",
                    "description": "Local IPv4 IP address.\n"
                },
                "localeServiceId": {
                    "type": "string",
                    "description": "Tier0 Gateway Locale Service ID on which EVPN Tunnel is configured.\n"
                },
                "mtu": {
                    "type": "integer",
                    "description": "Maximal Transmission Unit.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyEvpnTunnelEndpointTag:PolicyEvpnTunnelEndpointTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "displayName",
                "edgeNodePath",
                "externalInterfacePath",
                "gatewayId",
                "localAddress",
                "localeServiceId",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "edgeNodePath": {
                    "type": "string",
                    "description": "Edge node path.\n"
                },
                "externalInterfacePath": {
                    "type": "string",
                    "description": "Policy path for External Interface on Tier0 Gateway.\n",
                    "willReplaceOnChanges": true
                },
                "localAddress": {
                    "type": "string",
                    "description": "Local IPv4 IP address.\n"
                },
                "mtu": {
                    "type": "integer",
                    "description": "Maximal Transmission Unit.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyEvpnTunnelEndpointTag:PolicyEvpnTunnelEndpointTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "edgeNodePath",
                "externalInterfacePath",
                "localAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyEvpnTunnelEndpoint resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "edgeNodePath": {
                        "type": "string",
                        "description": "Edge node path.\n"
                    },
                    "externalInterfacePath": {
                        "type": "string",
                        "description": "Policy path for External Interface on Tier0 Gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "gatewayId": {
                        "type": "string",
                        "description": "Tier0 Gateway ID on which EVPN Tunnel is configured.\n"
                    },
                    "localAddress": {
                        "type": "string",
                        "description": "Local IPv4 IP address.\n"
                    },
                    "localeServiceId": {
                        "type": "string",
                        "description": "Tier0 Gateway Locale Service ID on which EVPN Tunnel is configured.\n"
                    },
                    "mtu": {
                        "type": "integer",
                        "description": "Maximal Transmission Unit.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyEvpnTunnelEndpointTag:PolicyEvpnTunnelEndpointTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyFixedSegment:PolicyFixedSegment": {
            "properties": {
                "advancedConfig": {
                    "$ref": "#/types/nsxt:index/PolicyFixedSegmentAdvancedConfig:PolicyFixedSegmentAdvancedConfig",
                    "description": "Advanced Segment configuration.\n"
                },
                "bridgeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyFixedSegmentBridgeConfig:PolicyFixedSegmentBridgeConfig"
                    },
                    "description": "Bridge configuration\n"
                },
                "connectivityPath": {
                    "type": "string",
                    "description": "Policy path to the connecting Tier-0 or Tier-1.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyFixedSegmentContext:PolicyFixedSegmentContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "dhcpConfigPath": {
                    "type": "string",
                    "description": "Policy path to DHCP server or relay configuration to use for subnets configured on this segment. This attribute is supported with NSX 3.0.0 onwards.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "DNS domain names.\n"
                },
                "l2Extension": {
                    "$ref": "#/types/nsxt:index/PolicyFixedSegmentL2Extension:PolicyFixedSegmentL2Extension",
                    "description": "Configuration for extending Segment through L2 VPN.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "overlayId": {
                    "type": "integer",
                    "description": "Overlay connectivity ID for this Segment.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n* In the `subnet`:\n"
                },
                "replicationMode": {
                    "type": "string",
                    "description": "Replication mode - MTEP or SOURCE\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyFixedSegmentSubnet:PolicyFixedSegmentSubnet"
                    },
                    "description": "Subnet configuration block.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyFixedSegmentTag:PolicyFixedSegmentTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this policy.\n"
                },
                "transportZonePath": {
                    "type": "string",
                    "description": "Policy path to the Overlay transport zone.\n"
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VLAN IDs or ranges. Specifying vlan ids can be useful for overlay segments, f.e. for EVPN.\n"
                }
            },
            "required": [
                "connectivityPath",
                "displayName",
                "nsxId",
                "overlayId",
                "path",
                "revision",
                "transportZonePath"
            ],
            "inputProperties": {
                "advancedConfig": {
                    "$ref": "#/types/nsxt:index/PolicyFixedSegmentAdvancedConfig:PolicyFixedSegmentAdvancedConfig",
                    "description": "Advanced Segment configuration.\n"
                },
                "bridgeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyFixedSegmentBridgeConfig:PolicyFixedSegmentBridgeConfig"
                    },
                    "description": "Bridge configuration\n"
                },
                "connectivityPath": {
                    "type": "string",
                    "description": "Policy path to the connecting Tier-0 or Tier-1.\n",
                    "willReplaceOnChanges": true
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyFixedSegmentContext:PolicyFixedSegmentContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "dhcpConfigPath": {
                    "type": "string",
                    "description": "Policy path to DHCP server or relay configuration to use for subnets configured on this segment. This attribute is supported with NSX 3.0.0 onwards.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "DNS domain names.\n"
                },
                "l2Extension": {
                    "$ref": "#/types/nsxt:index/PolicyFixedSegmentL2Extension:PolicyFixedSegmentL2Extension",
                    "description": "Configuration for extending Segment through L2 VPN.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "overlayId": {
                    "type": "integer",
                    "description": "Overlay connectivity ID for this Segment.\n"
                },
                "replicationMode": {
                    "type": "string",
                    "description": "Replication mode - MTEP or SOURCE\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyFixedSegmentSubnet:PolicyFixedSegmentSubnet"
                    },
                    "description": "Subnet configuration block.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyFixedSegmentTag:PolicyFixedSegmentTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this policy.\n"
                },
                "transportZonePath": {
                    "type": "string",
                    "description": "Policy path to the Overlay transport zone.\n",
                    "willReplaceOnChanges": true
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VLAN IDs or ranges. Specifying vlan ids can be useful for overlay segments, f.e. for EVPN.\n"
                }
            },
            "requiredInputs": [
                "connectivityPath",
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyFixedSegment resources.\n",
                "properties": {
                    "advancedConfig": {
                        "$ref": "#/types/nsxt:index/PolicyFixedSegmentAdvancedConfig:PolicyFixedSegmentAdvancedConfig",
                        "description": "Advanced Segment configuration.\n"
                    },
                    "bridgeConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyFixedSegmentBridgeConfig:PolicyFixedSegmentBridgeConfig"
                        },
                        "description": "Bridge configuration\n"
                    },
                    "connectivityPath": {
                        "type": "string",
                        "description": "Policy path to the connecting Tier-0 or Tier-1.\n",
                        "willReplaceOnChanges": true
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyFixedSegmentContext:PolicyFixedSegmentContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "dhcpConfigPath": {
                        "type": "string",
                        "description": "Policy path to DHCP server or relay configuration to use for subnets configured on this segment. This attribute is supported with NSX 3.0.0 onwards.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "domainName": {
                        "type": "string",
                        "description": "DNS domain names.\n"
                    },
                    "l2Extension": {
                        "$ref": "#/types/nsxt:index/PolicyFixedSegmentL2Extension:PolicyFixedSegmentL2Extension",
                        "description": "Configuration for extending Segment through L2 VPN.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "overlayId": {
                        "type": "integer",
                        "description": "Overlay connectivity ID for this Segment.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n* In the `subnet`:\n"
                    },
                    "replicationMode": {
                        "type": "string",
                        "description": "Replication mode - MTEP or SOURCE\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "subnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyFixedSegmentSubnet:PolicyFixedSegmentSubnet"
                        },
                        "description": "Subnet configuration block.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyFixedSegmentTag:PolicyFixedSegmentTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this policy.\n"
                    },
                    "transportZonePath": {
                        "type": "string",
                        "description": "Policy path to the Overlay transport zone.\n",
                        "willReplaceOnChanges": true
                    },
                    "vlanIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of VLAN IDs or ranges. Specifying vlan ids can be useful for overlay segments, f.e. for EVPN.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyGatewayCommunityList:PolicyGatewayCommunityList": {
            "properties": {
                "communities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of BGP community entries\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Policy path of relevant Tier0 Gateway.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayCommunityListTag:PolicyGatewayCommunityListTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "communities",
                "displayName",
                "gatewayPath",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "communities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of BGP community entries\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Policy path of relevant Tier0 Gateway.\n",
                    "willReplaceOnChanges": true
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayCommunityListTag:PolicyGatewayCommunityListTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "communities",
                "displayName",
                "gatewayPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyGatewayCommunityList resources.\n",
                "properties": {
                    "communities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of BGP community entries\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "gatewayPath": {
                        "type": "string",
                        "description": "Policy path of relevant Tier0 Gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyGatewayCommunityListTag:PolicyGatewayCommunityListTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyGatewayDnsForwarder:PolicyGatewayDnsForwarder": {
            "properties": {
                "cacheSize": {
                    "type": "integer",
                    "description": "Cache size in KB.\n"
                },
                "conditionalForwarderZonePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of conditional (FQDN) Zone Paths (Maximum 5 zones).\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyGatewayDnsForwarderContext:PolicyGatewayDnsForwarderContext",
                    "description": "The context which the object belongs to\n"
                },
                "defaultForwarderZonePath": {
                    "type": "string",
                    "description": "Path of Default Forwarder Zone.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Flag to indicate whether this DNS Forwarder is enabled. Defaults to `true`.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Path of Tier0 or Tier1 Gateway.\n"
                },
                "listenerIp": {
                    "type": "string",
                    "description": "IP address on which the DNS Forwarder listens.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Log Level for related messages, one of `DEBUG`, `INFO`, `WARNING`, `ERROR`, `FATAL`. Defaults to `INFO`.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayDnsForwarderTag:PolicyGatewayDnsForwarderTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "defaultForwarderZonePath",
                "displayName",
                "gatewayPath",
                "listenerIp",
                "path",
                "revision"
            ],
            "inputProperties": {
                "cacheSize": {
                    "type": "integer",
                    "description": "Cache size in KB.\n"
                },
                "conditionalForwarderZonePaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of conditional (FQDN) Zone Paths (Maximum 5 zones).\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyGatewayDnsForwarderContext:PolicyGatewayDnsForwarderContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "defaultForwarderZonePath": {
                    "type": "string",
                    "description": "Path of Default Forwarder Zone.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Flag to indicate whether this DNS Forwarder is enabled. Defaults to `true`.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Path of Tier0 or Tier1 Gateway.\n",
                    "willReplaceOnChanges": true
                },
                "listenerIp": {
                    "type": "string",
                    "description": "IP address on which the DNS Forwarder listens.\n"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Log Level for related messages, one of `DEBUG`, `INFO`, `WARNING`, `ERROR`, `FATAL`. Defaults to `INFO`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayDnsForwarderTag:PolicyGatewayDnsForwarderTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "defaultForwarderZonePath",
                "displayName",
                "gatewayPath",
                "listenerIp"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyGatewayDnsForwarder resources.\n",
                "properties": {
                    "cacheSize": {
                        "type": "integer",
                        "description": "Cache size in KB.\n"
                    },
                    "conditionalForwarderZonePaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of conditional (FQDN) Zone Paths (Maximum 5 zones).\n"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayDnsForwarderContext:PolicyGatewayDnsForwarderContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultForwarderZonePath": {
                        "type": "string",
                        "description": "Path of Default Forwarder Zone.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Flag to indicate whether this DNS Forwarder is enabled. Defaults to `true`.\n"
                    },
                    "gatewayPath": {
                        "type": "string",
                        "description": "Path of Tier0 or Tier1 Gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "listenerIp": {
                        "type": "string",
                        "description": "IP address on which the DNS Forwarder listens.\n"
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "Log Level for related messages, one of `DEBUG`, `INFO`, `WARNING`, `ERROR`, `FATAL`. Defaults to `INFO`.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyGatewayDnsForwarderTag:PolicyGatewayDnsForwarderTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyGatewayPolicy:PolicyGatewayPolicy": {
            "properties": {
                "category": {
                    "type": "string",
                    "description": "The category to use for priority of this Gateway Policy. For local manager must be one of: `Emergency`, `SystemRules`, `SharedPreRules`, `LocalGatewayRules`, `AutoServiceRules` and `Default`. For global manager must be `SharedPreRules` or `LocalGatewayRules`.\n"
                },
                "comments": {
                    "type": "string",
                    "description": "Comments for this Gateway Policy including lock/unlock comments.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyGatewayPolicyContext:PolicyGatewayPolicyContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain to use for the Gateway Policy. This domain must already exist. For VMware Cloud on AWS use `cgw`.\n"
                },
                "locked": {
                    "type": "boolean",
                    "description": "A boolean value indicating if the policy is locked. If locked, no other users can update the resource.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the Gateway Policy resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayPolicyRule:PolicyGatewayPolicyRule"
                    },
                    "description": "A repeatable block to specify rules for the Gateway Policy. Each rule includes the following fields:\n"
                },
                "sequenceNumber": {
                    "type": "integer",
                    "description": "It is recommended not to specify sequence number for rules, and rely on NSX to auto-assign them. If you choose to specify sequence numbers, you must make sure the numbers are consistent with order of the rules in configuration. To avoid confusion, either specify sequence numbers in all rules, or none at all.\n"
                },
                "stateful": {
                    "type": "boolean",
                    "description": "A boolean value to indicate if this Policy is stateful. When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayPolicyTag:PolicyGatewayPolicyTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                },
                "tcpStrict": {
                    "type": "boolean",
                    "description": "A boolean value to enable/disable a 3 way TCP handshake is done before the data packets are sent.\n"
                }
            },
            "required": [
                "category",
                "displayName",
                "nsxId",
                "path",
                "revision",
                "tcpStrict"
            ],
            "inputProperties": {
                "category": {
                    "type": "string",
                    "description": "The category to use for priority of this Gateway Policy. For local manager must be one of: `Emergency`, `SystemRules`, `SharedPreRules`, `LocalGatewayRules`, `AutoServiceRules` and `Default`. For global manager must be `SharedPreRules` or `LocalGatewayRules`.\n",
                    "willReplaceOnChanges": true
                },
                "comments": {
                    "type": "string",
                    "description": "Comments for this Gateway Policy including lock/unlock comments.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyGatewayPolicyContext:PolicyGatewayPolicyContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain to use for the Gateway Policy. This domain must already exist. For VMware Cloud on AWS use `cgw`.\n",
                    "willReplaceOnChanges": true
                },
                "locked": {
                    "type": "boolean",
                    "description": "A boolean value indicating if the policy is locked. If locked, no other users can update the resource.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the Gateway Policy resource.\n",
                    "willReplaceOnChanges": true
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayPolicyRule:PolicyGatewayPolicyRule"
                    },
                    "description": "A repeatable block to specify rules for the Gateway Policy. Each rule includes the following fields:\n"
                },
                "sequenceNumber": {
                    "type": "integer",
                    "description": "It is recommended not to specify sequence number for rules, and rely on NSX to auto-assign them. If you choose to specify sequence numbers, you must make sure the numbers are consistent with order of the rules in configuration. To avoid confusion, either specify sequence numbers in all rules, or none at all.\n"
                },
                "stateful": {
                    "type": "boolean",
                    "description": "A boolean value to indicate if this Policy is stateful. When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayPolicyTag:PolicyGatewayPolicyTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                },
                "tcpStrict": {
                    "type": "boolean",
                    "description": "A boolean value to enable/disable a 3 way TCP handshake is done before the data packets are sent.\n"
                }
            },
            "requiredInputs": [
                "category",
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyGatewayPolicy resources.\n",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "The category to use for priority of this Gateway Policy. For local manager must be one of: `Emergency`, `SystemRules`, `SharedPreRules`, `LocalGatewayRules`, `AutoServiceRules` and `Default`. For global manager must be `SharedPreRules` or `LocalGatewayRules`.\n",
                        "willReplaceOnChanges": true
                    },
                    "comments": {
                        "type": "string",
                        "description": "Comments for this Gateway Policy including lock/unlock comments.\n"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayPolicyContext:PolicyGatewayPolicyContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain to use for the Gateway Policy. This domain must already exist. For VMware Cloud on AWS use `cgw`.\n",
                        "willReplaceOnChanges": true
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "A boolean value indicating if the policy is locked. If locked, no other users can update the resource.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the Gateway Policy resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyGatewayPolicyRule:PolicyGatewayPolicyRule"
                        },
                        "description": "A repeatable block to specify rules for the Gateway Policy. Each rule includes the following fields:\n"
                    },
                    "sequenceNumber": {
                        "type": "integer",
                        "description": "It is recommended not to specify sequence number for rules, and rely on NSX to auto-assign them. If you choose to specify sequence numbers, you must make sure the numbers are consistent with order of the rules in configuration. To avoid confusion, either specify sequence numbers in all rules, or none at all.\n"
                    },
                    "stateful": {
                        "type": "boolean",
                        "description": "A boolean value to indicate if this Policy is stateful. When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyGatewayPolicyTag:PolicyGatewayPolicyTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this Rule.\n"
                    },
                    "tcpStrict": {
                        "type": "boolean",
                        "description": "A boolean value to enable/disable a 3 way TCP handshake is done before the data packets are sent.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyGatewayPrefixList:PolicyGatewayPrefixList": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Gateway where the prefix is defined.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "prefixes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayPrefixListPrefix:PolicyGatewayPrefixListPrefix"
                    },
                    "description": "A list of network prefixes.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayPrefixListTag:PolicyGatewayPrefixListTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "displayName",
                "gatewayPath",
                "nsxId",
                "path",
                "prefixes",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Gateway where the prefix is defined.\n",
                    "willReplaceOnChanges": true
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                    "willReplaceOnChanges": true
                },
                "prefixes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayPrefixListPrefix:PolicyGatewayPrefixListPrefix"
                    },
                    "description": "A list of network prefixes.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayPrefixListTag:PolicyGatewayPrefixListTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "gatewayPath",
                "prefixes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyGatewayPrefixList resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "gatewayPath": {
                        "type": "string",
                        "description": "Gateway where the prefix is defined.\n",
                        "willReplaceOnChanges": true
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "prefixes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyGatewayPrefixListPrefix:PolicyGatewayPrefixListPrefix"
                        },
                        "description": "A list of network prefixes.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyGatewayPrefixListTag:PolicyGatewayPrefixListTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyGatewayQosProfile:PolicyGatewayQosProfile": {
            "properties": {
                "burstSize": {
                    "type": "integer",
                    "description": "Maximum amount of traffic that can be transmitted at peak bandwidth rate (bytes)\n"
                },
                "committedBandwidth": {
                    "type": "integer",
                    "description": "Bandwidth is limited to line rate when the value configured is greater than line rate (mbps)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "excessAction": {
                    "type": "string",
                    "description": "Action on traffic exceeding bandwidth. Currently only `DROP` is supported.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayQosProfileTag:PolicyGatewayQosProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "burstSize": {
                    "type": "integer",
                    "description": "Maximum amount of traffic that can be transmitted at peak bandwidth rate (bytes)\n"
                },
                "committedBandwidth": {
                    "type": "integer",
                    "description": "Bandwidth is limited to line rate when the value configured is greater than line rate (mbps)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "excessAction": {
                    "type": "string",
                    "description": "Action on traffic exceeding bandwidth. Currently only `DROP` is supported.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayQosProfileTag:PolicyGatewayQosProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyGatewayQosProfile resources.\n",
                "properties": {
                    "burstSize": {
                        "type": "integer",
                        "description": "Maximum amount of traffic that can be transmitted at peak bandwidth rate (bytes)\n"
                    },
                    "committedBandwidth": {
                        "type": "integer",
                        "description": "Bandwidth is limited to line rate when the value configured is greater than line rate (mbps)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "excessAction": {
                        "type": "string",
                        "description": "Action on traffic exceeding bandwidth. Currently only `DROP` is supported.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyGatewayQosProfileTag:PolicyGatewayQosProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyGatewayRedistributionConfig:PolicyGatewayRedistributionConfig": {
            "properties": {
                "bgpEnabled": {
                    "type": "boolean",
                    "description": "Enable route redistribution for BGP. Defaults to `true`.\n"
                },
                "gatewayId": {
                    "type": "string",
                    "description": "ID of the Tier-0 Gateway\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Policy path to Tier0 Gateway.\n"
                },
                "localeServiceId": {
                    "type": "string",
                    "description": "ID of the Tier-0 Gateway locale service.\n"
                },
                "ospfEnabled": {
                    "type": "boolean",
                    "description": "Enable route redistribution for OSPF. Defaults to `false`. Applicable from NSX 3.1.0 onwards.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayRedistributionConfigRule:PolicyGatewayRedistributionConfigRule"
                    },
                    "description": "List of redistribution rules.\n"
                },
                "sitePath": {
                    "type": "string",
                    "description": "Policy path to Global Manager site (domain). This attribute is required for NSX Global Manager and not applicable otherwise.\n"
                }
            },
            "required": [
                "gatewayId",
                "gatewayPath",
                "localeServiceId"
            ],
            "inputProperties": {
                "bgpEnabled": {
                    "type": "boolean",
                    "description": "Enable route redistribution for BGP. Defaults to `true`.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Policy path to Tier0 Gateway.\n",
                    "willReplaceOnChanges": true
                },
                "ospfEnabled": {
                    "type": "boolean",
                    "description": "Enable route redistribution for OSPF. Defaults to `false`. Applicable from NSX 3.1.0 onwards.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayRedistributionConfigRule:PolicyGatewayRedistributionConfigRule"
                    },
                    "description": "List of redistribution rules.\n"
                },
                "sitePath": {
                    "type": "string",
                    "description": "Policy path to Global Manager site (domain). This attribute is required for NSX Global Manager and not applicable otherwise.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "gatewayPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyGatewayRedistributionConfig resources.\n",
                "properties": {
                    "bgpEnabled": {
                        "type": "boolean",
                        "description": "Enable route redistribution for BGP. Defaults to `true`.\n"
                    },
                    "gatewayId": {
                        "type": "string",
                        "description": "ID of the Tier-0 Gateway\n"
                    },
                    "gatewayPath": {
                        "type": "string",
                        "description": "Policy path to Tier0 Gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "localeServiceId": {
                        "type": "string",
                        "description": "ID of the Tier-0 Gateway locale service.\n"
                    },
                    "ospfEnabled": {
                        "type": "boolean",
                        "description": "Enable route redistribution for OSPF. Defaults to `false`. Applicable from NSX 3.1.0 onwards.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyGatewayRedistributionConfigRule:PolicyGatewayRedistributionConfigRule"
                        },
                        "description": "List of redistribution rules.\n"
                    },
                    "sitePath": {
                        "type": "string",
                        "description": "Policy path to Global Manager site (domain). This attribute is required for NSX Global Manager and not applicable otherwise.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyGatewayRouteMap:PolicyGatewayRouteMap": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayRouteMapEntry:PolicyGatewayRouteMapEntry"
                    },
                    "description": "List of entries for the Route Map.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Policy path of relevant Tier0 Gateway.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayRouteMapTag:PolicyGatewayRouteMapTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "displayName",
                "entries",
                "gatewayPath",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayRouteMapEntry:PolicyGatewayRouteMapEntry"
                    },
                    "description": "List of entries for the Route Map.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Policy path of relevant Tier0 Gateway.\n",
                    "willReplaceOnChanges": true
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGatewayRouteMapTag:PolicyGatewayRouteMapTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "entries",
                "gatewayPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyGatewayRouteMap resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "entries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyGatewayRouteMapEntry:PolicyGatewayRouteMapEntry"
                        },
                        "description": "List of entries for the Route Map.\n"
                    },
                    "gatewayPath": {
                        "type": "string",
                        "description": "Policy path of relevant Tier0 Gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyGatewayRouteMapTag:PolicyGatewayRouteMapTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyGroup:PolicyGroup": {
            "properties": {
                "conjunctions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGroupConjunction:PolicyGroupConjunction"
                    },
                    "description": "When specifying multiple `criteria`, a conjunction is used to specify if the criteria should selected using `AND` or `OR`.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyGroupContext:PolicyGroupContext",
                    "description": "The context which the object belongs to\n"
                },
                "criterias": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGroupCriteria:PolicyGroupCriteria"
                    },
                    "description": "A repeatable block to specify criteria for members of this Group. If more than 1 criteria block is specified, it must be separated by a `conjunction`. In a `criteria` block the following membership selection expressions can be used:\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain to use for the Group. This domain must already exist. For VMware Cloud on AWS use `cgw`. For Global Manager, please use site id for this field. If not specified, this field is default to `default`.\n"
                },
                "extendedCriteria": {
                    "$ref": "#/types/nsxt:index/PolicyGroupExtendedCriteria:PolicyGroupExtendedCriteria",
                    "description": "A condition block to specify higher level context to include in this Group's members. (e.g. user AD group). This configuration is for Local Manager only. Currently only one block is supported by NSX. Note that `extended_criteria` is implicitly `AND` with `criteria`.\n"
                },
                "groupType": {
                    "type": "string",
                    "description": "One of `IPAddress`, `ANTREA`. Empty group type indicates a generic group. Attribute is supported with NSX version 3.2.0 and above.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the group resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGroupTag:PolicyGroupTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Group.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "conjunctions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGroupConjunction:PolicyGroupConjunction"
                    },
                    "description": "When specifying multiple `criteria`, a conjunction is used to specify if the criteria should selected using `AND` or `OR`.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyGroupContext:PolicyGroupContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "criterias": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGroupCriteria:PolicyGroupCriteria"
                    },
                    "description": "A repeatable block to specify criteria for members of this Group. If more than 1 criteria block is specified, it must be separated by a `conjunction`. In a `criteria` block the following membership selection expressions can be used:\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain to use for the Group. This domain must already exist. For VMware Cloud on AWS use `cgw`. For Global Manager, please use site id for this field. If not specified, this field is default to `default`.\n",
                    "willReplaceOnChanges": true
                },
                "extendedCriteria": {
                    "$ref": "#/types/nsxt:index/PolicyGroupExtendedCriteria:PolicyGroupExtendedCriteria",
                    "description": "A condition block to specify higher level context to include in this Group's members. (e.g. user AD group). This configuration is for Local Manager only. Currently only one block is supported by NSX. Note that `extended_criteria` is implicitly `AND` with `criteria`.\n"
                },
                "groupType": {
                    "type": "string",
                    "description": "One of `IPAddress`, `ANTREA`. Empty group type indicates a generic group. Attribute is supported with NSX version 3.2.0 and above.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the group resource.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyGroupTag:PolicyGroupTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Group.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyGroup resources.\n",
                "properties": {
                    "conjunctions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyGroupConjunction:PolicyGroupConjunction"
                        },
                        "description": "When specifying multiple `criteria`, a conjunction is used to specify if the criteria should selected using `AND` or `OR`.\n"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyGroupContext:PolicyGroupContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "criterias": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyGroupCriteria:PolicyGroupCriteria"
                        },
                        "description": "A repeatable block to specify criteria for members of this Group. If more than 1 criteria block is specified, it must be separated by a `conjunction`. In a `criteria` block the following membership selection expressions can be used:\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain to use for the Group. This domain must already exist. For VMware Cloud on AWS use `cgw`. For Global Manager, please use site id for this field. If not specified, this field is default to `default`.\n",
                        "willReplaceOnChanges": true
                    },
                    "extendedCriteria": {
                        "$ref": "#/types/nsxt:index/PolicyGroupExtendedCriteria:PolicyGroupExtendedCriteria",
                        "description": "A condition block to specify higher level context to include in this Group's members. (e.g. user AD group). This configuration is for Local Manager only. Currently only one block is supported by NSX. Note that `extended_criteria` is implicitly `AND` with `criteria`.\n"
                    },
                    "groupType": {
                        "type": "string",
                        "description": "One of `IPAddress`, `ANTREA`. Empty group type indicates a generic group. Attribute is supported with NSX version 3.2.0 and above.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the group resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyGroupTag:PolicyGroupTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this Group.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyHostTransportNodeProfile:PolicyHostTransportNodeProfile": {
            "description": "This resource provides a method for the management of a Policy Host Transport Node Profile.\nThis resource is supported with NSX 4.1.0 onwards.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@SCC-Hyperscale-fr/nsxt\";\n\nconst test = new nsxt.PolicyHostTransportNodeProfile(\"test\", {\n    displayName: \"test_policy_host_tnp\",\n    standardHostSwitch: {\n        hostSwitchMode: \"STANDARD\",\n        hostSwitchType: \"NVDS\",\n        ipAssignment: {\n            assignedByDhcp: true,\n        },\n        transportZoneEndpoints: [{\n            transportZone: data.nsxt_transport_zone.tz1.id,\n        }],\n        hostSwitchProfiles: [nsxt_uplink_host_switch_profile.hsw_profile1.path],\n        isMigratePnics: false,\n        pnics: [{\n            deviceName: \"fp-eth0\",\n            uplinkName: \"uplink1\",\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport hyperscale_pulumi_nsxt as nsxt\n\ntest = nsxt.PolicyHostTransportNodeProfile(\"test\",\n    display_name=\"test_policy_host_tnp\",\n    standard_host_switch=nsxt.PolicyHostTransportNodeProfileStandardHostSwitchArgs(\n        host_switch_mode=\"STANDARD\",\n        host_switch_type=\"NVDS\",\n        ip_assignment=nsxt.PolicyHostTransportNodeProfileStandardHostSwitchIpAssignmentArgs(\n            assigned_by_dhcp=True,\n        ),\n        transport_zone_endpoints=[nsxt.PolicyHostTransportNodeProfileStandardHostSwitchTransportZoneEndpointArgs(\n            transport_zone=data[\"nsxt_transport_zone\"][\"tz1\"][\"id\"],\n        )],\n        host_switch_profiles=[nsxt_uplink_host_switch_profile[\"hsw_profile1\"][\"path\"]],\n        is_migrate_pnics=False,\n        pnics=[nsxt.PolicyHostTransportNodeProfileStandardHostSwitchPnicArgs(\n            device_name=\"fp-eth0\",\n            uplink_name=\"uplink1\",\n        )],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = SCC-Hyperscale-fr.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Nsxt.PolicyHostTransportNodeProfile(\"test\", new()\n    {\n        DisplayName = \"test_policy_host_tnp\",\n        StandardHostSwitch = new Nsxt.Inputs.PolicyHostTransportNodeProfileStandardHostSwitchArgs\n        {\n            HostSwitchMode = \"STANDARD\",\n            HostSwitchType = \"NVDS\",\n            IpAssignment = new Nsxt.Inputs.PolicyHostTransportNodeProfileStandardHostSwitchIpAssignmentArgs\n            {\n                AssignedByDhcp = true,\n            },\n            TransportZoneEndpoints = new[]\n            {\n                new Nsxt.Inputs.PolicyHostTransportNodeProfileStandardHostSwitchTransportZoneEndpointArgs\n                {\n                    TransportZone = data.Nsxt_transport_zone.Tz1.Id,\n                },\n            },\n            HostSwitchProfiles = new[]\n            {\n                nsxt_uplink_host_switch_profile.Hsw_profile1.Path,\n            },\n            IsMigratePnics = false,\n            Pnics = new[]\n            {\n                new Nsxt.Inputs.PolicyHostTransportNodeProfileStandardHostSwitchPnicArgs\n                {\n                    DeviceName = \"fp-eth0\",\n                    UplinkName = \"uplink1\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.NewPolicyHostTransportNodeProfile(ctx, \"test\", \u0026nsxt.PolicyHostTransportNodeProfileArgs{\n\t\t\tDisplayName: pulumi.String(\"test_policy_host_tnp\"),\n\t\t\tStandardHostSwitch: \u0026nsxt.PolicyHostTransportNodeProfileStandardHostSwitchArgs{\n\t\t\t\tHostSwitchMode: pulumi.String(\"STANDARD\"),\n\t\t\t\tHostSwitchType: pulumi.String(\"NVDS\"),\n\t\t\t\tIpAssignment: \u0026nsxt.PolicyHostTransportNodeProfileStandardHostSwitchIpAssignmentArgs{\n\t\t\t\t\tAssignedByDhcp: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\tTransportZoneEndpoints: nsxt.PolicyHostTransportNodeProfileStandardHostSwitchTransportZoneEndpointArray{\n\t\t\t\t\t\u0026nsxt.PolicyHostTransportNodeProfileStandardHostSwitchTransportZoneEndpointArgs{\n\t\t\t\t\t\tTransportZone: pulumi.Any(data.Nsxt_transport_zone.Tz1.Id),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tHostSwitchProfiles: pulumi.StringArray{\n\t\t\t\t\tnsxt_uplink_host_switch_profile.Hsw_profile1.Path,\n\t\t\t\t},\n\t\t\t\tIsMigratePnics: pulumi.Bool(false),\n\t\t\t\tPnics: nsxt.PolicyHostTransportNodeProfileStandardHostSwitchPnicArray{\n\t\t\t\t\t\u0026nsxt.PolicyHostTransportNodeProfileStandardHostSwitchPnicArgs{\n\t\t\t\t\t\tDeviceName: pulumi.String(\"fp-eth0\"),\n\t\t\t\t\t\tUplinkName: pulumi.String(\"uplink1\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.PolicyHostTransportNodeProfile;\nimport com.pulumi.nsxt.PolicyHostTransportNodeProfileArgs;\nimport com.pulumi.nsxt.inputs.PolicyHostTransportNodeProfileStandardHostSwitchArgs;\nimport com.pulumi.nsxt.inputs.PolicyHostTransportNodeProfileStandardHostSwitchIpAssignmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new PolicyHostTransportNodeProfile(\"test\", PolicyHostTransportNodeProfileArgs.builder()        \n            .displayName(\"test_policy_host_tnp\")\n            .standardHostSwitch(PolicyHostTransportNodeProfileStandardHostSwitchArgs.builder()\n                .hostSwitchMode(\"STANDARD\")\n                .hostSwitchType(\"NVDS\")\n                .ipAssignment(PolicyHostTransportNodeProfileStandardHostSwitchIpAssignmentArgs.builder()\n                    .assignedByDhcp(true)\n                    .build())\n                .transportZoneEndpoints(PolicyHostTransportNodeProfileStandardHostSwitchTransportZoneEndpointArgs.builder()\n                    .transportZone(data.nsxt_transport_zone().tz1().id())\n                    .build())\n                .hostSwitchProfiles(nsxt_uplink_host_switch_profile.hsw_profile1().path())\n                .isMigratePnics(false)\n                .pnics(PolicyHostTransportNodeProfileStandardHostSwitchPnicArgs.builder()\n                    .deviceName(\"fp-eth0\")\n                    .uplinkName(\"uplink1\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: nsxt:PolicyHostTransportNodeProfile\n    properties:\n      displayName: test_policy_host_tnp\n      standardHostSwitch:\n        hostSwitchMode: STANDARD\n        hostSwitchType: NVDS\n        ipAssignment:\n          assignedByDhcp: true\n        transportZoneEndpoints:\n          - transportZone: ${data.nsxt_transport_zone.tz1.id}\n        hostSwitchProfiles:\n          - ${nsxt_uplink_host_switch_profile.hsw_profile1.path}\n        isMigratePnics: false\n        pnics:\n          - deviceName: fp-eth0\n            uplinkName: uplink1\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "ignoreOverriddenHosts": {
                    "type": "boolean",
                    "description": "Determines if cluster-level configuration should be applied on overridden hosts\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "NSX ID for this resource\n"
                },
                "path": {
                    "type": "string",
                    "description": "Policy path for this resource\n"
                },
                "preconfiguredHostSwitch": {
                    "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfilePreconfiguredHostSwitch:PolicyHostTransportNodeProfilePreconfiguredHostSwitch",
                    "description": "Preconfigured host switch.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's\nchanges, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET\noperation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected\n"
                },
                "standardHostSwitch": {
                    "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitch:PolicyHostTransportNodeProfileStandardHostSwitch",
                    "description": "Standard host switch specification.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileTag:PolicyHostTransportNodeProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "ignoreOverriddenHosts": {
                    "type": "boolean",
                    "description": "Determines if cluster-level configuration should be applied on overridden hosts\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "NSX ID for this resource\n",
                    "willReplaceOnChanges": true
                },
                "preconfiguredHostSwitch": {
                    "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfilePreconfiguredHostSwitch:PolicyHostTransportNodeProfilePreconfiguredHostSwitch",
                    "description": "Preconfigured host switch.\n"
                },
                "standardHostSwitch": {
                    "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitch:PolicyHostTransportNodeProfileStandardHostSwitch",
                    "description": "Standard host switch specification.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileTag:PolicyHostTransportNodeProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyHostTransportNodeProfile resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "ignoreOverriddenHosts": {
                        "type": "boolean",
                        "description": "Determines if cluster-level configuration should be applied on overridden hosts\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "NSX ID for this resource\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "Policy path for this resource\n"
                    },
                    "preconfiguredHostSwitch": {
                        "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfilePreconfiguredHostSwitch:PolicyHostTransportNodeProfilePreconfiguredHostSwitch",
                        "description": "Preconfigured host switch.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's\nchanges, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET\noperation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected\n"
                    },
                    "standardHostSwitch": {
                        "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileStandardHostSwitch:PolicyHostTransportNodeProfileStandardHostSwitch",
                        "description": "Standard host switch specification.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyHostTransportNodeProfileTag:PolicyHostTransportNodeProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyIntrusionServicePolicy:PolicyIntrusionServicePolicy": {
            "properties": {
                "comments": {
                    "type": "string",
                    "description": "Comments for IDS policy lock/unlock.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain to use for the resource. This domain must already exist. For VMware Cloud on AWS use `cgw`. If not specified, this field is default to `default`.\n"
                },
                "locked": {
                    "type": "boolean",
                    "description": "Indicates whether the policy should be locked. If locked by a user, no other user would be able to modify this policy.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX policy path for this rule.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIntrusionServicePolicyRule:PolicyIntrusionServicePolicyRule"
                    },
                    "description": "A repeatable block to specify rules for the Policy. Each rule includes the following fields:\n"
                },
                "sequenceNumber": {
                    "type": "integer",
                    "description": "This field is used to resolve conflicts between IDS policies across domains.\n"
                },
                "stateful": {
                    "type": "boolean",
                    "description": "If true, state of the network connects are tracked and a stateful packet inspection is performed. Default is true.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIntrusionServicePolicyTag:PolicyIntrusionServicePolicyTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "comments": {
                    "type": "string",
                    "description": "Comments for IDS policy lock/unlock.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain to use for the resource. This domain must already exist. For VMware Cloud on AWS use `cgw`. If not specified, this field is default to `default`.\n",
                    "willReplaceOnChanges": true
                },
                "locked": {
                    "type": "boolean",
                    "description": "Indicates whether the policy should be locked. If locked by a user, no other user would be able to modify this policy.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIntrusionServicePolicyRule:PolicyIntrusionServicePolicyRule"
                    },
                    "description": "A repeatable block to specify rules for the Policy. Each rule includes the following fields:\n"
                },
                "sequenceNumber": {
                    "type": "integer",
                    "description": "This field is used to resolve conflicts between IDS policies across domains.\n"
                },
                "stateful": {
                    "type": "boolean",
                    "description": "If true, state of the network connects are tracked and a stateful packet inspection is performed. Default is true.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIntrusionServicePolicyTag:PolicyIntrusionServicePolicyTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyIntrusionServicePolicy resources.\n",
                "properties": {
                    "comments": {
                        "type": "string",
                        "description": "Comments for IDS policy lock/unlock.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain to use for the resource. This domain must already exist. For VMware Cloud on AWS use `cgw`. If not specified, this field is default to `default`.\n",
                        "willReplaceOnChanges": true
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Indicates whether the policy should be locked. If locked by a user, no other user would be able to modify this policy.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX policy path for this rule.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyIntrusionServicePolicyRule:PolicyIntrusionServicePolicyRule"
                        },
                        "description": "A repeatable block to specify rules for the Policy. Each rule includes the following fields:\n"
                    },
                    "sequenceNumber": {
                        "type": "integer",
                        "description": "This field is used to resolve conflicts between IDS policies across domains.\n"
                    },
                    "stateful": {
                        "type": "boolean",
                        "description": "If true, state of the network connects are tracked and a stateful packet inspection is performed. Default is true.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyIntrusionServicePolicyTag:PolicyIntrusionServicePolicyTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this Rule.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyIntrusionServiceProfile:PolicyIntrusionServiceProfile": {
            "properties": {
                "criteria": {
                    "$ref": "#/types/nsxt:index/PolicyIntrusionServiceProfileCriteria:PolicyIntrusionServiceProfileCriteria",
                    "description": "Filtering criteria for the IDS Profile.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "overriddenSignatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIntrusionServiceProfileOverriddenSignature:PolicyIntrusionServiceProfileOverriddenSignature"
                    },
                    "description": "List of signatures that has been overridden this profile.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX policy path of the resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "severities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of profile severities, supported values are `LOW`, `MEDIUM`, `HIGH`, 'CRITICAL`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIntrusionServiceProfileTag:PolicyIntrusionServiceProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this profile.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision",
                "severities"
            ],
            "inputProperties": {
                "criteria": {
                    "$ref": "#/types/nsxt:index/PolicyIntrusionServiceProfileCriteria:PolicyIntrusionServiceProfileCriteria",
                    "description": "Filtering criteria for the IDS Profile.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "overriddenSignatures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIntrusionServiceProfileOverriddenSignature:PolicyIntrusionServiceProfileOverriddenSignature"
                    },
                    "description": "List of signatures that has been overridden this profile.\n"
                },
                "severities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of profile severities, supported values are `LOW`, `MEDIUM`, `HIGH`, 'CRITICAL`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIntrusionServiceProfileTag:PolicyIntrusionServiceProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this profile.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "severities"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyIntrusionServiceProfile resources.\n",
                "properties": {
                    "criteria": {
                        "$ref": "#/types/nsxt:index/PolicyIntrusionServiceProfileCriteria:PolicyIntrusionServiceProfileCriteria",
                        "description": "Filtering criteria for the IDS Profile.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "overriddenSignatures": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyIntrusionServiceProfileOverriddenSignature:PolicyIntrusionServiceProfileOverriddenSignature"
                        },
                        "description": "List of signatures that has been overridden this profile.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX policy path of the resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "severities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of profile severities, supported values are `LOW`, `MEDIUM`, `HIGH`, 'CRITICAL`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyIntrusionServiceProfileTag:PolicyIntrusionServiceProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this profile.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyIpAddressAllocation:PolicyIpAddressAllocation": {
            "properties": {
                "allocationIp": {
                    "type": "string",
                    "description": "The IP Address to allocate. If unspecified any free IP in the pool will be allocated.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyIpAddressAllocationContext:PolicyIpAddressAllocationContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "poolPath": {
                    "type": "string",
                    "description": "The policy path to the IP Pool for this Allocation.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpAddressAllocationTag:PolicyIpAddressAllocationTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "allocationIp",
                "displayName",
                "nsxId",
                "path",
                "poolPath",
                "revision"
            ],
            "inputProperties": {
                "allocationIp": {
                    "type": "string",
                    "description": "The IP Address to allocate. If unspecified any free IP in the pool will be allocated.\n",
                    "willReplaceOnChanges": true
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyIpAddressAllocationContext:PolicyIpAddressAllocationContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "poolPath": {
                    "type": "string",
                    "description": "The policy path to the IP Pool for this Allocation.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpAddressAllocationTag:PolicyIpAddressAllocationTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "poolPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyIpAddressAllocation resources.\n",
                "properties": {
                    "allocationIp": {
                        "type": "string",
                        "description": "The IP Address to allocate. If unspecified any free IP in the pool will be allocated.\n",
                        "willReplaceOnChanges": true
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyIpAddressAllocationContext:PolicyIpAddressAllocationContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "poolPath": {
                        "type": "string",
                        "description": "The policy path to the IP Pool for this Allocation.\n",
                        "willReplaceOnChanges": true
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyIpAddressAllocationTag:PolicyIpAddressAllocationTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyIpBlock:PolicyIpBlock": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "description": "Network address and the prefix length which will be associated with a layer-2 broadcast domain.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyIpBlockContext:PolicyIpBlockContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the IP Block.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpBlockTag:PolicyIpBlockTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this IP Block.\n"
                }
            },
            "required": [
                "cidr",
                "displayName",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "cidr": {
                    "type": "string",
                    "description": "Network address and the prefix length which will be associated with a layer-2 broadcast domain.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyIpBlockContext:PolicyIpBlockContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the IP Block.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpBlockTag:PolicyIpBlockTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this IP Block.\n"
                }
            },
            "requiredInputs": [
                "cidr",
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyIpBlock resources.\n",
                "properties": {
                    "cidr": {
                        "type": "string",
                        "description": "Network address and the prefix length which will be associated with a layer-2 broadcast domain.\n"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyIpBlockContext:PolicyIpBlockContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the IP Block.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyIpBlockTag:PolicyIpBlockTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this IP Block.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyIpDiscoveryProfile:PolicyIpDiscoveryProfile": {
            "properties": {
                "arpBindingLimit": {
                    "type": "integer",
                    "description": "Maximum number of ARP bindings\n"
                },
                "arpNdBindingTimeout": {
                    "type": "integer",
                    "description": "ARP and ND cache timeout (in minutes)\n"
                },
                "arpSnoopingEnabled": {
                    "type": "boolean",
                    "description": "Is ARP snooping enabled or not\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyIpDiscoveryProfileContext:PolicyIpDiscoveryProfileContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "dhcpSnoopingEnabled": {
                    "type": "boolean",
                    "description": "Is DHCP snooping enabled or not\n"
                },
                "dhcpSnoopingV6Enabled": {
                    "type": "boolean",
                    "description": "Is DHCP snooping v6 enabled or not\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "duplicateIpDetectionEnabled": {
                    "type": "boolean",
                    "description": "Duplicate IP detection\n"
                },
                "ndSnoopingEnabled": {
                    "type": "boolean",
                    "description": "Is ND snooping enabled or not\n"
                },
                "ndSnoopingLimit": {
                    "type": "integer",
                    "description": "Maximum number of ND (Neighbor Discovery Protocol) bindings\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpDiscoveryProfileTag:PolicyIpDiscoveryProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this policy.\n"
                },
                "tofuEnabled": {
                    "type": "boolean",
                    "description": "Indicates whether \"Trust on First Use(TOFU)\" paradigm is enabled\n"
                },
                "vmtoolsEnabled": {
                    "type": "boolean",
                    "description": "Is VM tools enabled or not\n"
                },
                "vmtoolsV6Enabled": {
                    "type": "boolean",
                    "description": "Use VMTools to learn the IPv6 addresses which are configured on interfaces of a VM\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "arpBindingLimit": {
                    "type": "integer",
                    "description": "Maximum number of ARP bindings\n"
                },
                "arpNdBindingTimeout": {
                    "type": "integer",
                    "description": "ARP and ND cache timeout (in minutes)\n"
                },
                "arpSnoopingEnabled": {
                    "type": "boolean",
                    "description": "Is ARP snooping enabled or not\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyIpDiscoveryProfileContext:PolicyIpDiscoveryProfileContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "dhcpSnoopingEnabled": {
                    "type": "boolean",
                    "description": "Is DHCP snooping enabled or not\n"
                },
                "dhcpSnoopingV6Enabled": {
                    "type": "boolean",
                    "description": "Is DHCP snooping v6 enabled or not\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "duplicateIpDetectionEnabled": {
                    "type": "boolean",
                    "description": "Duplicate IP detection\n"
                },
                "ndSnoopingEnabled": {
                    "type": "boolean",
                    "description": "Is ND snooping enabled or not\n"
                },
                "ndSnoopingLimit": {
                    "type": "integer",
                    "description": "Maximum number of ND (Neighbor Discovery Protocol) bindings\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpDiscoveryProfileTag:PolicyIpDiscoveryProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this policy.\n"
                },
                "tofuEnabled": {
                    "type": "boolean",
                    "description": "Indicates whether \"Trust on First Use(TOFU)\" paradigm is enabled\n"
                },
                "vmtoolsEnabled": {
                    "type": "boolean",
                    "description": "Is VM tools enabled or not\n"
                },
                "vmtoolsV6Enabled": {
                    "type": "boolean",
                    "description": "Use VMTools to learn the IPv6 addresses which are configured on interfaces of a VM\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyIpDiscoveryProfile resources.\n",
                "properties": {
                    "arpBindingLimit": {
                        "type": "integer",
                        "description": "Maximum number of ARP bindings\n"
                    },
                    "arpNdBindingTimeout": {
                        "type": "integer",
                        "description": "ARP and ND cache timeout (in minutes)\n"
                    },
                    "arpSnoopingEnabled": {
                        "type": "boolean",
                        "description": "Is ARP snooping enabled or not\n"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyIpDiscoveryProfileContext:PolicyIpDiscoveryProfileContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "dhcpSnoopingEnabled": {
                        "type": "boolean",
                        "description": "Is DHCP snooping enabled or not\n"
                    },
                    "dhcpSnoopingV6Enabled": {
                        "type": "boolean",
                        "description": "Is DHCP snooping v6 enabled or not\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "duplicateIpDetectionEnabled": {
                        "type": "boolean",
                        "description": "Duplicate IP detection\n"
                    },
                    "ndSnoopingEnabled": {
                        "type": "boolean",
                        "description": "Is ND snooping enabled or not\n"
                    },
                    "ndSnoopingLimit": {
                        "type": "integer",
                        "description": "Maximum number of ND (Neighbor Discovery Protocol) bindings\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyIpDiscoveryProfileTag:PolicyIpDiscoveryProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this policy.\n"
                    },
                    "tofuEnabled": {
                        "type": "boolean",
                        "description": "Indicates whether \"Trust on First Use(TOFU)\" paradigm is enabled\n"
                    },
                    "vmtoolsEnabled": {
                        "type": "boolean",
                        "description": "Is VM tools enabled or not\n"
                    },
                    "vmtoolsV6Enabled": {
                        "type": "boolean",
                        "description": "Use VMTools to learn the IPv6 addresses which are configured on interfaces of a VM\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyIpPool:PolicyIpPool": {
            "properties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyIpPoolContext:PolicyIpPoolContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the IP Pool.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpPoolTag:PolicyIpPoolTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this IP Pool.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyIpPoolContext:PolicyIpPoolContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the IP Pool.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpPoolTag:PolicyIpPoolTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this IP Pool.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyIpPool resources.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyIpPoolContext:PolicyIpPoolContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the IP Pool.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyIpPoolTag:PolicyIpPoolTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this IP Pool.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyIpPoolBlockSubnet:PolicyIpPoolBlockSubnet": {
            "properties": {
                "autoAssignGateway": {
                    "type": "boolean",
                    "description": "A boolean flag to toggle auto-assignment of the Gateway IP for this Subnet\n"
                },
                "blockPath": {
                    "type": "string",
                    "description": "The Policy path to the IP Block for this Block Subnet.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyIpPoolBlockSubnetContext:PolicyIpPoolBlockSubnetContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the Block Subnet.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the resource.\n"
                },
                "poolPath": {
                    "type": "string",
                    "description": "The Policy path to the IP Pool for this Block Subnet.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of this Block Subnet. Must be a power of 2\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpPoolBlockSubnetTag:PolicyIpPoolBlockSubnetTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Block Subnet.\n"
                }
            },
            "required": [
                "blockPath",
                "displayName",
                "nsxId",
                "path",
                "poolPath",
                "revision",
                "size"
            ],
            "inputProperties": {
                "autoAssignGateway": {
                    "type": "boolean",
                    "description": "A boolean flag to toggle auto-assignment of the Gateway IP for this Subnet\n"
                },
                "blockPath": {
                    "type": "string",
                    "description": "The Policy path to the IP Block for this Block Subnet.\n",
                    "willReplaceOnChanges": true
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyIpPoolBlockSubnetContext:PolicyIpPoolBlockSubnetContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the Block Subnet.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "poolPath": {
                    "type": "string",
                    "description": "The Policy path to the IP Pool for this Block Subnet.\n",
                    "willReplaceOnChanges": true
                },
                "size": {
                    "type": "integer",
                    "description": "The size of this Block Subnet. Must be a power of 2\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpPoolBlockSubnetTag:PolicyIpPoolBlockSubnetTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Block Subnet.\n"
                }
            },
            "requiredInputs": [
                "blockPath",
                "displayName",
                "poolPath",
                "size"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyIpPoolBlockSubnet resources.\n",
                "properties": {
                    "autoAssignGateway": {
                        "type": "boolean",
                        "description": "A boolean flag to toggle auto-assignment of the Gateway IP for this Subnet\n"
                    },
                    "blockPath": {
                        "type": "string",
                        "description": "The Policy path to the IP Block for this Block Subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyIpPoolBlockSubnetContext:PolicyIpPoolBlockSubnetContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the Block Subnet.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the resource.\n"
                    },
                    "poolPath": {
                        "type": "string",
                        "description": "The Policy path to the IP Pool for this Block Subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of this Block Subnet. Must be a power of 2\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyIpPoolBlockSubnetTag:PolicyIpPoolBlockSubnetTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this Block Subnet.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyIpPoolStaticSubnet:PolicyIpPoolStaticSubnet": {
            "properties": {
                "allocationRanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpPoolStaticSubnetAllocationRange:PolicyIpPoolStaticSubnetAllocationRange"
                    },
                    "description": "One or more IP allocation ranges for the Subnet.\n"
                },
                "cidr": {
                    "type": "string",
                    "description": "The network CIDR\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyIpPoolStaticSubnetContext:PolicyIpPoolStaticSubnetContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the Static Subnet.\n"
                },
                "dnsNameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of up to 3 DNS nameservers for the Subnet.\n"
                },
                "dnsSuffix": {
                    "type": "string",
                    "description": "The DNS suffix for the Subnet.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The gateway IP for the Subnet.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the resource.\n"
                },
                "poolPath": {
                    "type": "string",
                    "description": "The Policy path to the IP Pool for this Static Subnet.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpPoolStaticSubnetTag:PolicyIpPoolStaticSubnetTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Static Subnet.\n"
                }
            },
            "required": [
                "allocationRanges",
                "cidr",
                "displayName",
                "nsxId",
                "path",
                "poolPath",
                "revision"
            ],
            "inputProperties": {
                "allocationRanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpPoolStaticSubnetAllocationRange:PolicyIpPoolStaticSubnetAllocationRange"
                    },
                    "description": "One or more IP allocation ranges for the Subnet.\n"
                },
                "cidr": {
                    "type": "string",
                    "description": "The network CIDR\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyIpPoolStaticSubnetContext:PolicyIpPoolStaticSubnetContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name for the Static Subnet.\n"
                },
                "dnsNameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of up to 3 DNS nameservers for the Subnet.\n"
                },
                "dnsSuffix": {
                    "type": "string",
                    "description": "The DNS suffix for the Subnet.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The gateway IP for the Subnet.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "poolPath": {
                    "type": "string",
                    "description": "The Policy path to the IP Pool for this Static Subnet.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpPoolStaticSubnetTag:PolicyIpPoolStaticSubnetTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Static Subnet.\n"
                }
            },
            "requiredInputs": [
                "allocationRanges",
                "cidr",
                "displayName",
                "poolPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyIpPoolStaticSubnet resources.\n",
                "properties": {
                    "allocationRanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyIpPoolStaticSubnetAllocationRange:PolicyIpPoolStaticSubnetAllocationRange"
                        },
                        "description": "One or more IP allocation ranges for the Subnet.\n"
                    },
                    "cidr": {
                        "type": "string",
                        "description": "The network CIDR\n"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyIpPoolStaticSubnetContext:PolicyIpPoolStaticSubnetContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name for the Static Subnet.\n"
                    },
                    "dnsNameservers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of up to 3 DNS nameservers for the Subnet.\n"
                    },
                    "dnsSuffix": {
                        "type": "string",
                        "description": "The DNS suffix for the Subnet.\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The gateway IP for the Subnet.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the resource.\n"
                    },
                    "poolPath": {
                        "type": "string",
                        "description": "The Policy path to the IP Pool for this Static Subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyIpPoolStaticSubnetTag:PolicyIpPoolStaticSubnetTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this Static Subnet.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyIpsecVpnDpdProfile:PolicyIpsecVpnDpdProfile": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "dpdProbeInterval": {
                    "type": "integer",
                    "description": "Probe interval in seconds. Default is 60.\n"
                },
                "dpdProbeMode": {
                    "type": "string",
                    "description": "DPD Probe Mode, one of `PERIODIC`, `ON_DEMAND`. Periodic mode is used to query the liveliness of the peer at regular intervals (`dpd_probe_interval` seconds). On-demand mode would trigger DPD message if there is traffic to send to the peer AND the peer was idle for `dpd_probe_interval` seconds. Default is `PERIODIC`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled Dead Peer Detection. Default is True.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "retryCount": {
                    "type": "integer",
                    "description": "Maximum number of DPD retry attempts. Default is 10.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpsecVpnDpdProfileTag:PolicyIpsecVpnDpdProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "dpdProbeInterval": {
                    "type": "integer",
                    "description": "Probe interval in seconds. Default is 60.\n"
                },
                "dpdProbeMode": {
                    "type": "string",
                    "description": "DPD Probe Mode, one of `PERIODIC`, `ON_DEMAND`. Periodic mode is used to query the liveliness of the peer at regular intervals (`dpd_probe_interval` seconds). On-demand mode would trigger DPD message if there is traffic to send to the peer AND the peer was idle for `dpd_probe_interval` seconds. Default is `PERIODIC`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled Dead Peer Detection. Default is True.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "retryCount": {
                    "type": "integer",
                    "description": "Maximum number of DPD retry attempts. Default is 10.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpsecVpnDpdProfileTag:PolicyIpsecVpnDpdProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyIpsecVpnDpdProfile resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "dpdProbeInterval": {
                        "type": "integer",
                        "description": "Probe interval in seconds. Default is 60.\n"
                    },
                    "dpdProbeMode": {
                        "type": "string",
                        "description": "DPD Probe Mode, one of `PERIODIC`, `ON_DEMAND`. Periodic mode is used to query the liveliness of the peer at regular intervals (`dpd_probe_interval` seconds). On-demand mode would trigger DPD message if there is traffic to send to the peer AND the peer was idle for `dpd_probe_interval` seconds. Default is `PERIODIC`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled Dead Peer Detection. Default is True.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "retryCount": {
                        "type": "integer",
                        "description": "Maximum number of DPD retry attempts. Default is 10.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyIpsecVpnDpdProfileTag:PolicyIpsecVpnDpdProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyIpsecVpnIkeProfile:PolicyIpsecVpnIkeProfile": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "dhGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Diffie-Hellman group to be used if PFS is enabled. Default is GROUP14.\n"
                },
                "digestAlgorithms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of algorithms to be used for message digest during IKE negotiation. Default is `SHA2_256`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "encryptionAlgorithms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of encryption algorithms to be used during IKE negotiation.\n"
                },
                "ikeVersion": {
                    "type": "string",
                    "description": "Internet Key Exchange(IKE) protocol version to be used, one of `IKE_V1`, `IKE_V2`, `IKE_FLEX`. `IKE_FLEX` will initiate IKE-V2 and respond to both `IKE_V1` and `IKE_V2`.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "saLifeTime": {
                    "type": "integer",
                    "description": "Life time for security association.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpsecVpnIkeProfileTag:PolicyIpsecVpnIkeProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "dhGroups",
                "displayName",
                "encryptionAlgorithms",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "dhGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Diffie-Hellman group to be used if PFS is enabled. Default is GROUP14.\n"
                },
                "digestAlgorithms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of algorithms to be used for message digest during IKE negotiation. Default is `SHA2_256`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "encryptionAlgorithms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of encryption algorithms to be used during IKE negotiation.\n"
                },
                "ikeVersion": {
                    "type": "string",
                    "description": "Internet Key Exchange(IKE) protocol version to be used, one of `IKE_V1`, `IKE_V2`, `IKE_FLEX`. `IKE_FLEX` will initiate IKE-V2 and respond to both `IKE_V1` and `IKE_V2`.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "saLifeTime": {
                    "type": "integer",
                    "description": "Life time for security association.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpsecVpnIkeProfileTag:PolicyIpsecVpnIkeProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "dhGroups",
                "displayName",
                "encryptionAlgorithms"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyIpsecVpnIkeProfile resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "dhGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Diffie-Hellman group to be used if PFS is enabled. Default is GROUP14.\n"
                    },
                    "digestAlgorithms": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of algorithms to be used for message digest during IKE negotiation. Default is `SHA2_256`.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "encryptionAlgorithms": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of encryption algorithms to be used during IKE negotiation.\n"
                    },
                    "ikeVersion": {
                        "type": "string",
                        "description": "Internet Key Exchange(IKE) protocol version to be used, one of `IKE_V1`, `IKE_V2`, `IKE_FLEX`. `IKE_FLEX` will initiate IKE-V2 and respond to both `IKE_V1` and `IKE_V2`.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "saLifeTime": {
                        "type": "integer",
                        "description": "Life time for security association.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyIpsecVpnIkeProfileTag:PolicyIpsecVpnIkeProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyIpsecVpnLocalEndpoint:PolicyIpsecVpnLocalEndpoint": {
            "properties": {
                "certificatePath": {
                    "type": "string",
                    "description": "Policy path referencing site certificate.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "localAddress": {
                    "type": "string",
                    "description": "Local IPv4 IP address.\n"
                },
                "localId": {
                    "type": "string",
                    "description": "Local id for the local endpoint.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "servicePath": {
                    "type": "string",
                    "description": "Policy path for IPSec VPN service\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpsecVpnLocalEndpointTag:PolicyIpsecVpnLocalEndpointTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "trustCaPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trust ca certificate paths.\n"
                },
                "trustCrlPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trust CRL paths.\n"
                }
            },
            "required": [
                "displayName",
                "localAddress",
                "localId",
                "nsxId",
                "path",
                "revision",
                "servicePath"
            ],
            "inputProperties": {
                "certificatePath": {
                    "type": "string",
                    "description": "Policy path referencing site certificate.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "localAddress": {
                    "type": "string",
                    "description": "Local IPv4 IP address.\n"
                },
                "localId": {
                    "type": "string",
                    "description": "Local id for the local endpoint.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "servicePath": {
                    "type": "string",
                    "description": "Policy path for IPSec VPN service\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpsecVpnLocalEndpointTag:PolicyIpsecVpnLocalEndpointTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "trustCaPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trust ca certificate paths.\n"
                },
                "trustCrlPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of trust CRL paths.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "localAddress",
                "servicePath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyIpsecVpnLocalEndpoint resources.\n",
                "properties": {
                    "certificatePath": {
                        "type": "string",
                        "description": "Policy path referencing site certificate.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "localAddress": {
                        "type": "string",
                        "description": "Local IPv4 IP address.\n"
                    },
                    "localId": {
                        "type": "string",
                        "description": "Local id for the local endpoint.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "servicePath": {
                        "type": "string",
                        "description": "Policy path for IPSec VPN service\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyIpsecVpnLocalEndpointTag:PolicyIpsecVpnLocalEndpointTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    },
                    "trustCaPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of trust ca certificate paths.\n"
                    },
                    "trustCrlPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of trust CRL paths.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyIpsecVpnService:PolicyIpsecVpnService": {
            "properties": {
                "bypassRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpsecVpnServiceBypassRule:PolicyIpsecVpnServiceBypassRule"
                    },
                    "description": "Set the bypass rules for this IPSec VPN Service.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this IPSec VPN Service is enabled. Default is `true`.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Path of gateway associated with the IPSec VPN Service. Note that at least one of `gateway_path` and `locale_service_path` must be specified for the IPSec VPN Service object.\n"
                },
                "haSync": {
                    "type": "boolean",
                    "description": "Enable/Disable IPSec VPN service HA state sync. Default is `true`.\n"
                },
                "ikeLogLevel": {
                    "type": "string",
                    "description": "Set of algorithms to be used for message digest during IKE negotiation. Value is one of `DEBUG`, `INFO`, `WARN`, `ERROR` and `EMERGENCY`. Default is `INFO`.\n"
                },
                "localeServicePath": {
                    "type": "string",
                    "description": "Path of the gateway locale service associated with the IPSec VPN Service.\n",
                    "deprecationMessage": "Use gateway_path instead."
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpsecVpnServiceTag:PolicyIpsecVpnServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "bypassRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpsecVpnServiceBypassRule:PolicyIpsecVpnServiceBypassRule"
                    },
                    "description": "Set the bypass rules for this IPSec VPN Service.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether this IPSec VPN Service is enabled. Default is `true`.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Path of gateway associated with the IPSec VPN Service. Note that at least one of `gateway_path` and `locale_service_path` must be specified for the IPSec VPN Service object.\n",
                    "willReplaceOnChanges": true
                },
                "haSync": {
                    "type": "boolean",
                    "description": "Enable/Disable IPSec VPN service HA state sync. Default is `true`.\n"
                },
                "ikeLogLevel": {
                    "type": "string",
                    "description": "Set of algorithms to be used for message digest during IKE negotiation. Value is one of `DEBUG`, `INFO`, `WARN`, `ERROR` and `EMERGENCY`. Default is `INFO`.\n"
                },
                "localeServicePath": {
                    "type": "string",
                    "description": "Path of the gateway locale service associated with the IPSec VPN Service.\n",
                    "deprecationMessage": "Use gateway_path instead.",
                    "willReplaceOnChanges": true
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpsecVpnServiceTag:PolicyIpsecVpnServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyIpsecVpnService resources.\n",
                "properties": {
                    "bypassRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyIpsecVpnServiceBypassRule:PolicyIpsecVpnServiceBypassRule"
                        },
                        "description": "Set the bypass rules for this IPSec VPN Service.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether this IPSec VPN Service is enabled. Default is `true`.\n"
                    },
                    "gatewayPath": {
                        "type": "string",
                        "description": "Path of gateway associated with the IPSec VPN Service. Note that at least one of `gateway_path` and `locale_service_path` must be specified for the IPSec VPN Service object.\n",
                        "willReplaceOnChanges": true
                    },
                    "haSync": {
                        "type": "boolean",
                        "description": "Enable/Disable IPSec VPN service HA state sync. Default is `true`.\n"
                    },
                    "ikeLogLevel": {
                        "type": "string",
                        "description": "Set of algorithms to be used for message digest during IKE negotiation. Value is one of `DEBUG`, `INFO`, `WARN`, `ERROR` and `EMERGENCY`. Default is `INFO`.\n"
                    },
                    "localeServicePath": {
                        "type": "string",
                        "description": "Path of the gateway locale service associated with the IPSec VPN Service.\n",
                        "deprecationMessage": "Use gateway_path instead.",
                        "willReplaceOnChanges": true
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyIpsecVpnServiceTag:PolicyIpsecVpnServiceTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyIpsecVpnSession:PolicyIpsecVpnSession": {
            "properties": {
                "authenticationMode": {
                    "type": "string",
                    "description": "Peer authentication mode. `PSK` - In this mode a secret key shared between local and peer sites is to be used for authentication. The secret key can be a string with a maximum length of 128 characters. `CERTIFICATE` - In this mode a certificate defined at the global level is to be used for authentication. If user wants to configure compliance_suite, then the authentication_mode can only be `CERTIFICATE`.\n"
                },
                "complianceSuite": {
                    "type": "string",
                    "description": "Compliance suite. Value is one of `CNSA`, `SUITE_B_GCM_128`, `SUITE_B_GCM_256`, `PRIME`, `FOUNDATION`, `FIPS`, `None`.\n"
                },
                "connectionInitiationMode": {
                    "type": "string",
                    "description": "Connection initiation mode used by local endpoint to establish ike connection with peer site. INITIATOR - In this mode\nlocal endpoint initiates tunnel setup and will also respond to incoming tunnel setup requests from peer gateway.\nRESPOND_ONLY - In this mode, local endpoint shall only respond to incoming tunnel setup requests. It shall not initiate\nthe tunnel setup. ON_DEMAND - In this mode local endpoint will initiate tunnel creation once first packet matching the\npolicy rule is received and will also respond to incoming initiation request.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "The traffic direction apply to the MSS clamping. Value is one of `NONE`, `INBOUND_CONNECTION`, `OUTBOUND_CONNECTION` AND `BOTH`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "dpdProfilePath": {
                    "type": "string",
                    "description": "Policy path referencing Dead Peer Detection (DPD) profile. Default is set to system default profile.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Boolean. Enable/Disable IPsec VPN session. Default is \"true\" (session enabled).\n"
                },
                "ikeProfilePath": {
                    "type": "string",
                    "description": "Policy path referencing IKE profile. Note that if user wants to create session with `compliance_suite`, then this field should not be configured, the provider will use the default Profile for each compliance suite type.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IP Tunnel interface (commonly referred as VTI) ip_addresses. Only applied for Route Based VPN Session.\n"
                },
                "localEndpointPath": {
                    "type": "string",
                    "description": "Policy path referencing Local endpoint. In VMC, Local Endpoints are pre-configured the user can refer to their path using `data nsxt.PolicyIpsecVpnLocalEndpoint` and using the \"Private IP1\" or \"Public IP1\" values to refer to the private and public endpoints respectively. Note that if `authentication_mode` is `CERTIFICATE`, then the local_endpoint must be configured with `certificate_path` and `trust_ca_paths`.\n"
                },
                "maxSegmentSize": {
                    "type": "integer",
                    "description": "Maximum amount of data the host will accept in a TCP segment. Value is an int between `108` and `8860`. If not specified then the value would be the automatic calculated MSS value.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "peerAddress": {
                    "type": "string",
                    "description": "Public IPV4 address of the remote device terminating the VPN connection.\n"
                },
                "peerId": {
                    "type": "string",
                    "description": "Peer ID to uniquely identify the peer site. The peer ID is the public IP address of the remote device terminating the VPN tunnel. When NAT is configured for the peer, enter the private IP address of the peer.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "Subnet Prefix Length. Only applied for Route Based VPN Session.\n"
                },
                "psk": {
                    "type": "string",
                    "description": "IPSec Pre-shared key. Maximum length of this field is 128 characters.\n",
                    "secret": true
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpsecVpnSessionRule:PolicyIpsecVpnSessionRule"
                    },
                    "description": "Bypass rules for this IPSec VPN Session. Only applicable to `PolicyBased` VPN Session.\n"
                },
                "servicePath": {
                    "type": "string",
                    "description": "The path of the IPSec VPN service for the VPN session.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpsecVpnSessionTag:PolicyIpsecVpnSessionTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "tunnelProfilePath": {
                    "type": "string",
                    "description": "Policy path referencing Tunnel profile to be used. Note that if user wants to create session with `compliance_suite`, then this field should not be configured, the provider will use the default Profile for each compliance suite type.\n"
                },
                "vpnType": {
                    "type": "string",
                    "description": "`RouteBased` or `PolicyBased`. Policy Based VPN requires to define protect rules that match local and peer subnets. IPSec security association is negotiated for each pair of local and peer subnet. For PolicyBased Session, `rule` must be specified with `sources`, `destination` and `action`. A Route Based VPN is more flexible, more powerful and recommended over policy based VPN. IP Tunnel port is created and all traffic routed via tunnel port is protected. Routes can be configured statically or can be learned through BGP. A route based VPN is a must for establishing redundant VPN session to remote site. For RouteBased VPN session, `ip_addresses` and `prefix_length` must be specified to create the tunnel interface and its subnet.\n"
                }
            },
            "required": [
                "displayName",
                "dpdProfilePath",
                "ikeProfilePath",
                "localEndpointPath",
                "maxSegmentSize",
                "nsxId",
                "path",
                "peerAddress",
                "peerId",
                "revision",
                "servicePath",
                "tunnelProfilePath",
                "vpnType"
            ],
            "inputProperties": {
                "authenticationMode": {
                    "type": "string",
                    "description": "Peer authentication mode. `PSK` - In this mode a secret key shared between local and peer sites is to be used for authentication. The secret key can be a string with a maximum length of 128 characters. `CERTIFICATE` - In this mode a certificate defined at the global level is to be used for authentication. If user wants to configure compliance_suite, then the authentication_mode can only be `CERTIFICATE`.\n"
                },
                "complianceSuite": {
                    "type": "string",
                    "description": "Compliance suite. Value is one of `CNSA`, `SUITE_B_GCM_128`, `SUITE_B_GCM_256`, `PRIME`, `FOUNDATION`, `FIPS`, `None`.\n"
                },
                "connectionInitiationMode": {
                    "type": "string",
                    "description": "Connection initiation mode used by local endpoint to establish ike connection with peer site. INITIATOR - In this mode\nlocal endpoint initiates tunnel setup and will also respond to incoming tunnel setup requests from peer gateway.\nRESPOND_ONLY - In this mode, local endpoint shall only respond to incoming tunnel setup requests. It shall not initiate\nthe tunnel setup. ON_DEMAND - In this mode local endpoint will initiate tunnel creation once first packet matching the\npolicy rule is received and will also respond to incoming initiation request.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "The traffic direction apply to the MSS clamping. Value is one of `NONE`, `INBOUND_CONNECTION`, `OUTBOUND_CONNECTION` AND `BOTH`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "dpdProfilePath": {
                    "type": "string",
                    "description": "Policy path referencing Dead Peer Detection (DPD) profile. Default is set to system default profile.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Boolean. Enable/Disable IPsec VPN session. Default is \"true\" (session enabled).\n"
                },
                "ikeProfilePath": {
                    "type": "string",
                    "description": "Policy path referencing IKE profile. Note that if user wants to create session with `compliance_suite`, then this field should not be configured, the provider will use the default Profile for each compliance suite type.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IP Tunnel interface (commonly referred as VTI) ip_addresses. Only applied for Route Based VPN Session.\n"
                },
                "localEndpointPath": {
                    "type": "string",
                    "description": "Policy path referencing Local endpoint. In VMC, Local Endpoints are pre-configured the user can refer to their path using `data nsxt.PolicyIpsecVpnLocalEndpoint` and using the \"Private IP1\" or \"Public IP1\" values to refer to the private and public endpoints respectively. Note that if `authentication_mode` is `CERTIFICATE`, then the local_endpoint must be configured with `certificate_path` and `trust_ca_paths`.\n"
                },
                "maxSegmentSize": {
                    "type": "integer",
                    "description": "Maximum amount of data the host will accept in a TCP segment. Value is an int between `108` and `8860`. If not specified then the value would be the automatic calculated MSS value.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "peerAddress": {
                    "type": "string",
                    "description": "Public IPV4 address of the remote device terminating the VPN connection.\n"
                },
                "peerId": {
                    "type": "string",
                    "description": "Peer ID to uniquely identify the peer site. The peer ID is the public IP address of the remote device terminating the VPN tunnel. When NAT is configured for the peer, enter the private IP address of the peer.\n"
                },
                "prefixLength": {
                    "type": "integer",
                    "description": "Subnet Prefix Length. Only applied for Route Based VPN Session.\n"
                },
                "psk": {
                    "type": "string",
                    "description": "IPSec Pre-shared key. Maximum length of this field is 128 characters.\n",
                    "secret": true
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpsecVpnSessionRule:PolicyIpsecVpnSessionRule"
                    },
                    "description": "Bypass rules for this IPSec VPN Session. Only applicable to `PolicyBased` VPN Session.\n"
                },
                "servicePath": {
                    "type": "string",
                    "description": "The path of the IPSec VPN service for the VPN session.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpsecVpnSessionTag:PolicyIpsecVpnSessionTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "tunnelProfilePath": {
                    "type": "string",
                    "description": "Policy path referencing Tunnel profile to be used. Note that if user wants to create session with `compliance_suite`, then this field should not be configured, the provider will use the default Profile for each compliance suite type.\n"
                },
                "vpnType": {
                    "type": "string",
                    "description": "`RouteBased` or `PolicyBased`. Policy Based VPN requires to define protect rules that match local and peer subnets. IPSec security association is negotiated for each pair of local and peer subnet. For PolicyBased Session, `rule` must be specified with `sources`, `destination` and `action`. A Route Based VPN is more flexible, more powerful and recommended over policy based VPN. IP Tunnel port is created and all traffic routed via tunnel port is protected. Routes can be configured statically or can be learned through BGP. A route based VPN is a must for establishing redundant VPN session to remote site. For RouteBased VPN session, `ip_addresses` and `prefix_length` must be specified to create the tunnel interface and its subnet.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "localEndpointPath",
                "peerAddress",
                "peerId",
                "servicePath",
                "vpnType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyIpsecVpnSession resources.\n",
                "properties": {
                    "authenticationMode": {
                        "type": "string",
                        "description": "Peer authentication mode. `PSK` - In this mode a secret key shared between local and peer sites is to be used for authentication. The secret key can be a string with a maximum length of 128 characters. `CERTIFICATE` - In this mode a certificate defined at the global level is to be used for authentication. If user wants to configure compliance_suite, then the authentication_mode can only be `CERTIFICATE`.\n"
                    },
                    "complianceSuite": {
                        "type": "string",
                        "description": "Compliance suite. Value is one of `CNSA`, `SUITE_B_GCM_128`, `SUITE_B_GCM_256`, `PRIME`, `FOUNDATION`, `FIPS`, `None`.\n"
                    },
                    "connectionInitiationMode": {
                        "type": "string",
                        "description": "Connection initiation mode used by local endpoint to establish ike connection with peer site. INITIATOR - In this mode\nlocal endpoint initiates tunnel setup and will also respond to incoming tunnel setup requests from peer gateway.\nRESPOND_ONLY - In this mode, local endpoint shall only respond to incoming tunnel setup requests. It shall not initiate\nthe tunnel setup. ON_DEMAND - In this mode local endpoint will initiate tunnel creation once first packet matching the\npolicy rule is received and will also respond to incoming initiation request.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "direction": {
                        "type": "string",
                        "description": "The traffic direction apply to the MSS clamping. Value is one of `NONE`, `INBOUND_CONNECTION`, `OUTBOUND_CONNECTION` AND `BOTH`.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "dpdProfilePath": {
                        "type": "string",
                        "description": "Policy path referencing Dead Peer Detection (DPD) profile. Default is set to system default profile.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Boolean. Enable/Disable IPsec VPN session. Default is \"true\" (session enabled).\n"
                    },
                    "ikeProfilePath": {
                        "type": "string",
                        "description": "Policy path referencing IKE profile. Note that if user wants to create session with `compliance_suite`, then this field should not be configured, the provider will use the default Profile for each compliance suite type.\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IP Tunnel interface (commonly referred as VTI) ip_addresses. Only applied for Route Based VPN Session.\n"
                    },
                    "localEndpointPath": {
                        "type": "string",
                        "description": "Policy path referencing Local endpoint. In VMC, Local Endpoints are pre-configured the user can refer to their path using `data nsxt.PolicyIpsecVpnLocalEndpoint` and using the \"Private IP1\" or \"Public IP1\" values to refer to the private and public endpoints respectively. Note that if `authentication_mode` is `CERTIFICATE`, then the local_endpoint must be configured with `certificate_path` and `trust_ca_paths`.\n"
                    },
                    "maxSegmentSize": {
                        "type": "integer",
                        "description": "Maximum amount of data the host will accept in a TCP segment. Value is an int between `108` and `8860`. If not specified then the value would be the automatic calculated MSS value.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "peerAddress": {
                        "type": "string",
                        "description": "Public IPV4 address of the remote device terminating the VPN connection.\n"
                    },
                    "peerId": {
                        "type": "string",
                        "description": "Peer ID to uniquely identify the peer site. The peer ID is the public IP address of the remote device terminating the VPN tunnel. When NAT is configured for the peer, enter the private IP address of the peer.\n"
                    },
                    "prefixLength": {
                        "type": "integer",
                        "description": "Subnet Prefix Length. Only applied for Route Based VPN Session.\n"
                    },
                    "psk": {
                        "type": "string",
                        "description": "IPSec Pre-shared key. Maximum length of this field is 128 characters.\n",
                        "secret": true
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyIpsecVpnSessionRule:PolicyIpsecVpnSessionRule"
                        },
                        "description": "Bypass rules for this IPSec VPN Session. Only applicable to `PolicyBased` VPN Session.\n"
                    },
                    "servicePath": {
                        "type": "string",
                        "description": "The path of the IPSec VPN service for the VPN session.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyIpsecVpnSessionTag:PolicyIpsecVpnSessionTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    },
                    "tunnelProfilePath": {
                        "type": "string",
                        "description": "Policy path referencing Tunnel profile to be used. Note that if user wants to create session with `compliance_suite`, then this field should not be configured, the provider will use the default Profile for each compliance suite type.\n"
                    },
                    "vpnType": {
                        "type": "string",
                        "description": "`RouteBased` or `PolicyBased`. Policy Based VPN requires to define protect rules that match local and peer subnets. IPSec security association is negotiated for each pair of local and peer subnet. For PolicyBased Session, `rule` must be specified with `sources`, `destination` and `action`. A Route Based VPN is more flexible, more powerful and recommended over policy based VPN. IP Tunnel port is created and all traffic routed via tunnel port is protected. Routes can be configured statically or can be learned through BGP. A route based VPN is a must for establishing redundant VPN session to remote site. For RouteBased VPN session, `ip_addresses` and `prefix_length` must be specified to create the tunnel interface and its subnet.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyIpsecVpnTunnelProfile:PolicyIpsecVpnTunnelProfile": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "dfPolicy": {
                    "type": "string",
                    "description": "Defragmentation policy, one of `COPY` or `CLEAR`. `COPY` copies the defragmentation bit from the inner IP packet into the outer packet. `CLEAR` ignores the defragmentation bit present in the inner packet. Default is `COPY`.\n"
                },
                "dhGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Diffie-Hellman group to be used if PFS is enabled. Default is GROUP14.\n"
                },
                "digestAlgorithms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of algorithms to be used for message digest during IKE negotiation. Default is `SHA2_256`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "enablePerfectForwardSecrecy": {
                    "type": "boolean",
                    "description": "Enable perfect forward secrecy. Default is True.\n"
                },
                "encryptionAlgorithms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of encryption algorithms to be used during IKE negotiation.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "saLifeTime": {
                    "type": "integer",
                    "description": "SA lifetime specifies the expiry time of security association. Default is 3600.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpsecVpnTunnelProfileTag:PolicyIpsecVpnTunnelProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "dhGroups",
                "displayName",
                "encryptionAlgorithms",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "dfPolicy": {
                    "type": "string",
                    "description": "Defragmentation policy, one of `COPY` or `CLEAR`. `COPY` copies the defragmentation bit from the inner IP packet into the outer packet. `CLEAR` ignores the defragmentation bit present in the inner packet. Default is `COPY`.\n"
                },
                "dhGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Diffie-Hellman group to be used if PFS is enabled. Default is GROUP14.\n"
                },
                "digestAlgorithms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of algorithms to be used for message digest during IKE negotiation. Default is `SHA2_256`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "enablePerfectForwardSecrecy": {
                    "type": "boolean",
                    "description": "Enable perfect forward secrecy. Default is True.\n"
                },
                "encryptionAlgorithms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of encryption algorithms to be used during IKE negotiation.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "saLifeTime": {
                    "type": "integer",
                    "description": "SA lifetime specifies the expiry time of security association. Default is 3600.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyIpsecVpnTunnelProfileTag:PolicyIpsecVpnTunnelProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "dhGroups",
                "displayName",
                "encryptionAlgorithms"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyIpsecVpnTunnelProfile resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "dfPolicy": {
                        "type": "string",
                        "description": "Defragmentation policy, one of `COPY` or `CLEAR`. `COPY` copies the defragmentation bit from the inner IP packet into the outer packet. `CLEAR` ignores the defragmentation bit present in the inner packet. Default is `COPY`.\n"
                    },
                    "dhGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Diffie-Hellman group to be used if PFS is enabled. Default is GROUP14.\n"
                    },
                    "digestAlgorithms": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of algorithms to be used for message digest during IKE negotiation. Default is `SHA2_256`.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "enablePerfectForwardSecrecy": {
                        "type": "boolean",
                        "description": "Enable perfect forward secrecy. Default is True.\n"
                    },
                    "encryptionAlgorithms": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of encryption algorithms to be used during IKE negotiation.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "saLifeTime": {
                        "type": "integer",
                        "description": "SA lifetime specifies the expiry time of security association. Default is 3600.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyIpsecVpnTunnelProfileTag:PolicyIpsecVpnTunnelProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyL2VpnService:PolicyL2VpnService": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "enableHub": {
                    "type": "boolean",
                    "description": "This property applies only in `SERVER` mode. If set to true, traffic from any client will be replicated to all other clients. If set to false, traffic received from clients is only replicated to the local VPN endpoint. Default is `true`.\n"
                },
                "encapIpPools": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IP Pool to allocate local and peer endpoint IPs. Format is ipv4 CIDR block.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Path of gateway associated with the L2 VPN Service. Note that at least one of `gateway_path` and `locale_service_path` must be specified for the L2 VPN Service object.\n"
                },
                "localeServicePath": {
                    "type": "string",
                    "description": "Path of the locale service associated with the L2 VPN Service.\n",
                    "deprecationMessage": "Use gateway_path instead."
                },
                "mode": {
                    "type": "string",
                    "description": "Specify an L2VPN service mode as SERVER or CLIENT. Value is one of `SERVER`, `CLIENT`. Default is `SERVER`.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyL2VpnServiceTag:PolicyL2VpnServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "enableHub": {
                    "type": "boolean",
                    "description": "This property applies only in `SERVER` mode. If set to true, traffic from any client will be replicated to all other clients. If set to false, traffic received from clients is only replicated to the local VPN endpoint. Default is `true`.\n"
                },
                "encapIpPools": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IP Pool to allocate local and peer endpoint IPs. Format is ipv4 CIDR block.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Path of gateway associated with the L2 VPN Service. Note that at least one of `gateway_path` and `locale_service_path` must be specified for the L2 VPN Service object.\n",
                    "willReplaceOnChanges": true
                },
                "localeServicePath": {
                    "type": "string",
                    "description": "Path of the locale service associated with the L2 VPN Service.\n",
                    "deprecationMessage": "Use gateway_path instead.",
                    "willReplaceOnChanges": true
                },
                "mode": {
                    "type": "string",
                    "description": "Specify an L2VPN service mode as SERVER or CLIENT. Value is one of `SERVER`, `CLIENT`. Default is `SERVER`.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyL2VpnServiceTag:PolicyL2VpnServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyL2VpnService resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "enableHub": {
                        "type": "boolean",
                        "description": "This property applies only in `SERVER` mode. If set to true, traffic from any client will be replicated to all other clients. If set to false, traffic received from clients is only replicated to the local VPN endpoint. Default is `true`.\n"
                    },
                    "encapIpPools": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IP Pool to allocate local and peer endpoint IPs. Format is ipv4 CIDR block.\n"
                    },
                    "gatewayPath": {
                        "type": "string",
                        "description": "Path of gateway associated with the L2 VPN Service. Note that at least one of `gateway_path` and `locale_service_path` must be specified for the L2 VPN Service object.\n",
                        "willReplaceOnChanges": true
                    },
                    "localeServicePath": {
                        "type": "string",
                        "description": "Path of the locale service associated with the L2 VPN Service.\n",
                        "deprecationMessage": "Use gateway_path instead.",
                        "willReplaceOnChanges": true
                    },
                    "mode": {
                        "type": "string",
                        "description": "Specify an L2VPN service mode as SERVER or CLIENT. Value is one of `SERVER`, `CLIENT`. Default is `SERVER`.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyL2VpnServiceTag:PolicyL2VpnServiceTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyL2VpnSession:PolicyL2VpnSession": {
            "description": "This resource provides a method for the management of a L2VPN VPN session.\n\nThis resource is applicable to NSX Policy Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@SCC-Hyperscale-fr/nsxt\";\n\nconst test = new nsxt.PolicyL2VpnSession(\"test\", {\n    displayName: \"L2 VPN Session\",\n    description: \"Terraform-provisioned L2 VPN Tunnel\",\n    servicePath: nsxt_policy_l2_vpn_service.test.path,\n    transportTunnels: [nsxt_policy_ipsec_vpn_session.ipsec_vpn_session_for_l2vpn.path],\n});\n```\n```python\nimport pulumi\nimport hyperscale_pulumi_nsxt as nsxt\n\ntest = nsxt.PolicyL2VpnSession(\"test\",\n    display_name=\"L2 VPN Session\",\n    description=\"Terraform-provisioned L2 VPN Tunnel\",\n    service_path=nsxt_policy_l2_vpn_service[\"test\"][\"path\"],\n    transport_tunnels=[nsxt_policy_ipsec_vpn_session[\"ipsec_vpn_session_for_l2vpn\"][\"path\"]])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = SCC-Hyperscale-fr.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Nsxt.PolicyL2VpnSession(\"test\", new()\n    {\n        DisplayName = \"L2 VPN Session\",\n        Description = \"Terraform-provisioned L2 VPN Tunnel\",\n        ServicePath = nsxt_policy_l2_vpn_service.Test.Path,\n        TransportTunnels = new[]\n        {\n            nsxt_policy_ipsec_vpn_session.Ipsec_vpn_session_for_l2vpn.Path,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.NewPolicyL2VpnSession(ctx, \"test\", \u0026nsxt.PolicyL2VpnSessionArgs{\n\t\t\tDisplayName: pulumi.String(\"L2 VPN Session\"),\n\t\t\tDescription: pulumi.String(\"Terraform-provisioned L2 VPN Tunnel\"),\n\t\t\tServicePath: pulumi.Any(nsxt_policy_l2_vpn_service.Test.Path),\n\t\t\tTransportTunnels: pulumi.StringArray{\n\t\t\t\tnsxt_policy_ipsec_vpn_session.Ipsec_vpn_session_for_l2vpn.Path,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.PolicyL2VpnSession;\nimport com.pulumi.nsxt.PolicyL2VpnSessionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new PolicyL2VpnSession(\"test\", PolicyL2VpnSessionArgs.builder()        \n            .displayName(\"L2 VPN Session\")\n            .description(\"Terraform-provisioned L2 VPN Tunnel\")\n            .servicePath(nsxt_policy_l2_vpn_service.test().path())\n            .transportTunnels(nsxt_policy_ipsec_vpn_session.ipsec_vpn_session_for_l2vpn().path())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: nsxt:PolicyL2VpnSession\n    properties:\n      displayName: L2 VPN Session\n      description: Terraform-provisioned L2 VPN Tunnel\n      servicePath: ${nsxt_policy_l2_vpn_service.test.path}\n      transportTunnels:\n        - ${nsxt_policy_ipsec_vpn_session.ipsec_vpn_session_for_l2vpn.path}\n```\n{{% /example %}}\n{{% /examples %}}\n## Importing\n\nAn existing object can be [imported][docs-import] into this resource, via the following command:\n\n[docs-import]: /docs/import/index.html\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\n```\n```python\nimport pulumi\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n    }\n}\n```\n```yaml\n{}\n```\n\nThe above command imports L2 VPN session named `test` with the NSX ID `UUID`.\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "The traffic direction apply to the MSS clamping. `BOTH` or `NONE`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/Disable IPSec VPN session.\n"
                },
                "localAddress": {
                    "type": "string",
                    "description": "IP Address of the local tunnel port. This property only applies in `CLIENT` mode.\n"
                },
                "maxSegmentSize": {
                    "type": "integer",
                    "description": "Maximum amount of data the host will accept in a TCP segment. Value should be between `108` and `8860`. If not specified then the value would be the automatic calculated MSS value.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "peerAddress": {
                    "type": "string",
                    "description": "IP Address of the peer tunnel port. This property only applies in `CLIENT` mode.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Encapsulation protocol used by the tunnel. `GRE` is the only supported value.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "servicePath": {
                    "type": "string",
                    "description": "The path of the L2 VPN service for the VPN session.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyL2VpnSessionTag:PolicyL2VpnSessionTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "transportTunnels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of transport tunnels paths for redundancy. L2VPN supports only `AES_GCM_128` encryption algorithm for IPSec tunnel profile.\n"
                }
            },
            "required": [
                "displayName",
                "maxSegmentSize",
                "nsxId",
                "path",
                "revision",
                "servicePath",
                "transportTunnels"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "The traffic direction apply to the MSS clamping. `BOTH` or `NONE`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/Disable IPSec VPN session.\n"
                },
                "localAddress": {
                    "type": "string",
                    "description": "IP Address of the local tunnel port. This property only applies in `CLIENT` mode.\n"
                },
                "maxSegmentSize": {
                    "type": "integer",
                    "description": "Maximum amount of data the host will accept in a TCP segment. Value should be between `108` and `8860`. If not specified then the value would be the automatic calculated MSS value.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "peerAddress": {
                    "type": "string",
                    "description": "IP Address of the peer tunnel port. This property only applies in `CLIENT` mode.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Encapsulation protocol used by the tunnel. `GRE` is the only supported value.\n"
                },
                "servicePath": {
                    "type": "string",
                    "description": "The path of the L2 VPN service for the VPN session.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyL2VpnSessionTag:PolicyL2VpnSessionTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "transportTunnels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of transport tunnels paths for redundancy. L2VPN supports only `AES_GCM_128` encryption algorithm for IPSec tunnel profile.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "servicePath",
                "transportTunnels"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyL2VpnSession resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "direction": {
                        "type": "string",
                        "description": "The traffic direction apply to the MSS clamping. `BOTH` or `NONE`.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/Disable IPSec VPN session.\n"
                    },
                    "localAddress": {
                        "type": "string",
                        "description": "IP Address of the local tunnel port. This property only applies in `CLIENT` mode.\n"
                    },
                    "maxSegmentSize": {
                        "type": "integer",
                        "description": "Maximum amount of data the host will accept in a TCP segment. Value should be between `108` and `8860`. If not specified then the value would be the automatic calculated MSS value.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "peerAddress": {
                        "type": "string",
                        "description": "IP Address of the peer tunnel port. This property only applies in `CLIENT` mode.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Encapsulation protocol used by the tunnel. `GRE` is the only supported value.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "servicePath": {
                        "type": "string",
                        "description": "The path of the L2 VPN service for the VPN session.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyL2VpnSessionTag:PolicyL2VpnSessionTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    },
                    "transportTunnels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of transport tunnels paths for redundancy. L2VPN supports only `AES_GCM_128` encryption algorithm for IPSec tunnel profile.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyLbPool:PolicyLbPool": {
            "properties": {
                "activeMonitorPath": {
                    "type": "string",
                    "description": "Active monitor to be associated with this pool.\n"
                },
                "algorithm": {
                    "type": "string",
                    "description": "Load balancing algorithm, one of `ROUND_ROBIN`, `WEIGHTED_ROUND_ROBIN`, `LEAST_CONNECTION`, `WEIGHTED_LEAST_CONNECTION`, `IP_HASH`. Default is `ROUND_ROBIN`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the member.\n"
                },
                "memberGroup": {
                    "$ref": "#/types/nsxt:index/PolicyLbPoolMemberGroup:PolicyLbPoolMemberGroup",
                    "description": "Grouping specification for pool members. When `member_group` is set, `member` should not be specified.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbPoolMember:PolicyLbPoolMember"
                    },
                    "description": "Members of the pool. When `member' is set, `member_group` should not be specified.\n"
                },
                "minActiveMembers": {
                    "type": "integer",
                    "description": "A pool is considered active if there are at least certain minimum number of members.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "passiveMonitorPath": {
                    "type": "string",
                    "description": "Passive monitor to be associated with this pool.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "snat": {
                    "$ref": "#/types/nsxt:index/PolicyLbPoolSnat:PolicyLbPoolSnat",
                    "description": "Source NAT may be required to ensure traffic from the server destined to the client is received by the load balancer.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbPoolTag:PolicyLbPoolTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "tcpMultiplexingEnabled": {
                    "type": "boolean",
                    "description": "Enable TCP multiplexing within the pool.\n"
                },
                "tcpMultiplexingNumber": {
                    "type": "integer",
                    "description": "The maximum number of TCP connections per pool that are idly kept alive for sending future client requests.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision",
                "snat"
            ],
            "inputProperties": {
                "activeMonitorPath": {
                    "type": "string",
                    "description": "Active monitor to be associated with this pool.\n"
                },
                "algorithm": {
                    "type": "string",
                    "description": "Load balancing algorithm, one of `ROUND_ROBIN`, `WEIGHTED_ROUND_ROBIN`, `LEAST_CONNECTION`, `WEIGHTED_LEAST_CONNECTION`, `IP_HASH`. Default is `ROUND_ROBIN`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the member.\n"
                },
                "memberGroup": {
                    "$ref": "#/types/nsxt:index/PolicyLbPoolMemberGroup:PolicyLbPoolMemberGroup",
                    "description": "Grouping specification for pool members. When `member_group` is set, `member` should not be specified.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbPoolMember:PolicyLbPoolMember"
                    },
                    "description": "Members of the pool. When `member' is set, `member_group` should not be specified.\n"
                },
                "minActiveMembers": {
                    "type": "integer",
                    "description": "A pool is considered active if there are at least certain minimum number of members.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "passiveMonitorPath": {
                    "type": "string",
                    "description": "Passive monitor to be associated with this pool.\n"
                },
                "snat": {
                    "$ref": "#/types/nsxt:index/PolicyLbPoolSnat:PolicyLbPoolSnat",
                    "description": "Source NAT may be required to ensure traffic from the server destined to the client is received by the load balancer.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbPoolTag:PolicyLbPoolTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "tcpMultiplexingEnabled": {
                    "type": "boolean",
                    "description": "Enable TCP multiplexing within the pool.\n"
                },
                "tcpMultiplexingNumber": {
                    "type": "integer",
                    "description": "The maximum number of TCP connections per pool that are idly kept alive for sending future client requests.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyLbPool resources.\n",
                "properties": {
                    "activeMonitorPath": {
                        "type": "string",
                        "description": "Active monitor to be associated with this pool.\n"
                    },
                    "algorithm": {
                        "type": "string",
                        "description": "Load balancing algorithm, one of `ROUND_ROBIN`, `WEIGHTED_ROUND_ROBIN`, `LEAST_CONNECTION`, `WEIGHTED_LEAST_CONNECTION`, `IP_HASH`. Default is `ROUND_ROBIN`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the member.\n"
                    },
                    "memberGroup": {
                        "$ref": "#/types/nsxt:index/PolicyLbPoolMemberGroup:PolicyLbPoolMemberGroup",
                        "description": "Grouping specification for pool members. When `member_group` is set, `member` should not be specified.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyLbPoolMember:PolicyLbPoolMember"
                        },
                        "description": "Members of the pool. When `member' is set, `member_group` should not be specified.\n"
                    },
                    "minActiveMembers": {
                        "type": "integer",
                        "description": "A pool is considered active if there are at least certain minimum number of members.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "passiveMonitorPath": {
                        "type": "string",
                        "description": "Passive monitor to be associated with this pool.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "snat": {
                        "$ref": "#/types/nsxt:index/PolicyLbPoolSnat:PolicyLbPoolSnat",
                        "description": "Source NAT may be required to ensure traffic from the server destined to the client is received by the load balancer.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyLbPoolTag:PolicyLbPoolTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    },
                    "tcpMultiplexingEnabled": {
                        "type": "boolean",
                        "description": "Enable TCP multiplexing within the pool.\n"
                    },
                    "tcpMultiplexingNumber": {
                        "type": "integer",
                        "description": "The maximum number of TCP connections per pool that are idly kept alive for sending future client requests.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyLbService:PolicyLbService": {
            "properties": {
                "connectivityPath": {
                    "type": "string",
                    "description": "Tier1 Gateway where this service is instantiated. In future, other objects will be supported.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Flag to enable the service.\n"
                },
                "errorLogLevel": {
                    "type": "string",
                    "description": "Log level for the service, one of `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`, `ALERT`, `EMERGENCY`. Default is `INFO`.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "size": {
                    "type": "string",
                    "description": "Load Balancer Service size, one of `SMALL`, `MEDIUM`, `LARGE`, `XLARGE`, `DLB`. Default is `SMALL`. Please note that XLARGE is only supported since NSX 3.0.0\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbServiceTag:PolicyLbServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "connectivityPath": {
                    "type": "string",
                    "description": "Tier1 Gateway where this service is instantiated. In future, other objects will be supported.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Flag to enable the service.\n"
                },
                "errorLogLevel": {
                    "type": "string",
                    "description": "Log level for the service, one of `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`, `ALERT`, `EMERGENCY`. Default is `INFO`.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "size": {
                    "type": "string",
                    "description": "Load Balancer Service size, one of `SMALL`, `MEDIUM`, `LARGE`, `XLARGE`, `DLB`. Default is `SMALL`. Please note that XLARGE is only supported since NSX 3.0.0\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbServiceTag:PolicyLbServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyLbService resources.\n",
                "properties": {
                    "connectivityPath": {
                        "type": "string",
                        "description": "Tier1 Gateway where this service is instantiated. In future, other objects will be supported.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Flag to enable the service.\n"
                    },
                    "errorLogLevel": {
                        "type": "string",
                        "description": "Log level for the service, one of `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`, `ALERT`, `EMERGENCY`. Default is `INFO`.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "size": {
                        "type": "string",
                        "description": "Load Balancer Service size, one of `SMALL`, `MEDIUM`, `LARGE`, `XLARGE`, `DLB`. Default is `SMALL`. Please note that XLARGE is only supported since NSX 3.0.0\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyLbServiceTag:PolicyLbServiceTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyLbVirtualServer:PolicyLbVirtualServer": {
            "properties": {
                "accessListControl": {
                    "$ref": "#/types/nsxt:index/PolicyLbVirtualServerAccessListControl:PolicyLbVirtualServerAccessListControl",
                    "description": "Specifies the access list control to define how to filter client connections.\n"
                },
                "accessLogEnabled": {
                    "type": "boolean",
                    "description": "If set, all connections/requests sent to the virtual server are logged to access log.\n"
                },
                "applicationProfilePath": {
                    "type": "string",
                    "description": "Application profile path for this virtual server. Note that this also differentiates between Layer 4 TCP/UDP and Layer 7 HTTP virtual servers.\n"
                },
                "clientSsl": {
                    "$ref": "#/types/nsxt:index/PolicyLbVirtualServerClientSsl:PolicyLbVirtualServerClientSsl",
                    "description": "This setting is used when load balancer terminates client SSL connection\n"
                },
                "defaultPoolMemberPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Default pool member ports to use when member port is not defined on the pool.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the rule.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether to enable access list control option. Default is true.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Virtual Server IP address.\n"
                },
                "logSignificantEventOnly": {
                    "type": "boolean",
                    "description": "If true, significant events are logged in access log. This flag is supported since NSX 3.0.0.\n"
                },
                "maxConcurrentConnections": {
                    "type": "integer",
                    "description": "To ensure one virtual server does not over consume resources, connections to Virtual Server can be capped.\n"
                },
                "maxNewConnectionRate": {
                    "type": "integer",
                    "description": "To ensure one virtual server does not over consume resources, connections to a member can be rate limited.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "persistenceProfilePath": {
                    "type": "string",
                    "description": "Path to nsxt_policy_persistence_profile.\n"
                },
                "poolPath": {
                    "type": "string",
                    "description": "Path for Load Balancer Pool.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Virtual Server Ports.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRule:PolicyLbVirtualServerRule"
                    },
                    "description": "Specifies one or more rules to manipulate traffic passing through HTTP or HTTPS virtual server.\n"
                },
                "serverSsl": {
                    "$ref": "#/types/nsxt:index/PolicyLbVirtualServerServerSsl:PolicyLbVirtualServerServerSsl",
                    "description": "This setting is used when load balancer establishes connection to the backend server\n"
                },
                "servicePath": {
                    "type": "string",
                    "description": "Virtual Server can be associated with Load Balancer Service.\n"
                },
                "sorryPoolPath": {
                    "type": "string",
                    "description": "When load balancer can not select server in pool, the request would be served by sorry pool\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerTag:PolicyLbVirtualServerTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "applicationProfilePath",
                "displayName",
                "ipAddress",
                "nsxId",
                "path",
                "ports",
                "revision"
            ],
            "inputProperties": {
                "accessListControl": {
                    "$ref": "#/types/nsxt:index/PolicyLbVirtualServerAccessListControl:PolicyLbVirtualServerAccessListControl",
                    "description": "Specifies the access list control to define how to filter client connections.\n"
                },
                "accessLogEnabled": {
                    "type": "boolean",
                    "description": "If set, all connections/requests sent to the virtual server are logged to access log.\n"
                },
                "applicationProfilePath": {
                    "type": "string",
                    "description": "Application profile path for this virtual server. Note that this also differentiates between Layer 4 TCP/UDP and Layer 7 HTTP virtual servers.\n"
                },
                "clientSsl": {
                    "$ref": "#/types/nsxt:index/PolicyLbVirtualServerClientSsl:PolicyLbVirtualServerClientSsl",
                    "description": "This setting is used when load balancer terminates client SSL connection\n"
                },
                "defaultPoolMemberPorts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Default pool member ports to use when member port is not defined on the pool.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the rule.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether to enable access list control option. Default is true.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Virtual Server IP address.\n"
                },
                "logSignificantEventOnly": {
                    "type": "boolean",
                    "description": "If true, significant events are logged in access log. This flag is supported since NSX 3.0.0.\n"
                },
                "maxConcurrentConnections": {
                    "type": "integer",
                    "description": "To ensure one virtual server does not over consume resources, connections to Virtual Server can be capped.\n"
                },
                "maxNewConnectionRate": {
                    "type": "integer",
                    "description": "To ensure one virtual server does not over consume resources, connections to a member can be rate limited.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "persistenceProfilePath": {
                    "type": "string",
                    "description": "Path to nsxt_policy_persistence_profile.\n"
                },
                "poolPath": {
                    "type": "string",
                    "description": "Path for Load Balancer Pool.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Virtual Server Ports.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRule:PolicyLbVirtualServerRule"
                    },
                    "description": "Specifies one or more rules to manipulate traffic passing through HTTP or HTTPS virtual server.\n"
                },
                "serverSsl": {
                    "$ref": "#/types/nsxt:index/PolicyLbVirtualServerServerSsl:PolicyLbVirtualServerServerSsl",
                    "description": "This setting is used when load balancer establishes connection to the backend server\n"
                },
                "servicePath": {
                    "type": "string",
                    "description": "Virtual Server can be associated with Load Balancer Service.\n"
                },
                "sorryPoolPath": {
                    "type": "string",
                    "description": "When load balancer can not select server in pool, the request would be served by sorry pool\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerTag:PolicyLbVirtualServerTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "applicationProfilePath",
                "displayName",
                "ipAddress",
                "ports"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyLbVirtualServer resources.\n",
                "properties": {
                    "accessListControl": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerAccessListControl:PolicyLbVirtualServerAccessListControl",
                        "description": "Specifies the access list control to define how to filter client connections.\n"
                    },
                    "accessLogEnabled": {
                        "type": "boolean",
                        "description": "If set, all connections/requests sent to the virtual server are logged to access log.\n"
                    },
                    "applicationProfilePath": {
                        "type": "string",
                        "description": "Application profile path for this virtual server. Note that this also differentiates between Layer 4 TCP/UDP and Layer 7 HTTP virtual servers.\n"
                    },
                    "clientSsl": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerClientSsl:PolicyLbVirtualServerClientSsl",
                        "description": "This setting is used when load balancer terminates client SSL connection\n"
                    },
                    "defaultPoolMemberPorts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Default pool member ports to use when member port is not defined on the pool.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the rule.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates whether to enable access list control option. Default is true.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "Virtual Server IP address.\n"
                    },
                    "logSignificantEventOnly": {
                        "type": "boolean",
                        "description": "If true, significant events are logged in access log. This flag is supported since NSX 3.0.0.\n"
                    },
                    "maxConcurrentConnections": {
                        "type": "integer",
                        "description": "To ensure one virtual server does not over consume resources, connections to Virtual Server can be capped.\n"
                    },
                    "maxNewConnectionRate": {
                        "type": "integer",
                        "description": "To ensure one virtual server does not over consume resources, connections to a member can be rate limited.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "persistenceProfilePath": {
                        "type": "string",
                        "description": "Path to nsxt_policy_persistence_profile.\n"
                    },
                    "poolPath": {
                        "type": "string",
                        "description": "Path for Load Balancer Pool.\n"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Virtual Server Ports.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyLbVirtualServerRule:PolicyLbVirtualServerRule"
                        },
                        "description": "Specifies one or more rules to manipulate traffic passing through HTTP or HTTPS virtual server.\n"
                    },
                    "serverSsl": {
                        "$ref": "#/types/nsxt:index/PolicyLbVirtualServerServerSsl:PolicyLbVirtualServerServerSsl",
                        "description": "This setting is used when load balancer establishes connection to the backend server\n"
                    },
                    "servicePath": {
                        "type": "string",
                        "description": "Virtual Server can be associated with Load Balancer Service.\n"
                    },
                    "sorryPoolPath": {
                        "type": "string",
                        "description": "When load balancer can not select server in pool, the request would be served by sorry pool\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyLbVirtualServerTag:PolicyLbVirtualServerTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyMacDiscoveryProfile:PolicyMacDiscoveryProfile": {
            "properties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyMacDiscoveryProfileContext:PolicyMacDiscoveryProfileContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "macChangeEnabled": {
                    "type": "boolean",
                    "description": "MAC address change feature.\n"
                },
                "macLearningEnabled": {
                    "type": "boolean",
                    "description": "MAC learning feature.\n"
                },
                "macLimit": {
                    "type": "integer",
                    "description": "The maximum number of MAC addresses that can be learned on this port.\n"
                },
                "macLimitPolicy": {
                    "type": "string",
                    "description": "The policy after MAC Limit is exceeded. Possible values are `ALLOW` and `DROP`, with default being `ALLOW`.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "remoteOverlayMacLimit": {
                    "type": "integer",
                    "description": "The maximum number of MAC addresses learned on an overlay Logical Switch.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyMacDiscoveryProfileTag:PolicyMacDiscoveryProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "unknownUnicastFloodingEnabled": {
                    "type": "boolean",
                    "description": "Allowing flooding for unlearned MAC for ingress traffic.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyMacDiscoveryProfileContext:PolicyMacDiscoveryProfileContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "macChangeEnabled": {
                    "type": "boolean",
                    "description": "MAC address change feature.\n"
                },
                "macLearningEnabled": {
                    "type": "boolean",
                    "description": "MAC learning feature.\n"
                },
                "macLimit": {
                    "type": "integer",
                    "description": "The maximum number of MAC addresses that can be learned on this port.\n"
                },
                "macLimitPolicy": {
                    "type": "string",
                    "description": "The policy after MAC Limit is exceeded. Possible values are `ALLOW` and `DROP`, with default being `ALLOW`.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "remoteOverlayMacLimit": {
                    "type": "integer",
                    "description": "The maximum number of MAC addresses learned on an overlay Logical Switch.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyMacDiscoveryProfileTag:PolicyMacDiscoveryProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "unknownUnicastFloodingEnabled": {
                    "type": "boolean",
                    "description": "Allowing flooding for unlearned MAC for ingress traffic.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyMacDiscoveryProfile resources.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyMacDiscoveryProfileContext:PolicyMacDiscoveryProfileContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "macChangeEnabled": {
                        "type": "boolean",
                        "description": "MAC address change feature.\n"
                    },
                    "macLearningEnabled": {
                        "type": "boolean",
                        "description": "MAC learning feature.\n"
                    },
                    "macLimit": {
                        "type": "integer",
                        "description": "The maximum number of MAC addresses that can be learned on this port.\n"
                    },
                    "macLimitPolicy": {
                        "type": "string",
                        "description": "The policy after MAC Limit is exceeded. Possible values are `ALLOW` and `DROP`, with default being `ALLOW`.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "remoteOverlayMacLimit": {
                        "type": "integer",
                        "description": "The maximum number of MAC addresses learned on an overlay Logical Switch.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyMacDiscoveryProfileTag:PolicyMacDiscoveryProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    },
                    "unknownUnicastFloodingEnabled": {
                        "type": "boolean",
                        "description": "Allowing flooding for unlearned MAC for ingress traffic.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyNatRule:PolicyNatRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action for the NAT Rule. One of `SNAT`, `DNAT`, `REFLEXIVE`, `NO_SNAT`, `NO_DNAT`, `NAT64`.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyNatRuleContext:PolicyNatRuleContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "destinationNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of destination network IP addresses or CIDR.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable the Rule. Defaults to `true`.\n"
                },
                "firewallMatch": {
                    "type": "string",
                    "description": "Firewall match flag. One of `MATCH_EXTERNAL_ADDRESS`, `MATCH_INTERNAL_ADDRESS`, `BYPASS`.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "The NSX Policy path to the Tier0 or Tier1 Gateway for this NAT Rule.\n"
                },
                "logging": {
                    "type": "boolean",
                    "description": "Enable/disable rule logging. Defaults to `false`.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "rulePriority": {
                    "type": "integer",
                    "description": "The priority of the rule. Valid values between 0 to 2147483647. Defaults to `100`.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of paths to interfaces and/or labels where the NAT Rule is enforced.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Policy path of Service on which the NAT rule will be applied.\n"
                },
                "sourceNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of source network IP addresses or CIDR.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyNatRuleTag:PolicyNatRuleTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this NAT Rule.\n"
                },
                "translatedNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of translated network IP addresses or CIDR.\n"
                },
                "translatedPorts": {
                    "type": "string",
                    "description": "Port number or port range. For use with `DNAT` action only.\n"
                }
            },
            "required": [
                "action",
                "displayName",
                "gatewayPath",
                "nsxId",
                "path",
                "revision",
                "scopes"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "The action for the NAT Rule. One of `SNAT`, `DNAT`, `REFLEXIVE`, `NO_SNAT`, `NO_DNAT`, `NAT64`.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyNatRuleContext:PolicyNatRuleContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "destinationNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of destination network IP addresses or CIDR.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable the Rule. Defaults to `true`.\n"
                },
                "firewallMatch": {
                    "type": "string",
                    "description": "Firewall match flag. One of `MATCH_EXTERNAL_ADDRESS`, `MATCH_INTERNAL_ADDRESS`, `BYPASS`.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "The NSX Policy path to the Tier0 or Tier1 Gateway for this NAT Rule.\n",
                    "willReplaceOnChanges": true
                },
                "logging": {
                    "type": "boolean",
                    "description": "Enable/disable rule logging. Defaults to `false`.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                    "willReplaceOnChanges": true
                },
                "rulePriority": {
                    "type": "integer",
                    "description": "The priority of the rule. Valid values between 0 to 2147483647. Defaults to `100`.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of paths to interfaces and/or labels where the NAT Rule is enforced.\n"
                },
                "service": {
                    "type": "string",
                    "description": "Policy path of Service on which the NAT rule will be applied.\n"
                },
                "sourceNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of source network IP addresses or CIDR.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyNatRuleTag:PolicyNatRuleTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this NAT Rule.\n"
                },
                "translatedNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of translated network IP addresses or CIDR.\n"
                },
                "translatedPorts": {
                    "type": "string",
                    "description": "Port number or port range. For use with `DNAT` action only.\n"
                }
            },
            "requiredInputs": [
                "action",
                "displayName",
                "gatewayPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyNatRule resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "The action for the NAT Rule. One of `SNAT`, `DNAT`, `REFLEXIVE`, `NO_SNAT`, `NO_DNAT`, `NAT64`.\n"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyNatRuleContext:PolicyNatRuleContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "destinationNetworks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of destination network IP addresses or CIDR.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable the Rule. Defaults to `true`.\n"
                    },
                    "firewallMatch": {
                        "type": "string",
                        "description": "Firewall match flag. One of `MATCH_EXTERNAL_ADDRESS`, `MATCH_INTERNAL_ADDRESS`, `BYPASS`.\n"
                    },
                    "gatewayPath": {
                        "type": "string",
                        "description": "The NSX Policy path to the Tier0 or Tier1 Gateway for this NAT Rule.\n",
                        "willReplaceOnChanges": true
                    },
                    "logging": {
                        "type": "boolean",
                        "description": "Enable/disable rule logging. Defaults to `false`.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "rulePriority": {
                        "type": "integer",
                        "description": "The priority of the rule. Valid values between 0 to 2147483647. Defaults to `100`.\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of paths to interfaces and/or labels where the NAT Rule is enforced.\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "Policy path of Service on which the NAT rule will be applied.\n"
                    },
                    "sourceNetworks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of source network IP addresses or CIDR.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyNatRuleTag:PolicyNatRuleTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this NAT Rule.\n"
                    },
                    "translatedNetworks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of translated network IP addresses or CIDR.\n"
                    },
                    "translatedPorts": {
                        "type": "string",
                        "description": "Port number or port range. For use with `DNAT` action only.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyOspfArea:PolicyOspfArea": {
            "properties": {
                "areaId": {
                    "type": "string",
                    "description": "OSPF area ID in decimal or dotted format\n"
                },
                "areaType": {
                    "type": "string",
                    "description": "OSPF Area type, one of `NORMAL` or `NSSA`. Default is `NSSA`.\n"
                },
                "authMode": {
                    "type": "string",
                    "description": "OSPF Authentication mode, one of `NONE`, `PASSWORD` or `MD5`. By default, OSPF authentication is disabled with mode `NONE`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "keyId": {
                    "type": "integer",
                    "description": "Authentication secret key id, required for authenication mode `MD5`. This attribute is sensitive.\n",
                    "secret": true
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "ospfPath": {
                    "type": "string",
                    "description": "The policy path to the OSPF configuration on particular Tier-0 Gateway.\n* `area_id   - (Required) OSPF Area ID in either decimal or dotted format.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Authentication secret key, required for authentication mode other than `NONE`. This attribute is sensitive. Length should not exceed 8 characters.\n",
                    "secret": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyOspfAreaTag:PolicyOspfAreaTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "areaId",
                "displayName",
                "nsxId",
                "ospfPath",
                "path",
                "revision"
            ],
            "inputProperties": {
                "areaId": {
                    "type": "string",
                    "description": "OSPF area ID in decimal or dotted format\n"
                },
                "areaType": {
                    "type": "string",
                    "description": "OSPF Area type, one of `NORMAL` or `NSSA`. Default is `NSSA`.\n"
                },
                "authMode": {
                    "type": "string",
                    "description": "OSPF Authentication mode, one of `NONE`, `PASSWORD` or `MD5`. By default, OSPF authentication is disabled with mode `NONE`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "keyId": {
                    "type": "integer",
                    "description": "Authentication secret key id, required for authenication mode `MD5`. This attribute is sensitive.\n",
                    "secret": true
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "ospfPath": {
                    "type": "string",
                    "description": "The policy path to the OSPF configuration on particular Tier-0 Gateway.\n* `area_id   - (Required) OSPF Area ID in either decimal or dotted format.\n",
                    "willReplaceOnChanges": true
                },
                "secretKey": {
                    "type": "string",
                    "description": "Authentication secret key, required for authentication mode other than `NONE`. This attribute is sensitive. Length should not exceed 8 characters.\n",
                    "secret": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyOspfAreaTag:PolicyOspfAreaTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "areaId",
                "displayName",
                "ospfPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyOspfArea resources.\n",
                "properties": {
                    "areaId": {
                        "type": "string",
                        "description": "OSPF area ID in decimal or dotted format\n"
                    },
                    "areaType": {
                        "type": "string",
                        "description": "OSPF Area type, one of `NORMAL` or `NSSA`. Default is `NSSA`.\n"
                    },
                    "authMode": {
                        "type": "string",
                        "description": "OSPF Authentication mode, one of `NONE`, `PASSWORD` or `MD5`. By default, OSPF authentication is disabled with mode `NONE`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "keyId": {
                        "type": "integer",
                        "description": "Authentication secret key id, required for authenication mode `MD5`. This attribute is sensitive.\n",
                        "secret": true
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "ospfPath": {
                        "type": "string",
                        "description": "The policy path to the OSPF configuration on particular Tier-0 Gateway.\n* `area_id   - (Required) OSPF Area ID in either decimal or dotted format.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "Authentication secret key, required for authentication mode other than `NONE`. This attribute is sensitive. Length should not exceed 8 characters.\n",
                        "secret": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyOspfAreaTag:PolicyOspfAreaTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyOspfConfig:PolicyOspfConfig": {
            "description": "This resource provides a method for the management of OSPF for T0 Gateway on default locale service. A single resource should be specified per T0 Gateway. Edge Cluster is expected to be configured on the Gateway.\n\nThis resource is applicable to NSX Policy Manager only.\nThis resource is supported with NSX 3.1.1 onwards.\n\n\u003e **NOTE:** NSX does not support deleting OSPF config on gateway, therefore this resource will update NSX object, but never delete it. To undo OSPF configuration, please disable it within the resource.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@SCC-Hyperscale-fr/nsxt\";\n\nconst test = new nsxt.PolicyOspfConfig(\"test\", {\n    gatewayPath: nsxt_policy_tier0_gateway.gw1.path,\n    enabled: true,\n    ecmp: true,\n    defaultOriginate: false,\n    gracefulRestartMode: \"HELPER_ONLY\",\n    summaryAddresses: [{\n        prefix: \"20.1.0.0/24\",\n        advertise: false,\n    }],\n});\n```\n```python\nimport pulumi\nimport hyperscale_pulumi_nsxt as nsxt\n\ntest = nsxt.PolicyOspfConfig(\"test\",\n    gateway_path=nsxt_policy_tier0_gateway[\"gw1\"][\"path\"],\n    enabled=True,\n    ecmp=True,\n    default_originate=False,\n    graceful_restart_mode=\"HELPER_ONLY\",\n    summary_addresses=[nsxt.PolicyOspfConfigSummaryAddressArgs(\n        prefix=\"20.1.0.0/24\",\n        advertise=False,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = SCC-Hyperscale-fr.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Nsxt.PolicyOspfConfig(\"test\", new()\n    {\n        GatewayPath = nsxt_policy_tier0_gateway.Gw1.Path,\n        Enabled = true,\n        Ecmp = true,\n        DefaultOriginate = false,\n        GracefulRestartMode = \"HELPER_ONLY\",\n        SummaryAddresses = new[]\n        {\n            new Nsxt.Inputs.PolicyOspfConfigSummaryAddressArgs\n            {\n                Prefix = \"20.1.0.0/24\",\n                Advertise = false,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.NewPolicyOspfConfig(ctx, \"test\", \u0026nsxt.PolicyOspfConfigArgs{\n\t\t\tGatewayPath:         pulumi.Any(nsxt_policy_tier0_gateway.Gw1.Path),\n\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\tEcmp:                pulumi.Bool(true),\n\t\t\tDefaultOriginate:    pulumi.Bool(false),\n\t\t\tGracefulRestartMode: pulumi.String(\"HELPER_ONLY\"),\n\t\t\tSummaryAddresses: nsxt.PolicyOspfConfigSummaryAddressArray{\n\t\t\t\t\u0026nsxt.PolicyOspfConfigSummaryAddressArgs{\n\t\t\t\t\tPrefix:    pulumi.String(\"20.1.0.0/24\"),\n\t\t\t\t\tAdvertise: pulumi.Bool(false),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.PolicyOspfConfig;\nimport com.pulumi.nsxt.PolicyOspfConfigArgs;\nimport com.pulumi.nsxt.inputs.PolicyOspfConfigSummaryAddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new PolicyOspfConfig(\"test\", PolicyOspfConfigArgs.builder()        \n            .gatewayPath(nsxt_policy_tier0_gateway.gw1().path())\n            .enabled(true)\n            .ecmp(true)\n            .defaultOriginate(false)\n            .gracefulRestartMode(\"HELPER_ONLY\")\n            .summaryAddresses(PolicyOspfConfigSummaryAddressArgs.builder()\n                .prefix(\"20.1.0.0/24\")\n                .advertise(false)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: nsxt:PolicyOspfConfig\n    properties:\n      gatewayPath: ${nsxt_policy_tier0_gateway.gw1.path}\n      enabled: true\n      ecmp: true\n      defaultOriginate: false\n      gracefulRestartMode: HELPER_ONLY\n      summaryAddresses:\n        - prefix: 20.1.0.0/24\n          advertise: false\n```\n{{% /example %}}\n{{% /examples %}}\n## Importing\n\nImporting the resource is not supported - creating the resource would update it to desired state on backend.\n",
            "properties": {
                "defaultOriginate": {
                    "type": "boolean",
                    "description": "A boolean flag to configure advertisement of default route into OSPF domain. Default is `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "ecmp": {
                    "type": "boolean",
                    "description": "A boolean flag to enable/disable ECMP. Default is `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A boolean flag to enable/disable OSPF. Default is `true`.\n"
                },
                "gatewayId": {
                    "type": "string",
                    "description": "Tier0 Gateway ID on which OSPF is configured.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Policy Path for Tier0 Gateway.\n"
                },
                "gracefulRestartMode": {
                    "type": "string",
                    "description": "Graceful Restart Mode, one of `HELPER_ONLY` or `DISABLED`. Defaut is `HELPER_ONLY`.\n"
                },
                "localeServiceId": {
                    "type": "string",
                    "description": "Tier0 Gateway Locale Service ID on which OSPF is configured.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "summaryAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyOspfConfigSummaryAddress:PolicyOspfConfigSummaryAddress"
                    },
                    "description": "Repeatable block to define addresses to summarize or filter external routes.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyOspfConfigTag:PolicyOspfConfigTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Tier-0 gateway's OSPF configuration.\n"
                }
            },
            "required": [
                "displayName",
                "gatewayId",
                "gatewayPath",
                "localeServiceId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "defaultOriginate": {
                    "type": "boolean",
                    "description": "A boolean flag to configure advertisement of default route into OSPF domain. Default is `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "ecmp": {
                    "type": "boolean",
                    "description": "A boolean flag to enable/disable ECMP. Default is `true`.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "A boolean flag to enable/disable OSPF. Default is `true`.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Policy Path for Tier0 Gateway.\n",
                    "willReplaceOnChanges": true
                },
                "gracefulRestartMode": {
                    "type": "string",
                    "description": "Graceful Restart Mode, one of `HELPER_ONLY` or `DISABLED`. Defaut is `HELPER_ONLY`.\n"
                },
                "summaryAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyOspfConfigSummaryAddress:PolicyOspfConfigSummaryAddress"
                    },
                    "description": "Repeatable block to define addresses to summarize or filter external routes.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyOspfConfigTag:PolicyOspfConfigTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Tier-0 gateway's OSPF configuration.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "gatewayPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyOspfConfig resources.\n",
                "properties": {
                    "defaultOriginate": {
                        "type": "boolean",
                        "description": "A boolean flag to configure advertisement of default route into OSPF domain. Default is `false`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "ecmp": {
                        "type": "boolean",
                        "description": "A boolean flag to enable/disable ECMP. Default is `true`.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "A boolean flag to enable/disable OSPF. Default is `true`.\n"
                    },
                    "gatewayId": {
                        "type": "string",
                        "description": "Tier0 Gateway ID on which OSPF is configured.\n"
                    },
                    "gatewayPath": {
                        "type": "string",
                        "description": "Policy Path for Tier0 Gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "gracefulRestartMode": {
                        "type": "string",
                        "description": "Graceful Restart Mode, one of `HELPER_ONLY` or `DISABLED`. Defaut is `HELPER_ONLY`.\n"
                    },
                    "localeServiceId": {
                        "type": "string",
                        "description": "Tier0 Gateway Locale Service ID on which OSPF is configured.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "summaryAddresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyOspfConfigSummaryAddress:PolicyOspfConfigSummaryAddress"
                        },
                        "description": "Repeatable block to define addresses to summarize or filter external routes.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyOspfConfigTag:PolicyOspfConfigTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this Tier-0 gateway's OSPF configuration.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyPredefinedGatewayPolicy:PolicyPredefinedGatewayPolicy": {
            "properties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyPredefinedGatewayPolicyContext:PolicyPredefinedGatewayPolicyContext",
                    "description": "The context which the object belongs to\n"
                },
                "defaultRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyPredefinedGatewayPolicyDefaultRule:PolicyPredefinedGatewayPolicyDefaultRule"
                    },
                    "description": "A repeatable block to modify default rules for the Gateway Policy in a `DEFAULT` category. Each rule includes the following fields:\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Policy path for the predefined Gateway Policy to modify.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyPredefinedGatewayPolicyRule:PolicyPredefinedGatewayPolicyRule"
                    },
                    "description": "A repeatable block to specify rules for the Gateway Policy. This setting is not applicable to policy belonging to `DEFAULT` category. Each rule includes the following fields:\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyPredefinedGatewayPolicyTag:PolicyPredefinedGatewayPolicyTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "required": [
                "defaultRules",
                "description",
                "path",
                "revision"
            ],
            "inputProperties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyPredefinedGatewayPolicyContext:PolicyPredefinedGatewayPolicyContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "defaultRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyPredefinedGatewayPolicyDefaultRule:PolicyPredefinedGatewayPolicyDefaultRule"
                    },
                    "description": "A repeatable block to modify default rules for the Gateway Policy in a `DEFAULT` category. Each rule includes the following fields:\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Policy path for the predefined Gateway Policy to modify.\n",
                    "willReplaceOnChanges": true
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyPredefinedGatewayPolicyRule:PolicyPredefinedGatewayPolicyRule"
                    },
                    "description": "A repeatable block to specify rules for the Gateway Policy. This setting is not applicable to policy belonging to `DEFAULT` category. Each rule includes the following fields:\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyPredefinedGatewayPolicyTag:PolicyPredefinedGatewayPolicyTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "requiredInputs": [
                "path"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyPredefinedGatewayPolicy resources.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyPredefinedGatewayPolicyContext:PolicyPredefinedGatewayPolicyContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyPredefinedGatewayPolicyDefaultRule:PolicyPredefinedGatewayPolicyDefaultRule"
                        },
                        "description": "A repeatable block to modify default rules for the Gateway Policy in a `DEFAULT` category. Each rule includes the following fields:\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Policy path for the predefined Gateway Policy to modify.\n",
                        "willReplaceOnChanges": true
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyPredefinedGatewayPolicyRule:PolicyPredefinedGatewayPolicyRule"
                        },
                        "description": "A repeatable block to specify rules for the Gateway Policy. This setting is not applicable to policy belonging to `DEFAULT` category. Each rule includes the following fields:\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyPredefinedGatewayPolicyTag:PolicyPredefinedGatewayPolicyTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this Rule.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyPredefinedSecurityPolicy:PolicyPredefinedSecurityPolicy": {
            "description": "This resource provides a method to modify default Security Policy and its rules.\nThis can be default layer2 policy or default layer3 policy. Maximum one resource\nfor each type should exist in your configuration.\n\n\u003e **NOTE:** An absolute path, such as `/infra/domains/default/security-policies/default-layer3-section`, can be provided for this resource (this approach will work slightly faster, as the roundtrip for data source retrieval will be spared) In the example below a data source is used in order to pull the predefined policy.\n\nThis resource is applicable to NSX Global Manager, NSX Policy Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@SCC-Hyperscale-fr/nsxt\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst defaultL3 = nsxt.getPolicySecurityPolicy({\n    isDefault: true,\n    category: \"Application\",\n});\nconst test = new nsxt.PolicyPredefinedSecurityPolicy(\"test\", {\n    path: defaultL3.then(defaultL3 =\u003e defaultL3.path),\n    tags: [{\n        scope: \"color\",\n        tag: \"orange\",\n    }],\n    rules: [\n        {\n            displayName: \"allow_icmp\",\n            destinationGroups: [\n                nsxt_policy_group.cats.path,\n                nsxt_policy_group.dogs.path,\n            ],\n            action: \"ALLOW\",\n            services: [nsxt_policy_service.icmp.path],\n            logged: true,\n        },\n        {\n            displayName: \"allow_udp\",\n            sourceGroups: [nsxt_policy_group.fish.path],\n            sourcesExcluded: true,\n            scopes: [nsxt_policy_group.aquarium.path],\n            action: \"ALLOW\",\n            services: [nsxt_policy_service.udp.path],\n            logged: true,\n            disabled: true,\n        },\n    ],\n    defaultRule: {\n        action: \"DROP\",\n    },\n});\n```\n```python\nimport pulumi\nimport hyperscale_pulumi_nsxt as nsxt\nimport pulumi_nsxt as nsxt\n\ndefault_l3 = nsxt.get_policy_security_policy(is_default=True,\n    category=\"Application\")\ntest = nsxt.PolicyPredefinedSecurityPolicy(\"test\",\n    path=default_l3.path,\n    tags=[nsxt.PolicyPredefinedSecurityPolicyTagArgs(\n        scope=\"color\",\n        tag=\"orange\",\n    )],\n    rules=[\n        nsxt.PolicyPredefinedSecurityPolicyRuleArgs(\n            display_name=\"allow_icmp\",\n            destination_groups=[\n                nsxt_policy_group[\"cats\"][\"path\"],\n                nsxt_policy_group[\"dogs\"][\"path\"],\n            ],\n            action=\"ALLOW\",\n            services=[nsxt_policy_service[\"icmp\"][\"path\"]],\n            logged=True,\n        ),\n        nsxt.PolicyPredefinedSecurityPolicyRuleArgs(\n            display_name=\"allow_udp\",\n            source_groups=[nsxt_policy_group[\"fish\"][\"path\"]],\n            sources_excluded=True,\n            scopes=[nsxt_policy_group[\"aquarium\"][\"path\"]],\n            action=\"ALLOW\",\n            services=[nsxt_policy_service[\"udp\"][\"path\"]],\n            logged=True,\n            disabled=True,\n        ),\n    ],\n    default_rule=nsxt.PolicyPredefinedSecurityPolicyDefaultRuleArgs(\n        action=\"DROP\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\nusing Nsxt = SCC-Hyperscale-fr.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var defaultL3 = Nsxt.GetPolicySecurityPolicy.Invoke(new()\n    {\n        IsDefault = true,\n        Category = \"Application\",\n    });\n\n    var test = new Nsxt.PolicyPredefinedSecurityPolicy(\"test\", new()\n    {\n        Path = defaultL3.Apply(getPolicySecurityPolicyResult =\u003e getPolicySecurityPolicyResult.Path),\n        Tags = new[]\n        {\n            new Nsxt.Inputs.PolicyPredefinedSecurityPolicyTagArgs\n            {\n                Scope = \"color\",\n                Tag = \"orange\",\n            },\n        },\n        Rules = new[]\n        {\n            new Nsxt.Inputs.PolicyPredefinedSecurityPolicyRuleArgs\n            {\n                DisplayName = \"allow_icmp\",\n                DestinationGroups = new[]\n                {\n                    nsxt_policy_group.Cats.Path,\n                    nsxt_policy_group.Dogs.Path,\n                },\n                Action = \"ALLOW\",\n                Services = new[]\n                {\n                    nsxt_policy_service.Icmp.Path,\n                },\n                Logged = true,\n            },\n            new Nsxt.Inputs.PolicyPredefinedSecurityPolicyRuleArgs\n            {\n                DisplayName = \"allow_udp\",\n                SourceGroups = new[]\n                {\n                    nsxt_policy_group.Fish.Path,\n                },\n                SourcesExcluded = true,\n                Scopes = new[]\n                {\n                    nsxt_policy_group.Aquarium.Path,\n                },\n                Action = \"ALLOW\",\n                Services = new[]\n                {\n                    nsxt_policy_service.Udp.Path,\n                },\n                Logged = true,\n                Disabled = true,\n            },\n        },\n        DefaultRule = new Nsxt.Inputs.PolicyPredefinedSecurityPolicyDefaultRuleArgs\n        {\n            Action = \"DROP\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdefaultL3, err := nsxt.LookupPolicySecurityPolicy(ctx, \u0026nsxt.LookupPolicySecurityPolicyArgs{\n\t\t\tIsDefault: pulumi.BoolRef(true),\n\t\t\tCategory:  pulumi.StringRef(\"Application\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.NewPolicyPredefinedSecurityPolicy(ctx, \"test\", \u0026nsxt.PolicyPredefinedSecurityPolicyArgs{\n\t\t\tPath: *pulumi.String(defaultL3.Path),\n\t\t\tTags: nsxt.PolicyPredefinedSecurityPolicyTagArray{\n\t\t\t\t\u0026nsxt.PolicyPredefinedSecurityPolicyTagArgs{\n\t\t\t\t\tScope: pulumi.String(\"color\"),\n\t\t\t\t\tTag:   pulumi.String(\"orange\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRules: nsxt.PolicyPredefinedSecurityPolicyRuleArray{\n\t\t\t\t\u0026nsxt.PolicyPredefinedSecurityPolicyRuleArgs{\n\t\t\t\t\tDisplayName: pulumi.String(\"allow_icmp\"),\n\t\t\t\t\tDestinationGroups: pulumi.StringArray{\n\t\t\t\t\t\tnsxt_policy_group.Cats.Path,\n\t\t\t\t\t\tnsxt_policy_group.Dogs.Path,\n\t\t\t\t\t},\n\t\t\t\t\tAction: pulumi.String(\"ALLOW\"),\n\t\t\t\t\tServices: pulumi.StringArray{\n\t\t\t\t\t\tnsxt_policy_service.Icmp.Path,\n\t\t\t\t\t},\n\t\t\t\t\tLogged: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026nsxt.PolicyPredefinedSecurityPolicyRuleArgs{\n\t\t\t\t\tDisplayName: pulumi.String(\"allow_udp\"),\n\t\t\t\t\tSourceGroups: pulumi.StringArray{\n\t\t\t\t\t\tnsxt_policy_group.Fish.Path,\n\t\t\t\t\t},\n\t\t\t\t\tSourcesExcluded: pulumi.Bool(true),\n\t\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\t\tnsxt_policy_group.Aquarium.Path,\n\t\t\t\t\t},\n\t\t\t\t\tAction: pulumi.String(\"ALLOW\"),\n\t\t\t\t\tServices: pulumi.StringArray{\n\t\t\t\t\t\tnsxt_policy_service.Udp.Path,\n\t\t\t\t\t},\n\t\t\t\t\tLogged:   pulumi.Bool(true),\n\t\t\t\t\tDisabled: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDefaultRule: \u0026nsxt.PolicyPredefinedSecurityPolicyDefaultRuleArgs{\n\t\t\t\tAction: pulumi.String(\"DROP\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicySecurityPolicyArgs;\nimport com.pulumi.nsxt.PolicyPredefinedSecurityPolicy;\nimport com.pulumi.nsxt.PolicyPredefinedSecurityPolicyArgs;\nimport com.pulumi.nsxt.inputs.PolicyPredefinedSecurityPolicyTagArgs;\nimport com.pulumi.nsxt.inputs.PolicyPredefinedSecurityPolicyRuleArgs;\nimport com.pulumi.nsxt.inputs.PolicyPredefinedSecurityPolicyDefaultRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var defaultL3 = NsxtFunctions.getPolicySecurityPolicy(GetPolicySecurityPolicyArgs.builder()\n            .isDefault(true)\n            .category(\"Application\")\n            .build());\n\n        var test = new PolicyPredefinedSecurityPolicy(\"test\", PolicyPredefinedSecurityPolicyArgs.builder()        \n            .path(defaultL3.applyValue(getPolicySecurityPolicyResult -\u003e getPolicySecurityPolicyResult.path()))\n            .tags(PolicyPredefinedSecurityPolicyTagArgs.builder()\n                .scope(\"color\")\n                .tag(\"orange\")\n                .build())\n            .rules(            \n                PolicyPredefinedSecurityPolicyRuleArgs.builder()\n                    .displayName(\"allow_icmp\")\n                    .destinationGroups(                    \n                        nsxt_policy_group.cats().path(),\n                        nsxt_policy_group.dogs().path())\n                    .action(\"ALLOW\")\n                    .services(nsxt_policy_service.icmp().path())\n                    .logged(true)\n                    .build(),\n                PolicyPredefinedSecurityPolicyRuleArgs.builder()\n                    .displayName(\"allow_udp\")\n                    .sourceGroups(nsxt_policy_group.fish().path())\n                    .sourcesExcluded(true)\n                    .scopes(nsxt_policy_group.aquarium().path())\n                    .action(\"ALLOW\")\n                    .services(nsxt_policy_service.udp().path())\n                    .logged(true)\n                    .disabled(true)\n                    .build())\n            .defaultRule(PolicyPredefinedSecurityPolicyDefaultRuleArgs.builder()\n                .action(\"DROP\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: nsxt:PolicyPredefinedSecurityPolicy\n    properties:\n      path: ${defaultL3.path}\n      tags:\n        - scope: color\n          tag: orange\n      rules:\n        - displayName: allow_icmp\n          destinationGroups:\n            - ${nsxt_policy_group.cats.path}\n            - ${nsxt_policy_group.dogs.path}\n          action: ALLOW\n          services:\n            - ${nsxt_policy_service.icmp.path}\n          logged: true\n        - displayName: allow_udp\n          sourceGroups:\n            - ${nsxt_policy_group.fish.path}\n          sourcesExcluded: true\n          scopes:\n            - ${nsxt_policy_group.aquarium.path}\n          action: ALLOW\n          services:\n            - ${nsxt_policy_service.udp.path}\n          logged: true\n          disabled: true\n      defaultRule:\n        action: DROP\nvariables:\n  defaultL3:\n    fn::invoke:\n      Function: nsxt:getPolicySecurityPolicy\n      Arguments:\n        isDefault: true\n        category: Application\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@SCC-Hyperscale-fr/nsxt\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst defaultL3 = nsxt.getPolicySecurityPolicy({\n    isDefault: true,\n    category: \"Application\",\n});\nconst test = new nsxt.PolicyPredefinedSecurityPolicy(\"test\", {\n    context: {\n        projectId: demoproj.then(demoproj =\u003e demoproj.id),\n    },\n    path: defaultL3.then(defaultL3 =\u003e defaultL3.path),\n    tags: [{\n        scope: \"color\",\n        tag: \"orange\",\n    }],\n    rules: [\n        {\n            displayName: \"allow_icmp\",\n            destinationGroups: [\n                nsxt_policy_group.cats.path,\n                nsxt_policy_group.dogs.path,\n            ],\n            action: \"ALLOW\",\n            services: [nsxt_policy_service.icmp.path],\n            logged: true,\n        },\n        {\n            displayName: \"allow_udp\",\n            sourceGroups: [nsxt_policy_group.fish.path],\n            sourcesExcluded: true,\n            scopes: [nsxt_policy_group.aquarium.path],\n            action: \"ALLOW\",\n            services: [nsxt_policy_service.udp.path],\n            logged: true,\n            disabled: true,\n        },\n    ],\n    defaultRule: {\n        action: \"DROP\",\n    },\n});\n```\n```python\nimport pulumi\nimport hyperscale_pulumi_nsxt as nsxt\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\ndefault_l3 = nsxt.get_policy_security_policy(is_default=True,\n    category=\"Application\")\ntest = nsxt.PolicyPredefinedSecurityPolicy(\"test\",\n    context=nsxt.PolicyPredefinedSecurityPolicyContextArgs(\n        project_id=demoproj.id,\n    ),\n    path=default_l3.path,\n    tags=[nsxt.PolicyPredefinedSecurityPolicyTagArgs(\n        scope=\"color\",\n        tag=\"orange\",\n    )],\n    rules=[\n        nsxt.PolicyPredefinedSecurityPolicyRuleArgs(\n            display_name=\"allow_icmp\",\n            destination_groups=[\n                nsxt_policy_group[\"cats\"][\"path\"],\n                nsxt_policy_group[\"dogs\"][\"path\"],\n            ],\n            action=\"ALLOW\",\n            services=[nsxt_policy_service[\"icmp\"][\"path\"]],\n            logged=True,\n        ),\n        nsxt.PolicyPredefinedSecurityPolicyRuleArgs(\n            display_name=\"allow_udp\",\n            source_groups=[nsxt_policy_group[\"fish\"][\"path\"]],\n            sources_excluded=True,\n            scopes=[nsxt_policy_group[\"aquarium\"][\"path\"]],\n            action=\"ALLOW\",\n            services=[nsxt_policy_service[\"udp\"][\"path\"]],\n            logged=True,\n            disabled=True,\n        ),\n    ],\n    default_rule=nsxt.PolicyPredefinedSecurityPolicyDefaultRuleArgs(\n        action=\"DROP\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\nusing Nsxt = SCC-Hyperscale-fr.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var defaultL3 = Nsxt.GetPolicySecurityPolicy.Invoke(new()\n    {\n        IsDefault = true,\n        Category = \"Application\",\n    });\n\n    var test = new Nsxt.PolicyPredefinedSecurityPolicy(\"test\", new()\n    {\n        Context = new Nsxt.Inputs.PolicyPredefinedSecurityPolicyContextArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        Path = defaultL3.Apply(getPolicySecurityPolicyResult =\u003e getPolicySecurityPolicyResult.Path),\n        Tags = new[]\n        {\n            new Nsxt.Inputs.PolicyPredefinedSecurityPolicyTagArgs\n            {\n                Scope = \"color\",\n                Tag = \"orange\",\n            },\n        },\n        Rules = new[]\n        {\n            new Nsxt.Inputs.PolicyPredefinedSecurityPolicyRuleArgs\n            {\n                DisplayName = \"allow_icmp\",\n                DestinationGroups = new[]\n                {\n                    nsxt_policy_group.Cats.Path,\n                    nsxt_policy_group.Dogs.Path,\n                },\n                Action = \"ALLOW\",\n                Services = new[]\n                {\n                    nsxt_policy_service.Icmp.Path,\n                },\n                Logged = true,\n            },\n            new Nsxt.Inputs.PolicyPredefinedSecurityPolicyRuleArgs\n            {\n                DisplayName = \"allow_udp\",\n                SourceGroups = new[]\n                {\n                    nsxt_policy_group.Fish.Path,\n                },\n                SourcesExcluded = true,\n                Scopes = new[]\n                {\n                    nsxt_policy_group.Aquarium.Path,\n                },\n                Action = \"ALLOW\",\n                Services = new[]\n                {\n                    nsxt_policy_service.Udp.Path,\n                },\n                Logged = true,\n                Disabled = true,\n            },\n        },\n        DefaultRule = new Nsxt.Inputs.PolicyPredefinedSecurityPolicyDefaultRuleArgs\n        {\n            Action = \"DROP\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefaultL3, err := nsxt.LookupPolicySecurityPolicy(ctx, \u0026nsxt.LookupPolicySecurityPolicyArgs{\n\t\t\tIsDefault: pulumi.BoolRef(true),\n\t\t\tCategory:  pulumi.StringRef(\"Application\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.NewPolicyPredefinedSecurityPolicy(ctx, \"test\", \u0026nsxt.PolicyPredefinedSecurityPolicyArgs{\n\t\t\tContext: \u0026nsxt.PolicyPredefinedSecurityPolicyContextArgs{\n\t\t\t\tProjectId: *pulumi.String(demoproj.Id),\n\t\t\t},\n\t\t\tPath: *pulumi.String(defaultL3.Path),\n\t\t\tTags: nsxt.PolicyPredefinedSecurityPolicyTagArray{\n\t\t\t\t\u0026nsxt.PolicyPredefinedSecurityPolicyTagArgs{\n\t\t\t\t\tScope: pulumi.String(\"color\"),\n\t\t\t\t\tTag:   pulumi.String(\"orange\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRules: nsxt.PolicyPredefinedSecurityPolicyRuleArray{\n\t\t\t\t\u0026nsxt.PolicyPredefinedSecurityPolicyRuleArgs{\n\t\t\t\t\tDisplayName: pulumi.String(\"allow_icmp\"),\n\t\t\t\t\tDestinationGroups: pulumi.StringArray{\n\t\t\t\t\t\tnsxt_policy_group.Cats.Path,\n\t\t\t\t\t\tnsxt_policy_group.Dogs.Path,\n\t\t\t\t\t},\n\t\t\t\t\tAction: pulumi.String(\"ALLOW\"),\n\t\t\t\t\tServices: pulumi.StringArray{\n\t\t\t\t\t\tnsxt_policy_service.Icmp.Path,\n\t\t\t\t\t},\n\t\t\t\t\tLogged: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026nsxt.PolicyPredefinedSecurityPolicyRuleArgs{\n\t\t\t\t\tDisplayName: pulumi.String(\"allow_udp\"),\n\t\t\t\t\tSourceGroups: pulumi.StringArray{\n\t\t\t\t\t\tnsxt_policy_group.Fish.Path,\n\t\t\t\t\t},\n\t\t\t\t\tSourcesExcluded: pulumi.Bool(true),\n\t\t\t\t\tScopes: pulumi.StringArray{\n\t\t\t\t\t\tnsxt_policy_group.Aquarium.Path,\n\t\t\t\t\t},\n\t\t\t\t\tAction: pulumi.String(\"ALLOW\"),\n\t\t\t\t\tServices: pulumi.StringArray{\n\t\t\t\t\t\tnsxt_policy_service.Udp.Path,\n\t\t\t\t\t},\n\t\t\t\t\tLogged:   pulumi.Bool(true),\n\t\t\t\t\tDisabled: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDefaultRule: \u0026nsxt.PolicyPredefinedSecurityPolicyDefaultRuleArgs{\n\t\t\t\tAction: pulumi.String(\"DROP\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicySecurityPolicyArgs;\nimport com.pulumi.nsxt.PolicyPredefinedSecurityPolicy;\nimport com.pulumi.nsxt.PolicyPredefinedSecurityPolicyArgs;\nimport com.pulumi.nsxt.inputs.PolicyPredefinedSecurityPolicyContextArgs;\nimport com.pulumi.nsxt.inputs.PolicyPredefinedSecurityPolicyTagArgs;\nimport com.pulumi.nsxt.inputs.PolicyPredefinedSecurityPolicyRuleArgs;\nimport com.pulumi.nsxt.inputs.PolicyPredefinedSecurityPolicyDefaultRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var defaultL3 = NsxtFunctions.getPolicySecurityPolicy(GetPolicySecurityPolicyArgs.builder()\n            .isDefault(true)\n            .category(\"Application\")\n            .build());\n\n        var test = new PolicyPredefinedSecurityPolicy(\"test\", PolicyPredefinedSecurityPolicyArgs.builder()        \n            .context(PolicyPredefinedSecurityPolicyContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .path(defaultL3.applyValue(getPolicySecurityPolicyResult -\u003e getPolicySecurityPolicyResult.path()))\n            .tags(PolicyPredefinedSecurityPolicyTagArgs.builder()\n                .scope(\"color\")\n                .tag(\"orange\")\n                .build())\n            .rules(            \n                PolicyPredefinedSecurityPolicyRuleArgs.builder()\n                    .displayName(\"allow_icmp\")\n                    .destinationGroups(                    \n                        nsxt_policy_group.cats().path(),\n                        nsxt_policy_group.dogs().path())\n                    .action(\"ALLOW\")\n                    .services(nsxt_policy_service.icmp().path())\n                    .logged(true)\n                    .build(),\n                PolicyPredefinedSecurityPolicyRuleArgs.builder()\n                    .displayName(\"allow_udp\")\n                    .sourceGroups(nsxt_policy_group.fish().path())\n                    .sourcesExcluded(true)\n                    .scopes(nsxt_policy_group.aquarium().path())\n                    .action(\"ALLOW\")\n                    .services(nsxt_policy_service.udp().path())\n                    .logged(true)\n                    .disabled(true)\n                    .build())\n            .defaultRule(PolicyPredefinedSecurityPolicyDefaultRuleArgs.builder()\n                .action(\"DROP\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: nsxt:PolicyPredefinedSecurityPolicy\n    properties:\n      context:\n        projectId: ${demoproj.id}\n      path: ${defaultL3.path}\n      tags:\n        - scope: color\n          tag: orange\n      rules:\n        - displayName: allow_icmp\n          destinationGroups:\n            - ${nsxt_policy_group.cats.path}\n            - ${nsxt_policy_group.dogs.path}\n          action: ALLOW\n          services:\n            - ${nsxt_policy_service.icmp.path}\n          logged: true\n        - displayName: allow_udp\n          sourceGroups:\n            - ${nsxt_policy_group.fish.path}\n          sourcesExcluded: true\n          scopes:\n            - ${nsxt_policy_group.aquarium.path}\n          action: ALLOW\n          services:\n            - ${nsxt_policy_service.udp.path}\n          logged: true\n          disabled: true\n      defaultRule:\n        action: DROP\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  defaultL3:\n    fn::invoke:\n      Function: nsxt:getPolicySecurityPolicy\n      Arguments:\n        isDefault: true\n        category: Application\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyPredefinedSecurityPolicyContext:PolicyPredefinedSecurityPolicyContext",
                    "description": "The context which the object belongs to\n"
                },
                "defaultRule": {
                    "$ref": "#/types/nsxt:index/PolicyPredefinedSecurityPolicyDefaultRule:PolicyPredefinedSecurityPolicyDefaultRule",
                    "description": "A repeatable block to modify default rules for the Security Policy in a `DEFAULT` category. Each rule includes the following fields:\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Policy path for the predefined Security Policy to modify.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyPredefinedSecurityPolicyRule:PolicyPredefinedSecurityPolicyRule"
                    },
                    "description": "A repeatable block to specify rules for the Security Policy. This setting is applicable to non-Default policies only. Each rule includes the following fields:\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyPredefinedSecurityPolicyTag:PolicyPredefinedSecurityPolicyTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "required": [
                "defaultRule",
                "description",
                "path",
                "revision"
            ],
            "inputProperties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyPredefinedSecurityPolicyContext:PolicyPredefinedSecurityPolicyContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "defaultRule": {
                    "$ref": "#/types/nsxt:index/PolicyPredefinedSecurityPolicyDefaultRule:PolicyPredefinedSecurityPolicyDefaultRule",
                    "description": "A repeatable block to modify default rules for the Security Policy in a `DEFAULT` category. Each rule includes the following fields:\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Policy path for the predefined Security Policy to modify.\n",
                    "willReplaceOnChanges": true
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyPredefinedSecurityPolicyRule:PolicyPredefinedSecurityPolicyRule"
                    },
                    "description": "A repeatable block to specify rules for the Security Policy. This setting is applicable to non-Default policies only. Each rule includes the following fields:\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyPredefinedSecurityPolicyTag:PolicyPredefinedSecurityPolicyTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                }
            },
            "requiredInputs": [
                "path"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyPredefinedSecurityPolicy resources.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyPredefinedSecurityPolicyContext:PolicyPredefinedSecurityPolicyContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultRule": {
                        "$ref": "#/types/nsxt:index/PolicyPredefinedSecurityPolicyDefaultRule:PolicyPredefinedSecurityPolicyDefaultRule",
                        "description": "A repeatable block to modify default rules for the Security Policy in a `DEFAULT` category. Each rule includes the following fields:\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Policy path for the predefined Security Policy to modify.\n",
                        "willReplaceOnChanges": true
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyPredefinedSecurityPolicyRule:PolicyPredefinedSecurityPolicyRule"
                        },
                        "description": "A repeatable block to specify rules for the Security Policy. This setting is applicable to non-Default policies only. Each rule includes the following fields:\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyPredefinedSecurityPolicyTag:PolicyPredefinedSecurityPolicyTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this Rule.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyProject:PolicyProject": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "shortId": {
                    "type": "string",
                    "description": "Defaults to id if id is less than equal to 8 characters or defaults to random generated id if not set.\n"
                },
                "siteInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyProjectSiteInfo:PolicyProjectSiteInfo"
                    },
                    "description": "Information related to sites applicable for given Project. For on-prem deployment, only 1 is allowed.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyProjectTag:PolicyProjectTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "tier0GatewayPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tier 0 has to be pre-created before Project is created. The tier 0 typically provides connectivity to external world. List of sites for Project has to be subset of sites where the tier 0 spans.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision",
                "shortId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "shortId": {
                    "type": "string",
                    "description": "Defaults to id if id is less than equal to 8 characters or defaults to random generated id if not set.\n"
                },
                "siteInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyProjectSiteInfo:PolicyProjectSiteInfo"
                    },
                    "description": "Information related to sites applicable for given Project. For on-prem deployment, only 1 is allowed.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyProjectTag:PolicyProjectTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "tier0GatewayPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tier 0 has to be pre-created before Project is created. The tier 0 typically provides connectivity to external world. List of sites for Project has to be subset of sites where the tier 0 spans.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyProject resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "shortId": {
                        "type": "string",
                        "description": "Defaults to id if id is less than equal to 8 characters or defaults to random generated id if not set.\n"
                    },
                    "siteInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyProjectSiteInfo:PolicyProjectSiteInfo"
                        },
                        "description": "Information related to sites applicable for given Project. For on-prem deployment, only 1 is allowed.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyProjectTag:PolicyProjectTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    },
                    "tier0GatewayPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tier 0 has to be pre-created before Project is created. The tier 0 typically provides connectivity to external world. List of sites for Project has to be subset of sites where the tier 0 spans.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyQosProfile:PolicyQosProfile": {
            "properties": {
                "classOfService": {
                    "type": "integer",
                    "description": "Class of service.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyQosProfileContext:PolicyQosProfileContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "dscpPriority": {
                    "type": "integer",
                    "description": "DSCP Priority (0-63)\n"
                },
                "dscpTrusted": {
                    "type": "boolean",
                    "description": "Trust mode for DSCP (False by default)\n"
                },
                "egressRateShaper": {
                    "$ref": "#/types/nsxt:index/PolicyQosProfileEgressRateShaper:PolicyQosProfileEgressRateShaper",
                    "description": "Egress rate shaper configuration:\n"
                },
                "ingressBroadcastRateShaper": {
                    "$ref": "#/types/nsxt:index/PolicyQosProfileIngressBroadcastRateShaper:PolicyQosProfileIngressBroadcastRateShaper",
                    "description": "Ingress rate shaper configuration:\n"
                },
                "ingressRateShaper": {
                    "$ref": "#/types/nsxt:index/PolicyQosProfileIngressRateShaper:PolicyQosProfileIngressRateShaper",
                    "description": "Ingress rate shaper configuration:\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyQosProfileTag:PolicyQosProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this policy.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "classOfService": {
                    "type": "integer",
                    "description": "Class of service.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyQosProfileContext:PolicyQosProfileContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "dscpPriority": {
                    "type": "integer",
                    "description": "DSCP Priority (0-63)\n"
                },
                "dscpTrusted": {
                    "type": "boolean",
                    "description": "Trust mode for DSCP (False by default)\n"
                },
                "egressRateShaper": {
                    "$ref": "#/types/nsxt:index/PolicyQosProfileEgressRateShaper:PolicyQosProfileEgressRateShaper",
                    "description": "Egress rate shaper configuration:\n"
                },
                "ingressBroadcastRateShaper": {
                    "$ref": "#/types/nsxt:index/PolicyQosProfileIngressBroadcastRateShaper:PolicyQosProfileIngressBroadcastRateShaper",
                    "description": "Ingress rate shaper configuration:\n"
                },
                "ingressRateShaper": {
                    "$ref": "#/types/nsxt:index/PolicyQosProfileIngressRateShaper:PolicyQosProfileIngressRateShaper",
                    "description": "Ingress rate shaper configuration:\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyQosProfileTag:PolicyQosProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this policy.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyQosProfile resources.\n",
                "properties": {
                    "classOfService": {
                        "type": "integer",
                        "description": "Class of service.\n"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyQosProfileContext:PolicyQosProfileContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "dscpPriority": {
                        "type": "integer",
                        "description": "DSCP Priority (0-63)\n"
                    },
                    "dscpTrusted": {
                        "type": "boolean",
                        "description": "Trust mode for DSCP (False by default)\n"
                    },
                    "egressRateShaper": {
                        "$ref": "#/types/nsxt:index/PolicyQosProfileEgressRateShaper:PolicyQosProfileEgressRateShaper",
                        "description": "Egress rate shaper configuration:\n"
                    },
                    "ingressBroadcastRateShaper": {
                        "$ref": "#/types/nsxt:index/PolicyQosProfileIngressBroadcastRateShaper:PolicyQosProfileIngressBroadcastRateShaper",
                        "description": "Ingress rate shaper configuration:\n"
                    },
                    "ingressRateShaper": {
                        "$ref": "#/types/nsxt:index/PolicyQosProfileIngressRateShaper:PolicyQosProfileIngressRateShaper",
                        "description": "Ingress rate shaper configuration:\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyQosProfileTag:PolicyQosProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policySecurityPolicy:PolicySecurityPolicy": {
            "properties": {
                "category": {
                    "type": "string",
                    "description": "Category of this policy. For local manager must be one of `Ethernet`, `Emergency`, `Infrastructure`, `Environment`, `Application`. For global manager must be one of: `Infrastructure`, `Environment`, `Application`.\n"
                },
                "comments": {
                    "type": "string",
                    "description": "Comments for security policy lock/unlock.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicySecurityPolicyContext:PolicySecurityPolicyContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain to use for the resource. This domain must already exist. For VMware Cloud on AWS use `cgw`. For Global Manager, please use site id for this field. If not specified, this field is default to `default`.\n"
                },
                "locked": {
                    "type": "boolean",
                    "description": "Indicates whether a security policy should be locked. If locked by a user, no other user would be able to modify this policy.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicySecurityPolicyRule:PolicySecurityPolicyRule"
                    },
                    "description": "A repeatable block to specify rules for the Security Policy. Each rule includes the following fields:\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of policy object paths where the rule is applied.\n"
                },
                "sequenceNumber": {
                    "type": "integer",
                    "description": "It is recommended not to specify sequence number for rules, and rely on NSX to auto-assign them. If you choose to specify sequence numbers, you must make sure the numbers are consistent with order of the rules in configuration. To avoid confusion, either specify sequence numbers in all rules, or none at all.\n"
                },
                "stateful": {
                    "type": "boolean",
                    "description": "If true, state of the network connects are tracked and a stateful packet inspection is performed. Default is true.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicySecurityPolicyTag:PolicySecurityPolicyTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                },
                "tcpStrict": {
                    "type": "boolean",
                    "description": "Ensures that a 3 way TCP handshake is done before the data packets are sent. Default is false.\n"
                }
            },
            "required": [
                "category",
                "displayName",
                "nsxId",
                "path",
                "revision",
                "tcpStrict"
            ],
            "inputProperties": {
                "category": {
                    "type": "string",
                    "description": "Category of this policy. For local manager must be one of `Ethernet`, `Emergency`, `Infrastructure`, `Environment`, `Application`. For global manager must be one of: `Infrastructure`, `Environment`, `Application`.\n",
                    "willReplaceOnChanges": true
                },
                "comments": {
                    "type": "string",
                    "description": "Comments for security policy lock/unlock.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicySecurityPolicyContext:PolicySecurityPolicyContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain to use for the resource. This domain must already exist. For VMware Cloud on AWS use `cgw`. For Global Manager, please use site id for this field. If not specified, this field is default to `default`.\n",
                    "willReplaceOnChanges": true
                },
                "locked": {
                    "type": "boolean",
                    "description": "Indicates whether a security policy should be locked. If locked by a user, no other user would be able to modify this policy.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicySecurityPolicyRule:PolicySecurityPolicyRule"
                    },
                    "description": "A repeatable block to specify rules for the Security Policy. Each rule includes the following fields:\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of policy object paths where the rule is applied.\n"
                },
                "sequenceNumber": {
                    "type": "integer",
                    "description": "It is recommended not to specify sequence number for rules, and rely on NSX to auto-assign them. If you choose to specify sequence numbers, you must make sure the numbers are consistent with order of the rules in configuration. To avoid confusion, either specify sequence numbers in all rules, or none at all.\n"
                },
                "stateful": {
                    "type": "boolean",
                    "description": "If true, state of the network connects are tracked and a stateful packet inspection is performed. Default is true.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicySecurityPolicyTag:PolicySecurityPolicyTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Rule.\n"
                },
                "tcpStrict": {
                    "type": "boolean",
                    "description": "Ensures that a 3 way TCP handshake is done before the data packets are sent. Default is false.\n"
                }
            },
            "requiredInputs": [
                "category",
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicySecurityPolicy resources.\n",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "Category of this policy. For local manager must be one of `Ethernet`, `Emergency`, `Infrastructure`, `Environment`, `Application`. For global manager must be one of: `Infrastructure`, `Environment`, `Application`.\n",
                        "willReplaceOnChanges": true
                    },
                    "comments": {
                        "type": "string",
                        "description": "Comments for security policy lock/unlock.\n"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicySecurityPolicyContext:PolicySecurityPolicyContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain to use for the resource. This domain must already exist. For VMware Cloud on AWS use `cgw`. For Global Manager, please use site id for this field. If not specified, this field is default to `default`.\n",
                        "willReplaceOnChanges": true
                    },
                    "locked": {
                        "type": "boolean",
                        "description": "Indicates whether a security policy should be locked. If locked by a user, no other user would be able to modify this policy.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicySecurityPolicyRule:PolicySecurityPolicyRule"
                        },
                        "description": "A repeatable block to specify rules for the Security Policy. Each rule includes the following fields:\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of policy object paths where the rule is applied.\n"
                    },
                    "sequenceNumber": {
                        "type": "integer",
                        "description": "It is recommended not to specify sequence number for rules, and rely on NSX to auto-assign them. If you choose to specify sequence numbers, you must make sure the numbers are consistent with order of the rules in configuration. To avoid confusion, either specify sequence numbers in all rules, or none at all.\n"
                    },
                    "stateful": {
                        "type": "boolean",
                        "description": "If true, state of the network connects are tracked and a stateful packet inspection is performed. Default is true.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicySecurityPolicyTag:PolicySecurityPolicyTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this Rule.\n"
                    },
                    "tcpStrict": {
                        "type": "boolean",
                        "description": "Ensures that a 3 way TCP handshake is done before the data packets are sent. Default is false.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policySegment:PolicySegment": {
            "properties": {
                "advancedConfig": {
                    "$ref": "#/types/nsxt:index/PolicySegmentAdvancedConfig:PolicySegmentAdvancedConfig",
                    "description": "Advanced Segment configuration.\n"
                },
                "bridgeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicySegmentBridgeConfig:PolicySegmentBridgeConfig"
                    },
                    "description": "List of edge bridge configuration for the segment. This setting is not supported on Global Manager.\n"
                },
                "connectivityPath": {
                    "type": "string",
                    "description": "Policy path to the connecting Tier-0 or Tier-1.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicySegmentContext:PolicySegmentContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "dhcpConfigPath": {
                    "type": "string",
                    "description": "Policy path to DHCP server or relay configuration to use for subnets configured on this segment. This attribute is supported with NSX 3.0.0 onwards.\n"
                },
                "discoveryProfile": {
                    "$ref": "#/types/nsxt:index/PolicySegmentDiscoveryProfile:PolicySegmentDiscoveryProfile",
                    "description": "IP and MAC discovery profile specification for the segment.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "DNS domain names.\n"
                },
                "l2Extension": {
                    "$ref": "#/types/nsxt:index/PolicySegmentL2Extension:PolicySegmentL2Extension",
                    "description": "Configuration for extending Segment through L2 VPN.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "overlayId": {
                    "type": "integer",
                    "description": "Overlay connectivity ID for this Segment.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n* In the `subnet`:\n"
                },
                "qosProfile": {
                    "$ref": "#/types/nsxt:index/PolicySegmentQosProfile:PolicySegmentQosProfile",
                    "description": "QoS profile specification for the segment.\n"
                },
                "replicationMode": {
                    "type": "string",
                    "description": "Replication mode - MTEP or SOURCE\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "securityProfile": {
                    "$ref": "#/types/nsxt:index/PolicySegmentSecurityProfile:PolicySegmentSecurityProfile",
                    "description": "Security profile specification for the segment.\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicySegmentSubnet:PolicySegmentSubnet"
                    },
                    "description": "Subnet configuration block.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicySegmentTag:PolicySegmentTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this policy.\n"
                },
                "transportZonePath": {
                    "type": "string",
                    "description": "Path for vlan transport zone for the bridge.\n"
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VLAN IDs or ranges.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "overlayId",
                "path",
                "revision",
                "transportZonePath"
            ],
            "inputProperties": {
                "advancedConfig": {
                    "$ref": "#/types/nsxt:index/PolicySegmentAdvancedConfig:PolicySegmentAdvancedConfig",
                    "description": "Advanced Segment configuration.\n"
                },
                "bridgeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicySegmentBridgeConfig:PolicySegmentBridgeConfig"
                    },
                    "description": "List of edge bridge configuration for the segment. This setting is not supported on Global Manager.\n"
                },
                "connectivityPath": {
                    "type": "string",
                    "description": "Policy path to the connecting Tier-0 or Tier-1.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicySegmentContext:PolicySegmentContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "dhcpConfigPath": {
                    "type": "string",
                    "description": "Policy path to DHCP server or relay configuration to use for subnets configured on this segment. This attribute is supported with NSX 3.0.0 onwards.\n"
                },
                "discoveryProfile": {
                    "$ref": "#/types/nsxt:index/PolicySegmentDiscoveryProfile:PolicySegmentDiscoveryProfile",
                    "description": "IP and MAC discovery profile specification for the segment.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "DNS domain names.\n"
                },
                "l2Extension": {
                    "$ref": "#/types/nsxt:index/PolicySegmentL2Extension:PolicySegmentL2Extension",
                    "description": "Configuration for extending Segment through L2 VPN.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "overlayId": {
                    "type": "integer",
                    "description": "Overlay connectivity ID for this Segment.\n"
                },
                "qosProfile": {
                    "$ref": "#/types/nsxt:index/PolicySegmentQosProfile:PolicySegmentQosProfile",
                    "description": "QoS profile specification for the segment.\n"
                },
                "replicationMode": {
                    "type": "string",
                    "description": "Replication mode - MTEP or SOURCE\n"
                },
                "securityProfile": {
                    "$ref": "#/types/nsxt:index/PolicySegmentSecurityProfile:PolicySegmentSecurityProfile",
                    "description": "Security profile specification for the segment.\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicySegmentSubnet:PolicySegmentSubnet"
                    },
                    "description": "Subnet configuration block.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicySegmentTag:PolicySegmentTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this policy.\n"
                },
                "transportZonePath": {
                    "type": "string",
                    "description": "Path for vlan transport zone for the bridge.\n",
                    "willReplaceOnChanges": true
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VLAN IDs or ranges.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicySegment resources.\n",
                "properties": {
                    "advancedConfig": {
                        "$ref": "#/types/nsxt:index/PolicySegmentAdvancedConfig:PolicySegmentAdvancedConfig",
                        "description": "Advanced Segment configuration.\n"
                    },
                    "bridgeConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicySegmentBridgeConfig:PolicySegmentBridgeConfig"
                        },
                        "description": "List of edge bridge configuration for the segment. This setting is not supported on Global Manager.\n"
                    },
                    "connectivityPath": {
                        "type": "string",
                        "description": "Policy path to the connecting Tier-0 or Tier-1.\n"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicySegmentContext:PolicySegmentContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "dhcpConfigPath": {
                        "type": "string",
                        "description": "Policy path to DHCP server or relay configuration to use for subnets configured on this segment. This attribute is supported with NSX 3.0.0 onwards.\n"
                    },
                    "discoveryProfile": {
                        "$ref": "#/types/nsxt:index/PolicySegmentDiscoveryProfile:PolicySegmentDiscoveryProfile",
                        "description": "IP and MAC discovery profile specification for the segment.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "domainName": {
                        "type": "string",
                        "description": "DNS domain names.\n"
                    },
                    "l2Extension": {
                        "$ref": "#/types/nsxt:index/PolicySegmentL2Extension:PolicySegmentL2Extension",
                        "description": "Configuration for extending Segment through L2 VPN.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "overlayId": {
                        "type": "integer",
                        "description": "Overlay connectivity ID for this Segment.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n* In the `subnet`:\n"
                    },
                    "qosProfile": {
                        "$ref": "#/types/nsxt:index/PolicySegmentQosProfile:PolicySegmentQosProfile",
                        "description": "QoS profile specification for the segment.\n"
                    },
                    "replicationMode": {
                        "type": "string",
                        "description": "Replication mode - MTEP or SOURCE\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "securityProfile": {
                        "$ref": "#/types/nsxt:index/PolicySegmentSecurityProfile:PolicySegmentSecurityProfile",
                        "description": "Security profile specification for the segment.\n"
                    },
                    "subnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicySegmentSubnet:PolicySegmentSubnet"
                        },
                        "description": "Subnet configuration block.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicySegmentTag:PolicySegmentTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this policy.\n"
                    },
                    "transportZonePath": {
                        "type": "string",
                        "description": "Path for vlan transport zone for the bridge.\n",
                        "willReplaceOnChanges": true
                    },
                    "vlanIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of VLAN IDs or ranges.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policySegmentSecurityProfile:PolicySegmentSecurityProfile": {
            "properties": {
                "bpduFilterAllows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allowed MAC addresses to be excluded from BPDU filtering. List of allowed MACs - `01:80:c2:00:00:00`, `01:80:c2:00:00:01`, `01:80:c2:00:00:02`, `01:80:c2:00:00:03`, `01:80:c2:00:00:04`, `01:80:c2:00:00:05`, `01:80:c2:00:00:06`, `01:80:c2:00:00:07`, `01:80:c2:00:00:08`, `01:80:c2:00:00:09`, `01:80:c2:00:00:0a`, `01:80:c2:00:00:0b`, `01:80:c2:00:00:0c`, `01:80:c2:00:00:0d`, `01:80:c2:00:00:0e`, `01:80:c2:00:00:0f`, `00:e0:2b:00:00:00`, `00:e0:2b:00:00:04`, `00:e0:2b:00:00:06`, `01:00:0c:00:00:00`, `01:00:0c:cc:cc:cc`, `01:00:0c:cc:cc:cd`, `01:00:0c:cd:cd:cd`, `01:00:0c:cc:cc:c0`, `01:00:0c:cc:cc:c1`, `01:00:0c:cc:cc:c2`, `01:00:0c:cc:cc:c3`, `01:00:0c:cc:cc:c4`, `01:00:0c:cc:cc:c5`, `01:00:0c:cc:cc:c6`, `01:00:0c:cc:cc:c7`.\n"
                },
                "bpduFilterEnable": {
                    "type": "boolean",
                    "description": "Indicates whether BPDU filter is enabled. Default is `True`.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicySegmentSecurityProfileContext:PolicySegmentSecurityProfileContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "dhcpClientBlockEnabled": {
                    "type": "boolean",
                    "description": "Filters DHCP server and/or client traffic. Default is `False`.\n"
                },
                "dhcpClientBlockV6Enabled": {
                    "type": "boolean",
                    "description": "Filters DHCP server and/or client IPv6 traffic. Default is `False`.\n"
                },
                "dhcpServerBlockEnabled": {
                    "type": "boolean",
                    "description": "Filters DHCP server and/or client traffic. Default is `True`.\n"
                },
                "dhcpServerBlockV6Enabled": {
                    "type": "boolean",
                    "description": "Filters DHCP server and/or client IPv6 traffic. Default is `True`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "nonIpTrafficBlockEnabled": {
                    "type": "boolean",
                    "description": "A flag to block all traffic except IP/(G)ARP/BPDU. Default is `False`.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "raGuardEnabled": {
                    "type": "boolean",
                    "description": "Enable or disable Router Advertisement Guard. Default is `False`\n"
                },
                "rateLimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicySegmentSecurityProfileRateLimit:PolicySegmentSecurityProfileRateLimit"
                    },
                    "description": "Rate limits.\n"
                },
                "rateLimitsEnabled": {
                    "type": "boolean",
                    "description": "Enable or disable Rate Limits. Default is `False`.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicySegmentSecurityProfileTag:PolicySegmentSecurityProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "rateLimits",
                "revision"
            ],
            "inputProperties": {
                "bpduFilterAllows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allowed MAC addresses to be excluded from BPDU filtering. List of allowed MACs - `01:80:c2:00:00:00`, `01:80:c2:00:00:01`, `01:80:c2:00:00:02`, `01:80:c2:00:00:03`, `01:80:c2:00:00:04`, `01:80:c2:00:00:05`, `01:80:c2:00:00:06`, `01:80:c2:00:00:07`, `01:80:c2:00:00:08`, `01:80:c2:00:00:09`, `01:80:c2:00:00:0a`, `01:80:c2:00:00:0b`, `01:80:c2:00:00:0c`, `01:80:c2:00:00:0d`, `01:80:c2:00:00:0e`, `01:80:c2:00:00:0f`, `00:e0:2b:00:00:00`, `00:e0:2b:00:00:04`, `00:e0:2b:00:00:06`, `01:00:0c:00:00:00`, `01:00:0c:cc:cc:cc`, `01:00:0c:cc:cc:cd`, `01:00:0c:cd:cd:cd`, `01:00:0c:cc:cc:c0`, `01:00:0c:cc:cc:c1`, `01:00:0c:cc:cc:c2`, `01:00:0c:cc:cc:c3`, `01:00:0c:cc:cc:c4`, `01:00:0c:cc:cc:c5`, `01:00:0c:cc:cc:c6`, `01:00:0c:cc:cc:c7`.\n"
                },
                "bpduFilterEnable": {
                    "type": "boolean",
                    "description": "Indicates whether BPDU filter is enabled. Default is `True`.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicySegmentSecurityProfileContext:PolicySegmentSecurityProfileContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "dhcpClientBlockEnabled": {
                    "type": "boolean",
                    "description": "Filters DHCP server and/or client traffic. Default is `False`.\n"
                },
                "dhcpClientBlockV6Enabled": {
                    "type": "boolean",
                    "description": "Filters DHCP server and/or client IPv6 traffic. Default is `False`.\n"
                },
                "dhcpServerBlockEnabled": {
                    "type": "boolean",
                    "description": "Filters DHCP server and/or client traffic. Default is `True`.\n"
                },
                "dhcpServerBlockV6Enabled": {
                    "type": "boolean",
                    "description": "Filters DHCP server and/or client IPv6 traffic. Default is `True`.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "nonIpTrafficBlockEnabled": {
                    "type": "boolean",
                    "description": "A flag to block all traffic except IP/(G)ARP/BPDU. Default is `False`.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "raGuardEnabled": {
                    "type": "boolean",
                    "description": "Enable or disable Router Advertisement Guard. Default is `False`\n"
                },
                "rateLimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicySegmentSecurityProfileRateLimit:PolicySegmentSecurityProfileRateLimit"
                    },
                    "description": "Rate limits.\n"
                },
                "rateLimitsEnabled": {
                    "type": "boolean",
                    "description": "Enable or disable Rate Limits. Default is `False`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicySegmentSecurityProfileTag:PolicySegmentSecurityProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicySegmentSecurityProfile resources.\n",
                "properties": {
                    "bpduFilterAllows": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of allowed MAC addresses to be excluded from BPDU filtering. List of allowed MACs - `01:80:c2:00:00:00`, `01:80:c2:00:00:01`, `01:80:c2:00:00:02`, `01:80:c2:00:00:03`, `01:80:c2:00:00:04`, `01:80:c2:00:00:05`, `01:80:c2:00:00:06`, `01:80:c2:00:00:07`, `01:80:c2:00:00:08`, `01:80:c2:00:00:09`, `01:80:c2:00:00:0a`, `01:80:c2:00:00:0b`, `01:80:c2:00:00:0c`, `01:80:c2:00:00:0d`, `01:80:c2:00:00:0e`, `01:80:c2:00:00:0f`, `00:e0:2b:00:00:00`, `00:e0:2b:00:00:04`, `00:e0:2b:00:00:06`, `01:00:0c:00:00:00`, `01:00:0c:cc:cc:cc`, `01:00:0c:cc:cc:cd`, `01:00:0c:cd:cd:cd`, `01:00:0c:cc:cc:c0`, `01:00:0c:cc:cc:c1`, `01:00:0c:cc:cc:c2`, `01:00:0c:cc:cc:c3`, `01:00:0c:cc:cc:c4`, `01:00:0c:cc:cc:c5`, `01:00:0c:cc:cc:c6`, `01:00:0c:cc:cc:c7`.\n"
                    },
                    "bpduFilterEnable": {
                        "type": "boolean",
                        "description": "Indicates whether BPDU filter is enabled. Default is `True`.\n"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicySegmentSecurityProfileContext:PolicySegmentSecurityProfileContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "dhcpClientBlockEnabled": {
                        "type": "boolean",
                        "description": "Filters DHCP server and/or client traffic. Default is `False`.\n"
                    },
                    "dhcpClientBlockV6Enabled": {
                        "type": "boolean",
                        "description": "Filters DHCP server and/or client IPv6 traffic. Default is `False`.\n"
                    },
                    "dhcpServerBlockEnabled": {
                        "type": "boolean",
                        "description": "Filters DHCP server and/or client traffic. Default is `True`.\n"
                    },
                    "dhcpServerBlockV6Enabled": {
                        "type": "boolean",
                        "description": "Filters DHCP server and/or client IPv6 traffic. Default is `True`.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "nonIpTrafficBlockEnabled": {
                        "type": "boolean",
                        "description": "A flag to block all traffic except IP/(G)ARP/BPDU. Default is `False`.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "raGuardEnabled": {
                        "type": "boolean",
                        "description": "Enable or disable Router Advertisement Guard. Default is `False`\n"
                    },
                    "rateLimits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicySegmentSecurityProfileRateLimit:PolicySegmentSecurityProfileRateLimit"
                        },
                        "description": "Rate limits.\n"
                    },
                    "rateLimitsEnabled": {
                        "type": "boolean",
                        "description": "Enable or disable Rate Limits. Default is `False`.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicySegmentSecurityProfileTag:PolicySegmentSecurityProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyService:PolicyService": {
            "properties": {
                "algorithmEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyServiceAlgorithmEntry:PolicyServiceAlgorithmEntry"
                    },
                    "description": "Set of Algorithm type service entries. Each with the following attributes:\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyServiceContext:PolicyServiceContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the service entry.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the service entry.\n"
                },
                "etherTypeEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyServiceEtherTypeEntry:PolicyServiceEtherTypeEntry"
                    },
                    "description": "Set of Ether type service entries. Each with the following attributes:\n"
                },
                "icmpEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyServiceIcmpEntry:PolicyServiceIcmpEntry"
                    },
                    "description": "Set of ICMP type service entries. Each with the following attributes:\n"
                },
                "igmpEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyServiceIgmpEntry:PolicyServiceIgmpEntry"
                    },
                    "description": "Set of IGMP type service entries. Each with the following attributes:\n"
                },
                "ipProtocolEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyServiceIpProtocolEntry:PolicyServiceIpProtocolEntry"
                    },
                    "description": "Set of IP Protocol type service entries. Each with the following attributes:\n"
                },
                "l4PortSetEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyServiceL4PortSetEntry:PolicyServiceL4PortSetEntry"
                    },
                    "description": "Set of L4 ports set service entries. Each with the following attributes:\n"
                },
                "nestedServiceEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyServiceNestedServiceEntry:PolicyServiceNestedServiceEntry"
                    },
                    "description": "Feature introduced since at least NSX-T 3.1, set of Nested service entries. Each with the following attributes:\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyServiceTag:PolicyServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "algorithmEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyServiceAlgorithmEntry:PolicyServiceAlgorithmEntry"
                    },
                    "description": "Set of Algorithm type service entries. Each with the following attributes:\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyServiceContext:PolicyServiceContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the service entry.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the service entry.\n"
                },
                "etherTypeEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyServiceEtherTypeEntry:PolicyServiceEtherTypeEntry"
                    },
                    "description": "Set of Ether type service entries. Each with the following attributes:\n"
                },
                "icmpEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyServiceIcmpEntry:PolicyServiceIcmpEntry"
                    },
                    "description": "Set of ICMP type service entries. Each with the following attributes:\n"
                },
                "igmpEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyServiceIgmpEntry:PolicyServiceIgmpEntry"
                    },
                    "description": "Set of IGMP type service entries. Each with the following attributes:\n"
                },
                "ipProtocolEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyServiceIpProtocolEntry:PolicyServiceIpProtocolEntry"
                    },
                    "description": "Set of IP Protocol type service entries. Each with the following attributes:\n"
                },
                "l4PortSetEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyServiceL4PortSetEntry:PolicyServiceL4PortSetEntry"
                    },
                    "description": "Set of L4 ports set service entries. Each with the following attributes:\n"
                },
                "nestedServiceEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyServiceNestedServiceEntry:PolicyServiceNestedServiceEntry"
                    },
                    "description": "Feature introduced since at least NSX-T 3.1, set of Nested service entries. Each with the following attributes:\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyServiceTag:PolicyServiceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyService resources.\n",
                "properties": {
                    "algorithmEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyServiceAlgorithmEntry:PolicyServiceAlgorithmEntry"
                        },
                        "description": "Set of Algorithm type service entries. Each with the following attributes:\n"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyServiceContext:PolicyServiceContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the service entry.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the service entry.\n"
                    },
                    "etherTypeEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyServiceEtherTypeEntry:PolicyServiceEtherTypeEntry"
                        },
                        "description": "Set of Ether type service entries. Each with the following attributes:\n"
                    },
                    "icmpEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyServiceIcmpEntry:PolicyServiceIcmpEntry"
                        },
                        "description": "Set of ICMP type service entries. Each with the following attributes:\n"
                    },
                    "igmpEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyServiceIgmpEntry:PolicyServiceIgmpEntry"
                        },
                        "description": "Set of IGMP type service entries. Each with the following attributes:\n"
                    },
                    "ipProtocolEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyServiceIpProtocolEntry:PolicyServiceIpProtocolEntry"
                        },
                        "description": "Set of IP Protocol type service entries. Each with the following attributes:\n"
                    },
                    "l4PortSetEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyServiceL4PortSetEntry:PolicyServiceL4PortSetEntry"
                        },
                        "description": "Set of L4 ports set service entries. Each with the following attributes:\n"
                    },
                    "nestedServiceEntries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyServiceNestedServiceEntry:PolicyServiceNestedServiceEntry"
                        },
                        "description": "Feature introduced since at least NSX-T 3.1, set of Nested service entries. Each with the following attributes:\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyServiceTag:PolicyServiceTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policySpoofGuardProfile:PolicySpoofGuardProfile": {
            "properties": {
                "addressBindingAllowlist": {
                    "type": "boolean",
                    "description": "If true, enable the SpoofGuard, which only allows IPs listed in address bindings.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicySpoofGuardProfileContext:PolicySpoofGuardProfileContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicySpoofGuardProfileTag:PolicySpoofGuardProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "addressBindingAllowlist": {
                    "type": "boolean",
                    "description": "If true, enable the SpoofGuard, which only allows IPs listed in address bindings.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicySpoofGuardProfileContext:PolicySpoofGuardProfileContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicySpoofGuardProfileTag:PolicySpoofGuardProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicySpoofGuardProfile resources.\n",
                "properties": {
                    "addressBindingAllowlist": {
                        "type": "boolean",
                        "description": "If true, enable the SpoofGuard, which only allows IPs listed in address bindings.\n"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicySpoofGuardProfileContext:PolicySpoofGuardProfileContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicySpoofGuardProfileTag:PolicySpoofGuardProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyStaticRoute:PolicyStaticRoute": {
            "properties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyStaticRouteContext:PolicyStaticRouteContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "The NSX Policy path to the Tier0 or Tier1 Gateway for this Static Route.\n"
                },
                "network": {
                    "type": "string",
                    "description": "The network address in CIDR format for the route.\n"
                },
                "nextHops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyStaticRouteNextHop:PolicyStaticRouteNextHop"
                    },
                    "description": "One or more next hops for the static route.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyStaticRouteTag:PolicyStaticRouteTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Tier-0 gateway.\n"
                }
            },
            "required": [
                "displayName",
                "gatewayPath",
                "network",
                "nextHops",
                "nsxId",
                "path",
                "revision"
            ],
            "inputProperties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyStaticRouteContext:PolicyStaticRouteContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "The NSX Policy path to the Tier0 or Tier1 Gateway for this Static Route.\n",
                    "willReplaceOnChanges": true
                },
                "network": {
                    "type": "string",
                    "description": "The network address in CIDR format for the route.\n"
                },
                "nextHops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyStaticRouteNextHop:PolicyStaticRouteNextHop"
                    },
                    "description": "One or more next hops for the static route.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyStaticRouteTag:PolicyStaticRouteTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Tier-0 gateway.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "gatewayPath",
                "network",
                "nextHops"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyStaticRoute resources.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyStaticRouteContext:PolicyStaticRouteContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "gatewayPath": {
                        "type": "string",
                        "description": "The NSX Policy path to the Tier0 or Tier1 Gateway for this Static Route.\n",
                        "willReplaceOnChanges": true
                    },
                    "network": {
                        "type": "string",
                        "description": "The network address in CIDR format for the route.\n"
                    },
                    "nextHops": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyStaticRouteNextHop:PolicyStaticRouteNextHop"
                        },
                        "description": "One or more next hops for the static route.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyStaticRouteTag:PolicyStaticRouteTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this Tier-0 gateway.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyStaticRouteBfdPeer:PolicyStaticRouteBfdPeer": {
            "properties": {
                "bfdProfilePath": {
                    "type": "string",
                    "description": "Policy path for BFD Profile\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for this resource\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name for this resource\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Flag to enable/disable this peer\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Policy path for Tier0 gateway\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "NSX ID for this resource\n"
                },
                "path": {
                    "type": "string",
                    "description": "Policy path for this resource\n"
                },
                "peerAddress": {
                    "type": "string",
                    "description": "IPv4 Address of the peer\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's\nchanges, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET\noperation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected\n"
                },
                "sourceAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of Tier0 external interface IP addresses\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyStaticRouteBfdPeerTag:PolicyStaticRouteBfdPeerTag"
                    },
                    "description": "Set of opaque identifiers meaningful to the user\n"
                }
            },
            "required": [
                "bfdProfilePath",
                "displayName",
                "gatewayPath",
                "nsxId",
                "path",
                "peerAddress",
                "revision"
            ],
            "inputProperties": {
                "bfdProfilePath": {
                    "type": "string",
                    "description": "Policy path for BFD Profile\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description for this resource\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name for this resource\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Flag to enable/disable this peer\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Policy path for Tier0 gateway\n",
                    "willReplaceOnChanges": true
                },
                "nsxId": {
                    "type": "string",
                    "description": "NSX ID for this resource\n",
                    "willReplaceOnChanges": true
                },
                "peerAddress": {
                    "type": "string",
                    "description": "IPv4 Address of the peer\n"
                },
                "sourceAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of Tier0 external interface IP addresses\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyStaticRouteBfdPeerTag:PolicyStaticRouteBfdPeerTag"
                    },
                    "description": "Set of opaque identifiers meaningful to the user\n"
                }
            },
            "requiredInputs": [
                "bfdProfilePath",
                "displayName",
                "gatewayPath",
                "peerAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyStaticRouteBfdPeer resources.\n",
                "properties": {
                    "bfdProfilePath": {
                        "type": "string",
                        "description": "Policy path for BFD Profile\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description for this resource\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name for this resource\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Flag to enable/disable this peer\n"
                    },
                    "gatewayPath": {
                        "type": "string",
                        "description": "Policy path for Tier0 gateway\n",
                        "willReplaceOnChanges": true
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "NSX ID for this resource\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "Policy path for this resource\n"
                    },
                    "peerAddress": {
                        "type": "string",
                        "description": "IPv4 Address of the peer\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's\nchanges, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET\noperation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected\n"
                    },
                    "sourceAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of Tier0 external interface IP addresses\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyStaticRouteBfdPeerTag:PolicyStaticRouteBfdPeerTag"
                        },
                        "description": "Set of opaque identifiers meaningful to the user\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyTier0Gateway:PolicyTier0Gateway": {
            "properties": {
                "bgpConfig": {
                    "$ref": "#/types/nsxt:index/PolicyTier0GatewayBgpConfig:PolicyTier0GatewayBgpConfig",
                    "description": "The BGP configuration for the Tier-0 gateway. When enabled a valid `edge_cluster_path` must be set on the Tier-0 gateway. This clause is not applicable for Global Manager - use `nsxt.PolicyBgpConfig` resource instead.\n"
                },
                "defaultRuleLogging": {
                    "type": "boolean",
                    "description": "Boolean flag indicating if the default rule logging will be enabled or not. The default value is false.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "dhcpConfigPath": {
                    "type": "string",
                    "description": "Policy path to DHCP server or relay configuration to use for this gateway.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name for the locale service.\n"
                },
                "edgeClusterPath": {
                    "type": "string",
                    "description": "The path of the edge cluster where the Tier-0 is placed.\n"
                },
                "enableFirewall": {
                    "type": "boolean",
                    "description": "Boolean flag indicating if the edge firewall will be enabled or not. The default value is true.\n"
                },
                "failoverMode": {
                    "type": "string",
                    "description": "This failover mode determines, whether the preferred service router instance for given logical router will preempt the peer. Accepted values are PREEMPTIVE/NON_PREEMPTIVE.\n"
                },
                "forceWhitelisting": {
                    "type": "boolean",
                    "description": "Boolean flag indicating if white-listing will be forced or not. The default value is false. This argument is deprecated and will be removed. Please use `nsxt.PolicyPredefinedGatewayPolicy` resource to control default action.\n",
                    "deprecationMessage": "Use nsxt_policy_predefined_gateway_policy resource to control default action"
                },
                "haMode": {
                    "type": "string",
                    "description": "High-availability Mode for Tier-0. Valid values are `ACTIVE_ACTIVE` and `ACTIVE_STANDBY`.\n"
                },
                "internalTransitSubnets": {
                    "type": "string",
                    "description": "Internal transit subnets in CIDR format. At most 1 CIDR.\n"
                },
                "intersiteConfig": {
                    "$ref": "#/types/nsxt:index/PolicyTier0GatewayIntersiteConfig:PolicyTier0GatewayIntersiteConfig",
                    "description": "This clause is relevant for Global Manager only.\n"
                },
                "ipv6DadProfilePath": {
                    "type": "string",
                    "description": "Policy path to IPv6 DAD profile.\n"
                },
                "ipv6NdraProfilePath": {
                    "type": "string",
                    "description": "Policy path to IPv6 NDRA profile.\n"
                },
                "localeServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier0GatewayLocaleService:PolicyTier0GatewayLocaleService"
                    },
                    "description": "This is required on NSX Global Manager. Multiple locale services can be specified for multiple locations.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "rdAdminAddress": {
                    "type": "string",
                    "description": "Route distinguisher administrator address. If using EVPN service, then this attribute should be defined if auto generation of route distinguisher on VRF configuration is needed.\n"
                },
                "redistributionConfig": {
                    "$ref": "#/types/nsxt:index/PolicyTier0GatewayRedistributionConfig:PolicyTier0GatewayRedistributionConfig",
                    "description": "Route redistribution properties. This setting is for local manager only and supported with NSXt 3.0.0 onwards. This setting is deprecated, please use `nsxt.PolicyGatewayRedistributionConfig` resource instead.\n",
                    "deprecationMessage": "Use nsxt_policy_gateway_redistribution_config resource instead"
                },
                "redistributionSet": {
                    "type": "boolean",
                    "description": "Internal flag to indicate whether legacy redistribution config is used\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier0GatewayTag:PolicyTier0GatewayTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Tier-0 gateway's BGP configuration.\n"
                },
                "transitSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Transit subnets in CIDR format.\n"
                },
                "vrfConfig": {
                    "$ref": "#/types/nsxt:index/PolicyTier0GatewayVrfConfig:PolicyTier0GatewayVrfConfig",
                    "description": "VRF config for VRF Tier0. This clause is supported with NSX 3.0.0 onwards.\n"
                }
            },
            "required": [
                "bgpConfig",
                "displayName",
                "edgeClusterPath",
                "internalTransitSubnets",
                "intersiteConfig",
                "ipv6DadProfilePath",
                "ipv6NdraProfilePath",
                "nsxId",
                "path",
                "redistributionConfig",
                "redistributionSet",
                "revision",
                "transitSubnets"
            ],
            "inputProperties": {
                "bgpConfig": {
                    "$ref": "#/types/nsxt:index/PolicyTier0GatewayBgpConfig:PolicyTier0GatewayBgpConfig",
                    "description": "The BGP configuration for the Tier-0 gateway. When enabled a valid `edge_cluster_path` must be set on the Tier-0 gateway. This clause is not applicable for Global Manager - use `nsxt.PolicyBgpConfig` resource instead.\n"
                },
                "defaultRuleLogging": {
                    "type": "boolean",
                    "description": "Boolean flag indicating if the default rule logging will be enabled or not. The default value is false.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "dhcpConfigPath": {
                    "type": "string",
                    "description": "Policy path to DHCP server or relay configuration to use for this gateway.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name for the locale service.\n"
                },
                "edgeClusterPath": {
                    "type": "string",
                    "description": "The path of the edge cluster where the Tier-0 is placed.\n"
                },
                "enableFirewall": {
                    "type": "boolean",
                    "description": "Boolean flag indicating if the edge firewall will be enabled or not. The default value is true.\n"
                },
                "failoverMode": {
                    "type": "string",
                    "description": "This failover mode determines, whether the preferred service router instance for given logical router will preempt the peer. Accepted values are PREEMPTIVE/NON_PREEMPTIVE.\n"
                },
                "forceWhitelisting": {
                    "type": "boolean",
                    "description": "Boolean flag indicating if white-listing will be forced or not. The default value is false. This argument is deprecated and will be removed. Please use `nsxt.PolicyPredefinedGatewayPolicy` resource to control default action.\n",
                    "deprecationMessage": "Use nsxt_policy_predefined_gateway_policy resource to control default action"
                },
                "haMode": {
                    "type": "string",
                    "description": "High-availability Mode for Tier-0. Valid values are `ACTIVE_ACTIVE` and `ACTIVE_STANDBY`.\n",
                    "willReplaceOnChanges": true
                },
                "internalTransitSubnets": {
                    "type": "string",
                    "description": "Internal transit subnets in CIDR format. At most 1 CIDR.\n",
                    "willReplaceOnChanges": true
                },
                "intersiteConfig": {
                    "$ref": "#/types/nsxt:index/PolicyTier0GatewayIntersiteConfig:PolicyTier0GatewayIntersiteConfig",
                    "description": "This clause is relevant for Global Manager only.\n"
                },
                "ipv6DadProfilePath": {
                    "type": "string",
                    "description": "Policy path to IPv6 DAD profile.\n"
                },
                "ipv6NdraProfilePath": {
                    "type": "string",
                    "description": "Policy path to IPv6 NDRA profile.\n"
                },
                "localeServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier0GatewayLocaleService:PolicyTier0GatewayLocaleService"
                    },
                    "description": "This is required on NSX Global Manager. Multiple locale services can be specified for multiple locations.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                    "willReplaceOnChanges": true
                },
                "rdAdminAddress": {
                    "type": "string",
                    "description": "Route distinguisher administrator address. If using EVPN service, then this attribute should be defined if auto generation of route distinguisher on VRF configuration is needed.\n"
                },
                "redistributionConfig": {
                    "$ref": "#/types/nsxt:index/PolicyTier0GatewayRedistributionConfig:PolicyTier0GatewayRedistributionConfig",
                    "description": "Route redistribution properties. This setting is for local manager only and supported with NSXt 3.0.0 onwards. This setting is deprecated, please use `nsxt.PolicyGatewayRedistributionConfig` resource instead.\n",
                    "deprecationMessage": "Use nsxt_policy_gateway_redistribution_config resource instead"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier0GatewayTag:PolicyTier0GatewayTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Tier-0 gateway's BGP configuration.\n"
                },
                "transitSubnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Transit subnets in CIDR format.\n",
                    "willReplaceOnChanges": true
                },
                "vrfConfig": {
                    "$ref": "#/types/nsxt:index/PolicyTier0GatewayVrfConfig:PolicyTier0GatewayVrfConfig",
                    "description": "VRF config for VRF Tier0. This clause is supported with NSX 3.0.0 onwards.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyTier0Gateway resources.\n",
                "properties": {
                    "bgpConfig": {
                        "$ref": "#/types/nsxt:index/PolicyTier0GatewayBgpConfig:PolicyTier0GatewayBgpConfig",
                        "description": "The BGP configuration for the Tier-0 gateway. When enabled a valid `edge_cluster_path` must be set on the Tier-0 gateway. This clause is not applicable for Global Manager - use `nsxt.PolicyBgpConfig` resource instead.\n"
                    },
                    "defaultRuleLogging": {
                        "type": "boolean",
                        "description": "Boolean flag indicating if the default rule logging will be enabled or not. The default value is false.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "dhcpConfigPath": {
                        "type": "string",
                        "description": "Policy path to DHCP server or relay configuration to use for this gateway.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name for the locale service.\n"
                    },
                    "edgeClusterPath": {
                        "type": "string",
                        "description": "The path of the edge cluster where the Tier-0 is placed.\n"
                    },
                    "enableFirewall": {
                        "type": "boolean",
                        "description": "Boolean flag indicating if the edge firewall will be enabled or not. The default value is true.\n"
                    },
                    "failoverMode": {
                        "type": "string",
                        "description": "This failover mode determines, whether the preferred service router instance for given logical router will preempt the peer. Accepted values are PREEMPTIVE/NON_PREEMPTIVE.\n"
                    },
                    "forceWhitelisting": {
                        "type": "boolean",
                        "description": "Boolean flag indicating if white-listing will be forced or not. The default value is false. This argument is deprecated and will be removed. Please use `nsxt.PolicyPredefinedGatewayPolicy` resource to control default action.\n",
                        "deprecationMessage": "Use nsxt_policy_predefined_gateway_policy resource to control default action"
                    },
                    "haMode": {
                        "type": "string",
                        "description": "High-availability Mode for Tier-0. Valid values are `ACTIVE_ACTIVE` and `ACTIVE_STANDBY`.\n",
                        "willReplaceOnChanges": true
                    },
                    "internalTransitSubnets": {
                        "type": "string",
                        "description": "Internal transit subnets in CIDR format. At most 1 CIDR.\n",
                        "willReplaceOnChanges": true
                    },
                    "intersiteConfig": {
                        "$ref": "#/types/nsxt:index/PolicyTier0GatewayIntersiteConfig:PolicyTier0GatewayIntersiteConfig",
                        "description": "This clause is relevant for Global Manager only.\n"
                    },
                    "ipv6DadProfilePath": {
                        "type": "string",
                        "description": "Policy path to IPv6 DAD profile.\n"
                    },
                    "ipv6NdraProfilePath": {
                        "type": "string",
                        "description": "Policy path to IPv6 NDRA profile.\n"
                    },
                    "localeServices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyTier0GatewayLocaleService:PolicyTier0GatewayLocaleService"
                        },
                        "description": "This is required on NSX Global Manager. Multiple locale services can be specified for multiple locations.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "rdAdminAddress": {
                        "type": "string",
                        "description": "Route distinguisher administrator address. If using EVPN service, then this attribute should be defined if auto generation of route distinguisher on VRF configuration is needed.\n"
                    },
                    "redistributionConfig": {
                        "$ref": "#/types/nsxt:index/PolicyTier0GatewayRedistributionConfig:PolicyTier0GatewayRedistributionConfig",
                        "description": "Route redistribution properties. This setting is for local manager only and supported with NSXt 3.0.0 onwards. This setting is deprecated, please use `nsxt.PolicyGatewayRedistributionConfig` resource instead.\n",
                        "deprecationMessage": "Use nsxt_policy_gateway_redistribution_config resource instead"
                    },
                    "redistributionSet": {
                        "type": "boolean",
                        "description": "Internal flag to indicate whether legacy redistribution config is used\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyTier0GatewayTag:PolicyTier0GatewayTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this Tier-0 gateway's BGP configuration.\n"
                    },
                    "transitSubnets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Transit subnets in CIDR format.\n",
                        "willReplaceOnChanges": true
                    },
                    "vrfConfig": {
                        "$ref": "#/types/nsxt:index/PolicyTier0GatewayVrfConfig:PolicyTier0GatewayVrfConfig",
                        "description": "VRF config for VRF Tier0. This clause is supported with NSX 3.0.0 onwards.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyTier0GatewayHaVipConfig:PolicyTier0GatewayHaVipConfig": {
            "properties": {
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier0GatewayHaVipConfigConfig:PolicyTier0GatewayHaVipConfigConfig"
                    },
                    "description": "List of HA vip configurations (all belonging to the same Tier0 locale-service) containing:\n"
                },
                "localeServiceId": {
                    "type": "string",
                    "description": "ID of the Tier-0 Gateway locale service.\n"
                },
                "tier0Id": {
                    "type": "string",
                    "description": "ID of the Tier-0 Gateway\n"
                }
            },
            "required": [
                "configs",
                "localeServiceId",
                "tier0Id"
            ],
            "inputProperties": {
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier0GatewayHaVipConfigConfig:PolicyTier0GatewayHaVipConfigConfig"
                    },
                    "description": "List of HA vip configurations (all belonging to the same Tier0 locale-service) containing:\n"
                }
            },
            "requiredInputs": [
                "configs"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyTier0GatewayHaVipConfig resources.\n",
                "properties": {
                    "configs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyTier0GatewayHaVipConfigConfig:PolicyTier0GatewayHaVipConfigConfig"
                        },
                        "description": "List of HA vip configurations (all belonging to the same Tier0 locale-service) containing:\n"
                    },
                    "localeServiceId": {
                        "type": "string",
                        "description": "ID of the Tier-0 Gateway locale service.\n"
                    },
                    "tier0Id": {
                        "type": "string",
                        "description": "ID of the Tier-0 Gateway\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyTier0GatewayInterface:PolicyTier0GatewayInterface": {
            "properties": {
                "accessVlanId": {
                    "type": "integer",
                    "description": "Access VLAN ID, relevant only for VRF interfaces. This attribute is supported with NSX 3.0.0 onwards.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "edgeNodePath": {
                    "type": "string",
                    "description": "Path of edge node for this interface, relevant for interfaces of type `EXTERNAL`.\n"
                },
                "enablePim": {
                    "type": "boolean",
                    "description": "Flag to enable Protocol Independent Multicast, relevant only for interfaces of type `EXTERNAL`. This attribute will always be `false` for other interface types. This attribute is supported with NSX 3.0.0 onwards, and only for local managers.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Policy path for the Tier-0 Gateway.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of Ip Addresses picked from each subnet in `subnets` field. This attribute can serve as `source_addresses` field of `nsxt.PolicyBgpNeighbor` resource.\n"
                },
                "ipv6NdraProfilePath": {
                    "type": "string",
                    "description": "IPv6 NDRA profile to be associated with this interface.\n"
                },
                "localeServiceId": {
                    "type": "string",
                    "description": "Id of associated Gateway Locale Service on NSX\n"
                },
                "mtu": {
                    "type": "integer",
                    "description": "Maximum Transmission Unit for this interface.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n"
                },
                "ospf": {
                    "$ref": "#/types/nsxt:index/PolicyTier0GatewayInterfaceOspf:PolicyTier0GatewayInterfaceOspf",
                    "description": "OSPF configuration block - supported for `EXTERNAL` interface only. Not supported on Global Manager.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "segmentPath": {
                    "type": "string",
                    "description": "Policy path for segment to be connected with this Tier1 Gateway. This argemnt is required for interfaces of type `SERVICE` and `EXTERNAL`.\n"
                },
                "sitePath": {
                    "type": "string",
                    "description": "Path of the site the Tier0 edge cluster belongs to. This configuration is required for global manager only. `path` field of the existing `nsxt.getPolicySite` can be used here.\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of Ip Addresses/Prefixes in CIDR format, to be associated with this interface.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier0GatewayInterfaceTag:PolicyTier0GatewayInterfaceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of this interface, one of `SERVICE`, `EXTERNAL`, `LOOPBACK`. Default is `EXTERNAL`\n"
                },
                "urpfMode": {
                    "type": "string",
                    "description": "Unicast Reverse Path Forwarding mode, one of `NONE`, `STRICT`. Default is `STRICT`. This attribute is supported with NSX 3.0.0 onwards.\n"
                }
            },
            "required": [
                "displayName",
                "gatewayPath",
                "ipAddresses",
                "ipv6NdraProfilePath",
                "localeServiceId",
                "nsxId",
                "path",
                "revision",
                "subnets"
            ],
            "inputProperties": {
                "accessVlanId": {
                    "type": "integer",
                    "description": "Access VLAN ID, relevant only for VRF interfaces. This attribute is supported with NSX 3.0.0 onwards.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "edgeNodePath": {
                    "type": "string",
                    "description": "Path of edge node for this interface, relevant for interfaces of type `EXTERNAL`.\n"
                },
                "enablePim": {
                    "type": "boolean",
                    "description": "Flag to enable Protocol Independent Multicast, relevant only for interfaces of type `EXTERNAL`. This attribute will always be `false` for other interface types. This attribute is supported with NSX 3.0.0 onwards, and only for local managers.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Policy path for the Tier-0 Gateway.\n",
                    "willReplaceOnChanges": true
                },
                "ipv6NdraProfilePath": {
                    "type": "string",
                    "description": "IPv6 NDRA profile to be associated with this interface.\n"
                },
                "mtu": {
                    "type": "integer",
                    "description": "Maximum Transmission Unit for this interface.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                    "willReplaceOnChanges": true
                },
                "ospf": {
                    "$ref": "#/types/nsxt:index/PolicyTier0GatewayInterfaceOspf:PolicyTier0GatewayInterfaceOspf",
                    "description": "OSPF configuration block - supported for `EXTERNAL` interface only. Not supported on Global Manager.\n"
                },
                "segmentPath": {
                    "type": "string",
                    "description": "Policy path for segment to be connected with this Tier1 Gateway. This argemnt is required for interfaces of type `SERVICE` and `EXTERNAL`.\n",
                    "willReplaceOnChanges": true
                },
                "sitePath": {
                    "type": "string",
                    "description": "Path of the site the Tier0 edge cluster belongs to. This configuration is required for global manager only. `path` field of the existing `nsxt.getPolicySite` can be used here.\n",
                    "willReplaceOnChanges": true
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of Ip Addresses/Prefixes in CIDR format, to be associated with this interface.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier0GatewayInterfaceTag:PolicyTier0GatewayInterfaceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of this interface, one of `SERVICE`, `EXTERNAL`, `LOOPBACK`. Default is `EXTERNAL`\n",
                    "willReplaceOnChanges": true
                },
                "urpfMode": {
                    "type": "string",
                    "description": "Unicast Reverse Path Forwarding mode, one of `NONE`, `STRICT`. Default is `STRICT`. This attribute is supported with NSX 3.0.0 onwards.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "gatewayPath",
                "subnets"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyTier0GatewayInterface resources.\n",
                "properties": {
                    "accessVlanId": {
                        "type": "integer",
                        "description": "Access VLAN ID, relevant only for VRF interfaces. This attribute is supported with NSX 3.0.0 onwards.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "edgeNodePath": {
                        "type": "string",
                        "description": "Path of edge node for this interface, relevant for interfaces of type `EXTERNAL`.\n"
                    },
                    "enablePim": {
                        "type": "boolean",
                        "description": "Flag to enable Protocol Independent Multicast, relevant only for interfaces of type `EXTERNAL`. This attribute will always be `false` for other interface types. This attribute is supported with NSX 3.0.0 onwards, and only for local managers.\n"
                    },
                    "gatewayPath": {
                        "type": "string",
                        "description": "Policy path for the Tier-0 Gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of Ip Addresses picked from each subnet in `subnets` field. This attribute can serve as `source_addresses` field of `nsxt.PolicyBgpNeighbor` resource.\n"
                    },
                    "ipv6NdraProfilePath": {
                        "type": "string",
                        "description": "IPv6 NDRA profile to be associated with this interface.\n"
                    },
                    "localeServiceId": {
                        "type": "string",
                        "description": "Id of associated Gateway Locale Service on NSX\n"
                    },
                    "mtu": {
                        "type": "integer",
                        "description": "Maximum Transmission Unit for this interface.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "ospf": {
                        "$ref": "#/types/nsxt:index/PolicyTier0GatewayInterfaceOspf:PolicyTier0GatewayInterfaceOspf",
                        "description": "OSPF configuration block - supported for `EXTERNAL` interface only. Not supported on Global Manager.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "segmentPath": {
                        "type": "string",
                        "description": "Policy path for segment to be connected with this Tier1 Gateway. This argemnt is required for interfaces of type `SERVICE` and `EXTERNAL`.\n",
                        "willReplaceOnChanges": true
                    },
                    "sitePath": {
                        "type": "string",
                        "description": "Path of the site the Tier0 edge cluster belongs to. This configuration is required for global manager only. `path` field of the existing `nsxt.getPolicySite` can be used here.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of Ip Addresses/Prefixes in CIDR format, to be associated with this interface.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyTier0GatewayInterfaceTag:PolicyTier0GatewayInterfaceTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of this interface, one of `SERVICE`, `EXTERNAL`, `LOOPBACK`. Default is `EXTERNAL`\n",
                        "willReplaceOnChanges": true
                    },
                    "urpfMode": {
                        "type": "string",
                        "description": "Unicast Reverse Path Forwarding mode, one of `NONE`, `STRICT`. Default is `STRICT`. This attribute is supported with NSX 3.0.0 onwards.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyTier1Gateway:PolicyTier1Gateway": {
            "properties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyTier1GatewayContext:PolicyTier1GatewayContext",
                    "description": "The context which the object belongs to\n"
                },
                "defaultRuleLogging": {
                    "type": "boolean",
                    "description": "Boolean flag indicating if the default rule logging will be enabled or not. The default value is false.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "dhcpConfigPath": {
                    "type": "string",
                    "description": "Policy path to DHCP server or relay configuration to use for this gateway.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name for the locale service.\n"
                },
                "edgeClusterPath": {
                    "type": "string",
                    "description": "The path of the edge cluster where the Tier-0 is placed.\n"
                },
                "egressQosProfilePath": {
                    "type": "string",
                    "description": "QoS Profile path for egress traffic on link connected to Tier0 gateway.\n"
                },
                "enableFirewall": {
                    "type": "boolean",
                    "description": "Boolean flag indicating if the edge firewall will be enabled or not. The default value is true.\n"
                },
                "enableStandbyRelocation": {
                    "type": "boolean",
                    "description": "Boolean flag indicating if the standby relocation will be enabled or not. The default value is false.\n"
                },
                "failoverMode": {
                    "type": "string",
                    "description": "This failover mode determines, whether the preferred service router instance for given logical router will preempt the peer. Accepted values are PREEMPTIVE/NON_PREEMPTIVE.\n"
                },
                "forceWhitelisting": {
                    "type": "boolean",
                    "description": "Boolean flag indicating if white-listing will be forced or not. The default value is false. This argument is deprecated and will be removed. Please use `nsxt.PolicyPredefinedGatewayPolicy` resource to control default action.\n",
                    "deprecationMessage": "Use nsxt_policy_predefined_gateway_policy resource to control default action"
                },
                "haMode": {
                    "type": "string",
                    "description": "High-availability Mode for Tier-1. Valid values are `ACTIVE_ACTIVE`, `ACTIVE_STANDBY` and `NONE`.  `ACTIVE_ACTIVE` is supported with NSX version 4.0.0 and above. `NONE` mode should be used for Distributed Only.\n"
                },
                "ingressQosProfilePath": {
                    "type": "string",
                    "description": "QoS Profile path for ingress traffic on link connected to Tier0 gateway.\n"
                },
                "intersiteConfig": {
                    "$ref": "#/types/nsxt:index/PolicyTier1GatewayIntersiteConfig:PolicyTier1GatewayIntersiteConfig",
                    "description": "This clause is relevant for Global Manager only.\n"
                },
                "ipv6DadProfilePath": {
                    "type": "string",
                    "description": "Policy path to IPv6 DAD profile.\n"
                },
                "ipv6NdraProfilePath": {
                    "type": "string",
                    "description": "Policy path to IPv6 NDRA profile.\n"
                },
                "localeServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier1GatewayLocaleService:PolicyTier1GatewayLocaleService"
                    },
                    "description": "This argument is required on NSX Global Manager. Multiple locale services can be specified for multiple locations.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "poolAllocation": {
                    "type": "string",
                    "description": "Size of edge node allocation at for routing and load balancer service to meet performance and scalability requirements, one of `ROUTING`, `LB_SMALL`, `LB_MEDIUM`, `LB_LARGE`, `LB_XLARGE`. Default is `ROUTING`. Changing this attribute would force new resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "routeAdvertisementRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier1GatewayRouteAdvertisementRule:PolicyTier1GatewayRouteAdvertisementRule"
                    },
                    "description": "List of rules for routes advertisement:\n"
                },
                "routeAdvertisementTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of desired types of route advertisements, supported values: `TIER1_STATIC_ROUTES`, `TIER1_CONNECTED`, `TIER1_NAT`, `TIER1_LB_VIP`, `TIER1_LB_SNAT`, `TIER1_DNS_FORWARDER_IP`, `TIER1_IPSEC_LOCAL_ENDPOINT`. This field is Computed, meaning that NSX can auto-assign types. Hence, in order to revert to default behavior, set route advertisement values explicitly rather than removing this clause from configuration.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier1GatewayTag:PolicyTier1GatewayTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Tier-1 gateway.\n"
                },
                "tier0Path": {
                    "type": "string",
                    "description": "The path of the connected Tier0.\n"
                },
                "type": {
                    "type": "string",
                    "description": "This setting is only applicable to VMC and it helps auto-configure router advertisements for the gateway. Valid values are `ROUTED`, `NATTED` and `ISOLATED`. For `ROUTED` and `NATTED`, `tier0_path` should be specified in configuration.\n"
                }
            },
            "required": [
                "displayName",
                "edgeClusterPath",
                "intersiteConfig",
                "ipv6DadProfilePath",
                "ipv6NdraProfilePath",
                "nsxId",
                "path",
                "revision",
                "routeAdvertisementTypes"
            ],
            "inputProperties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyTier1GatewayContext:PolicyTier1GatewayContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "defaultRuleLogging": {
                    "type": "boolean",
                    "description": "Boolean flag indicating if the default rule logging will be enabled or not. The default value is false.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "dhcpConfigPath": {
                    "type": "string",
                    "description": "Policy path to DHCP server or relay configuration to use for this gateway.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name for the locale service.\n"
                },
                "edgeClusterPath": {
                    "type": "string",
                    "description": "The path of the edge cluster where the Tier-0 is placed.\n"
                },
                "egressQosProfilePath": {
                    "type": "string",
                    "description": "QoS Profile path for egress traffic on link connected to Tier0 gateway.\n"
                },
                "enableFirewall": {
                    "type": "boolean",
                    "description": "Boolean flag indicating if the edge firewall will be enabled or not. The default value is true.\n"
                },
                "enableStandbyRelocation": {
                    "type": "boolean",
                    "description": "Boolean flag indicating if the standby relocation will be enabled or not. The default value is false.\n"
                },
                "failoverMode": {
                    "type": "string",
                    "description": "This failover mode determines, whether the preferred service router instance for given logical router will preempt the peer. Accepted values are PREEMPTIVE/NON_PREEMPTIVE.\n"
                },
                "forceWhitelisting": {
                    "type": "boolean",
                    "description": "Boolean flag indicating if white-listing will be forced or not. The default value is false. This argument is deprecated and will be removed. Please use `nsxt.PolicyPredefinedGatewayPolicy` resource to control default action.\n",
                    "deprecationMessage": "Use nsxt_policy_predefined_gateway_policy resource to control default action"
                },
                "haMode": {
                    "type": "string",
                    "description": "High-availability Mode for Tier-1. Valid values are `ACTIVE_ACTIVE`, `ACTIVE_STANDBY` and `NONE`.  `ACTIVE_ACTIVE` is supported with NSX version 4.0.0 and above. `NONE` mode should be used for Distributed Only.\n"
                },
                "ingressQosProfilePath": {
                    "type": "string",
                    "description": "QoS Profile path for ingress traffic on link connected to Tier0 gateway.\n"
                },
                "intersiteConfig": {
                    "$ref": "#/types/nsxt:index/PolicyTier1GatewayIntersiteConfig:PolicyTier1GatewayIntersiteConfig",
                    "description": "This clause is relevant for Global Manager only.\n"
                },
                "ipv6DadProfilePath": {
                    "type": "string",
                    "description": "Policy path to IPv6 DAD profile.\n"
                },
                "ipv6NdraProfilePath": {
                    "type": "string",
                    "description": "Policy path to IPv6 NDRA profile.\n"
                },
                "localeServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier1GatewayLocaleService:PolicyTier1GatewayLocaleService"
                    },
                    "description": "This argument is required on NSX Global Manager. Multiple locale services can be specified for multiple locations.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                    "willReplaceOnChanges": true
                },
                "poolAllocation": {
                    "type": "string",
                    "description": "Size of edge node allocation at for routing and load balancer service to meet performance and scalability requirements, one of `ROUTING`, `LB_SMALL`, `LB_MEDIUM`, `LB_LARGE`, `LB_XLARGE`. Default is `ROUTING`. Changing this attribute would force new resource.\n",
                    "willReplaceOnChanges": true
                },
                "routeAdvertisementRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier1GatewayRouteAdvertisementRule:PolicyTier1GatewayRouteAdvertisementRule"
                    },
                    "description": "List of rules for routes advertisement:\n"
                },
                "routeAdvertisementTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of desired types of route advertisements, supported values: `TIER1_STATIC_ROUTES`, `TIER1_CONNECTED`, `TIER1_NAT`, `TIER1_LB_VIP`, `TIER1_LB_SNAT`, `TIER1_DNS_FORWARDER_IP`, `TIER1_IPSEC_LOCAL_ENDPOINT`. This field is Computed, meaning that NSX can auto-assign types. Hence, in order to revert to default behavior, set route advertisement values explicitly rather than removing this clause from configuration.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier1GatewayTag:PolicyTier1GatewayTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this Tier-1 gateway.\n"
                },
                "tier0Path": {
                    "type": "string",
                    "description": "The path of the connected Tier0.\n"
                },
                "type": {
                    "type": "string",
                    "description": "This setting is only applicable to VMC and it helps auto-configure router advertisements for the gateway. Valid values are `ROUTED`, `NATTED` and `ISOLATED`. For `ROUTED` and `NATTED`, `tier0_path` should be specified in configuration.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyTier1Gateway resources.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyTier1GatewayContext:PolicyTier1GatewayContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "defaultRuleLogging": {
                        "type": "boolean",
                        "description": "Boolean flag indicating if the default rule logging will be enabled or not. The default value is false.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "dhcpConfigPath": {
                        "type": "string",
                        "description": "Policy path to DHCP server or relay configuration to use for this gateway.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name for the locale service.\n"
                    },
                    "edgeClusterPath": {
                        "type": "string",
                        "description": "The path of the edge cluster where the Tier-0 is placed.\n"
                    },
                    "egressQosProfilePath": {
                        "type": "string",
                        "description": "QoS Profile path for egress traffic on link connected to Tier0 gateway.\n"
                    },
                    "enableFirewall": {
                        "type": "boolean",
                        "description": "Boolean flag indicating if the edge firewall will be enabled or not. The default value is true.\n"
                    },
                    "enableStandbyRelocation": {
                        "type": "boolean",
                        "description": "Boolean flag indicating if the standby relocation will be enabled or not. The default value is false.\n"
                    },
                    "failoverMode": {
                        "type": "string",
                        "description": "This failover mode determines, whether the preferred service router instance for given logical router will preempt the peer. Accepted values are PREEMPTIVE/NON_PREEMPTIVE.\n"
                    },
                    "forceWhitelisting": {
                        "type": "boolean",
                        "description": "Boolean flag indicating if white-listing will be forced or not. The default value is false. This argument is deprecated and will be removed. Please use `nsxt.PolicyPredefinedGatewayPolicy` resource to control default action.\n",
                        "deprecationMessage": "Use nsxt_policy_predefined_gateway_policy resource to control default action"
                    },
                    "haMode": {
                        "type": "string",
                        "description": "High-availability Mode for Tier-1. Valid values are `ACTIVE_ACTIVE`, `ACTIVE_STANDBY` and `NONE`.  `ACTIVE_ACTIVE` is supported with NSX version 4.0.0 and above. `NONE` mode should be used for Distributed Only.\n"
                    },
                    "ingressQosProfilePath": {
                        "type": "string",
                        "description": "QoS Profile path for ingress traffic on link connected to Tier0 gateway.\n"
                    },
                    "intersiteConfig": {
                        "$ref": "#/types/nsxt:index/PolicyTier1GatewayIntersiteConfig:PolicyTier1GatewayIntersiteConfig",
                        "description": "This clause is relevant for Global Manager only.\n"
                    },
                    "ipv6DadProfilePath": {
                        "type": "string",
                        "description": "Policy path to IPv6 DAD profile.\n"
                    },
                    "ipv6NdraProfilePath": {
                        "type": "string",
                        "description": "Policy path to IPv6 NDRA profile.\n"
                    },
                    "localeServices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyTier1GatewayLocaleService:PolicyTier1GatewayLocaleService"
                        },
                        "description": "This argument is required on NSX Global Manager. Multiple locale services can be specified for multiple locations.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "poolAllocation": {
                        "type": "string",
                        "description": "Size of edge node allocation at for routing and load balancer service to meet performance and scalability requirements, one of `ROUTING`, `LB_SMALL`, `LB_MEDIUM`, `LB_LARGE`, `LB_XLARGE`. Default is `ROUTING`. Changing this attribute would force new resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "routeAdvertisementRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyTier1GatewayRouteAdvertisementRule:PolicyTier1GatewayRouteAdvertisementRule"
                        },
                        "description": "List of rules for routes advertisement:\n"
                    },
                    "routeAdvertisementTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of desired types of route advertisements, supported values: `TIER1_STATIC_ROUTES`, `TIER1_CONNECTED`, `TIER1_NAT`, `TIER1_LB_VIP`, `TIER1_LB_SNAT`, `TIER1_DNS_FORWARDER_IP`, `TIER1_IPSEC_LOCAL_ENDPOINT`. This field is Computed, meaning that NSX can auto-assign types. Hence, in order to revert to default behavior, set route advertisement values explicitly rather than removing this clause from configuration.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyTier1GatewayTag:PolicyTier1GatewayTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this Tier-1 gateway.\n"
                    },
                    "tier0Path": {
                        "type": "string",
                        "description": "The path of the connected Tier0.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "This setting is only applicable to VMC and it helps auto-configure router advertisements for the gateway. Valid values are `ROUTED`, `NATTED` and `ISOLATED`. For `ROUTED` and `NATTED`, `tier0_path` should be specified in configuration.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyTier1GatewayInterface:PolicyTier1GatewayInterface": {
            "properties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyTier1GatewayInterfaceContext:PolicyTier1GatewayInterfaceContext",
                    "description": "The context which the object belongs to\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Policy path for the Tier-1 Gateway.\n"
                },
                "ipv6NdraProfilePath": {
                    "type": "string",
                    "description": "IPv6 NDRA profile to be associated with this interface.\n"
                },
                "localeServiceId": {
                    "type": "string",
                    "description": "Locale Service ID for this interface\n"
                },
                "mtu": {
                    "type": "integer",
                    "description": "Maximum Transmission Unit for this interface.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "segmentPath": {
                    "type": "string",
                    "description": "Policy path for segment to be connected with this Tier1 Gateway.\n"
                },
                "sitePath": {
                    "type": "string",
                    "description": "Path of the site the Tier1 edge cluster belongs to. This configuration is required for global manager only. `path` field of the existing `nsxt.getPolicySite` can be used here.\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of Ip Addresses/Prefixes in CIDR format, to be associated with this interface.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier1GatewayInterfaceTag:PolicyTier1GatewayInterfaceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "urpfMode": {
                    "type": "string",
                    "description": "Unicast Reverse Path Forwarding mode, one of `NONE`, `STRICT`. Default is `STRICT`. This attribute is supported with NSX 3.0.0 onwards.\n"
                }
            },
            "required": [
                "displayName",
                "gatewayPath",
                "ipv6NdraProfilePath",
                "localeServiceId",
                "nsxId",
                "path",
                "revision",
                "segmentPath",
                "subnets"
            ],
            "inputProperties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyTier1GatewayInterfaceContext:PolicyTier1GatewayInterfaceContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "gatewayPath": {
                    "type": "string",
                    "description": "Policy path for the Tier-1 Gateway.\n",
                    "willReplaceOnChanges": true
                },
                "ipv6NdraProfilePath": {
                    "type": "string",
                    "description": "IPv6 NDRA profile to be associated with this interface.\n"
                },
                "mtu": {
                    "type": "integer",
                    "description": "Maximum Transmission Unit for this interface.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                    "willReplaceOnChanges": true
                },
                "segmentPath": {
                    "type": "string",
                    "description": "Policy path for segment to be connected with this Tier1 Gateway.\n",
                    "willReplaceOnChanges": true
                },
                "sitePath": {
                    "type": "string",
                    "description": "Path of the site the Tier1 edge cluster belongs to. This configuration is required for global manager only. `path` field of the existing `nsxt.getPolicySite` can be used here.\n",
                    "willReplaceOnChanges": true
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of Ip Addresses/Prefixes in CIDR format, to be associated with this interface.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTier1GatewayInterfaceTag:PolicyTier1GatewayInterfaceTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "urpfMode": {
                    "type": "string",
                    "description": "Unicast Reverse Path Forwarding mode, one of `NONE`, `STRICT`. Default is `STRICT`. This attribute is supported with NSX 3.0.0 onwards.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "gatewayPath",
                "segmentPath",
                "subnets"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyTier1GatewayInterface resources.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyTier1GatewayInterfaceContext:PolicyTier1GatewayInterfaceContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "gatewayPath": {
                        "type": "string",
                        "description": "Policy path for the Tier-1 Gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipv6NdraProfilePath": {
                        "type": "string",
                        "description": "IPv6 NDRA profile to be associated with this interface.\n"
                    },
                    "localeServiceId": {
                        "type": "string",
                        "description": "Locale Service ID for this interface\n"
                    },
                    "mtu": {
                        "type": "integer",
                        "description": "Maximum Transmission Unit for this interface.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "segmentPath": {
                        "type": "string",
                        "description": "Policy path for segment to be connected with this Tier1 Gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "sitePath": {
                        "type": "string",
                        "description": "Path of the site the Tier1 edge cluster belongs to. This configuration is required for global manager only. `path` field of the existing `nsxt.getPolicySite` can be used here.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of Ip Addresses/Prefixes in CIDR format, to be associated with this interface.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyTier1GatewayInterfaceTag:PolicyTier1GatewayInterfaceTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    },
                    "urpfMode": {
                        "type": "string",
                        "description": "Unicast Reverse Path Forwarding mode, one of `NONE`, `STRICT`. Default is `STRICT`. This attribute is supported with NSX 3.0.0 onwards.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyTransportZone:PolicyTransportZone": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the Transport Zone.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The Display Name of the Transport Zone.\n"
                },
                "enforcementPoint": {
                    "type": "string",
                    "description": "The ID of enforcement point under given `site_path` to manage the Transport Zone.\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Set this Transport Zone as the default zone of given `transport_type`. Default value is `false`. When setting a Transport Zone with `is_default`: `true`, no existing Transport Zone of same `transport_type` should be set as default.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "realizedId": {
                    "type": "string",
                    "description": "Realized ID for the transport zone. For reference in fabric resources (such as `transport_node`), `realized_id` should be used rather than `id`.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "sitePath": {
                    "type": "string",
                    "description": "The path of the site which the Transport Zone belongs to. `path` field of the existing `nsxt.getPolicySite` can be used here.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTransportZoneTag:PolicyTransportZoneTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "transportType": {
                    "type": "string",
                    "description": "Transport type of requested Transport Zone, one of `OVERLAY_STANDARD`, `OVERLAY_ENS`, `OVERLAY_BACKED`, `VLAN_BACKED` and `UNKNOWN`.\n"
                },
                "uplinkTeamingPolicyNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of switching uplink teaming policies that all transport nodes in this transport zone support. Uplinkin teaming policies are only valid for `VLAN_BACKED` transport zones.\n"
                }
            },
            "required": [
                "description",
                "displayName",
                "enforcementPoint",
                "nsxId",
                "path",
                "realizedId",
                "revision",
                "transportType"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the Transport Zone.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The Display Name of the Transport Zone.\n"
                },
                "enforcementPoint": {
                    "type": "string",
                    "description": "The ID of enforcement point under given `site_path` to manage the Transport Zone.\n",
                    "willReplaceOnChanges": true
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Set this Transport Zone as the default zone of given `transport_type`. Default value is `false`. When setting a Transport Zone with `is_default`: `true`, no existing Transport Zone of same `transport_type` should be set as default.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                    "willReplaceOnChanges": true
                },
                "sitePath": {
                    "type": "string",
                    "description": "The path of the site which the Transport Zone belongs to. `path` field of the existing `nsxt.getPolicySite` can be used here.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyTransportZoneTag:PolicyTransportZoneTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "transportType": {
                    "type": "string",
                    "description": "Transport type of requested Transport Zone, one of `OVERLAY_STANDARD`, `OVERLAY_ENS`, `OVERLAY_BACKED`, `VLAN_BACKED` and `UNKNOWN`.\n",
                    "willReplaceOnChanges": true
                },
                "uplinkTeamingPolicyNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of switching uplink teaming policies that all transport nodes in this transport zone support. Uplinkin teaming policies are only valid for `VLAN_BACKED` transport zones.\n"
                }
            },
            "requiredInputs": [
                "transportType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyTransportZone resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the Transport Zone.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name of the Transport Zone.\n"
                    },
                    "enforcementPoint": {
                        "type": "string",
                        "description": "The ID of enforcement point under given `site_path` to manage the Transport Zone.\n",
                        "willReplaceOnChanges": true
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Set this Transport Zone as the default zone of given `transport_type`. Default value is `false`. When setting a Transport Zone with `is_default`: `true`, no existing Transport Zone of same `transport_type` should be set as default.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "realizedId": {
                        "type": "string",
                        "description": "Realized ID for the transport zone. For reference in fabric resources (such as `transport_node`), `realized_id` should be used rather than `id`.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "sitePath": {
                        "type": "string",
                        "description": "The path of the site which the Transport Zone belongs to. `path` field of the existing `nsxt.getPolicySite` can be used here.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyTransportZoneTag:PolicyTransportZoneTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    },
                    "transportType": {
                        "type": "string",
                        "description": "Transport type of requested Transport Zone, one of `OVERLAY_STANDARD`, `OVERLAY_ENS`, `OVERLAY_BACKED`, `VLAN_BACKED` and `UNKNOWN`.\n",
                        "willReplaceOnChanges": true
                    },
                    "uplinkTeamingPolicyNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of switching uplink teaming policies that all transport nodes in this transport zone support. Uplinkin teaming policies are only valid for `VLAN_BACKED` transport zones.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyVlanSegment:PolicyVlanSegment": {
            "properties": {
                "advancedConfig": {
                    "$ref": "#/types/nsxt:index/PolicyVlanSegmentAdvancedConfig:PolicyVlanSegmentAdvancedConfig",
                    "description": "Advanced Segment configuration.\n"
                },
                "bridgeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyVlanSegmentBridgeConfig:PolicyVlanSegmentBridgeConfig"
                    },
                    "description": "List of edge bridge configuration for the segment. This setting is not supported on Global Manager.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyVlanSegmentContext:PolicyVlanSegmentContext",
                    "description": "Resource context\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "dhcpConfigPath": {
                    "type": "string",
                    "description": "Policy path to DHCP server or relay configuration to use for subnets configured on this segment. This attribute is supported with NSX 3.0.0 onwards.\n"
                },
                "discoveryProfile": {
                    "$ref": "#/types/nsxt:index/PolicyVlanSegmentDiscoveryProfile:PolicyVlanSegmentDiscoveryProfile",
                    "description": "IP and MAC discovery profile specification for the segment.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "DNS domain names.\n"
                },
                "l2Extension": {
                    "$ref": "#/types/nsxt:index/PolicyVlanSegmentL2Extension:PolicyVlanSegmentL2Extension",
                    "description": "Configuration for extending Segment through L2 VPN.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "qosProfile": {
                    "$ref": "#/types/nsxt:index/PolicyVlanSegmentQosProfile:PolicyVlanSegmentQosProfile",
                    "description": "QoS profile specification for the segment.\n"
                },
                "replicationMode": {
                    "type": "string",
                    "description": "Replication mode - MTEP or SOURCE\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "securityProfile": {
                    "$ref": "#/types/nsxt:index/PolicyVlanSegmentSecurityProfile:PolicyVlanSegmentSecurityProfile",
                    "description": "Security profile specification for the segment.\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyVlanSegmentSubnet:PolicyVlanSegmentSubnet"
                    },
                    "description": "Subnet configuration block.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyVlanSegmentTag:PolicyVlanSegmentTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this policy.\n"
                },
                "transportZonePath": {
                    "type": "string",
                    "description": "Path for vlan transport zone for the bridge.\n"
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VLAN IDs or ranges.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "revision",
                "transportZonePath",
                "vlanIds"
            ],
            "inputProperties": {
                "advancedConfig": {
                    "$ref": "#/types/nsxt:index/PolicyVlanSegmentAdvancedConfig:PolicyVlanSegmentAdvancedConfig",
                    "description": "Advanced Segment configuration.\n"
                },
                "bridgeConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyVlanSegmentBridgeConfig:PolicyVlanSegmentBridgeConfig"
                    },
                    "description": "List of edge bridge configuration for the segment. This setting is not supported on Global Manager.\n"
                },
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyVlanSegmentContext:PolicyVlanSegmentContext",
                    "description": "Resource context\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "dhcpConfigPath": {
                    "type": "string",
                    "description": "Policy path to DHCP server or relay configuration to use for subnets configured on this segment. This attribute is supported with NSX 3.0.0 onwards.\n"
                },
                "discoveryProfile": {
                    "$ref": "#/types/nsxt:index/PolicyVlanSegmentDiscoveryProfile:PolicyVlanSegmentDiscoveryProfile",
                    "description": "IP and MAC discovery profile specification for the segment.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "DNS domain names.\n"
                },
                "l2Extension": {
                    "$ref": "#/types/nsxt:index/PolicyVlanSegmentL2Extension:PolicyVlanSegmentL2Extension",
                    "description": "Configuration for extending Segment through L2 VPN.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "qosProfile": {
                    "$ref": "#/types/nsxt:index/PolicyVlanSegmentQosProfile:PolicyVlanSegmentQosProfile",
                    "description": "QoS profile specification for the segment.\n"
                },
                "replicationMode": {
                    "type": "string",
                    "description": "Replication mode - MTEP or SOURCE\n"
                },
                "securityProfile": {
                    "$ref": "#/types/nsxt:index/PolicyVlanSegmentSecurityProfile:PolicyVlanSegmentSecurityProfile",
                    "description": "Security profile specification for the segment.\n"
                },
                "subnets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyVlanSegmentSubnet:PolicyVlanSegmentSubnet"
                    },
                    "description": "Subnet configuration block.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyVlanSegmentTag:PolicyVlanSegmentTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this policy.\n"
                },
                "transportZonePath": {
                    "type": "string",
                    "description": "Path for vlan transport zone for the bridge.\n",
                    "willReplaceOnChanges": true
                },
                "vlanIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of VLAN IDs or ranges.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "vlanIds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyVlanSegment resources.\n",
                "properties": {
                    "advancedConfig": {
                        "$ref": "#/types/nsxt:index/PolicyVlanSegmentAdvancedConfig:PolicyVlanSegmentAdvancedConfig",
                        "description": "Advanced Segment configuration.\n"
                    },
                    "bridgeConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyVlanSegmentBridgeConfig:PolicyVlanSegmentBridgeConfig"
                        },
                        "description": "List of edge bridge configuration for the segment. This setting is not supported on Global Manager.\n"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyVlanSegmentContext:PolicyVlanSegmentContext",
                        "description": "Resource context\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "dhcpConfigPath": {
                        "type": "string",
                        "description": "Policy path to DHCP server or relay configuration to use for subnets configured on this segment. This attribute is supported with NSX 3.0.0 onwards.\n"
                    },
                    "discoveryProfile": {
                        "$ref": "#/types/nsxt:index/PolicyVlanSegmentDiscoveryProfile:PolicyVlanSegmentDiscoveryProfile",
                        "description": "IP and MAC discovery profile specification for the segment.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "domainName": {
                        "type": "string",
                        "description": "DNS domain names.\n"
                    },
                    "l2Extension": {
                        "$ref": "#/types/nsxt:index/PolicyVlanSegmentL2Extension:PolicyVlanSegmentL2Extension",
                        "description": "Configuration for extending Segment through L2 VPN.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "qosProfile": {
                        "$ref": "#/types/nsxt:index/PolicyVlanSegmentQosProfile:PolicyVlanSegmentQosProfile",
                        "description": "QoS profile specification for the segment.\n"
                    },
                    "replicationMode": {
                        "type": "string",
                        "description": "Replication mode - MTEP or SOURCE\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "securityProfile": {
                        "$ref": "#/types/nsxt:index/PolicyVlanSegmentSecurityProfile:PolicyVlanSegmentSecurityProfile",
                        "description": "Security profile specification for the segment.\n"
                    },
                    "subnets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyVlanSegmentSubnet:PolicyVlanSegmentSubnet"
                        },
                        "description": "Subnet configuration block.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyVlanSegmentTag:PolicyVlanSegmentTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this policy.\n"
                    },
                    "transportZonePath": {
                        "type": "string",
                        "description": "Path for vlan transport zone for the bridge.\n",
                        "willReplaceOnChanges": true
                    },
                    "vlanIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of VLAN IDs or ranges.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyVmTags:PolicyVmTags": {
            "properties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyVmTagsContext:PolicyVmTagsContext",
                    "description": "The context which the object belongs to\n"
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the Virtual Machine. Can be the instance UUID or BIOS UUID.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyVmTagsPort:PolicyVmTagsPort"
                    },
                    "description": "Option to tag segment port auto-created for the VM on specified segment.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyVmTagsTag:PolicyVmTagsTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this segment port.\n"
                }
            },
            "required": [
                "instanceId"
            ],
            "inputProperties": {
                "context": {
                    "$ref": "#/types/nsxt:index/PolicyVmTagsContext:PolicyVmTagsContext",
                    "description": "The context which the object belongs to\n",
                    "willReplaceOnChanges": true
                },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the Virtual Machine. Can be the instance UUID or BIOS UUID.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyVmTagsPort:PolicyVmTagsPort"
                    },
                    "description": "Option to tag segment port auto-created for the VM on specified segment.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyVmTagsTag:PolicyVmTagsTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this segment port.\n"
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyVmTags resources.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/PolicyVmTagsContext:PolicyVmTagsContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "ID of the Virtual Machine. Can be the instance UUID or BIOS UUID.\n"
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyVmTagsPort:PolicyVmTagsPort"
                        },
                        "description": "Option to tag segment port auto-created for the VM on specified segment.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyVmTagsTag:PolicyVmTagsTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this segment port.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/policyVniPool:PolicyVniPool": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "end": {
                    "type": "integer",
                    "description": "End value of VNI Pool range. Minimum: 75001, Maximum: 16777215.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "start": {
                    "type": "integer",
                    "description": "Start value of VNI Pool range. Minimum: 75001, Maximum: 16777215.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyVniPoolTag:PolicyVniPoolTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "displayName",
                "end",
                "nsxId",
                "path",
                "revision",
                "start"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "end": {
                    "type": "integer",
                    "description": "End value of VNI Pool range. Minimum: 75001, Maximum: 16777215.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                    "willReplaceOnChanges": true
                },
                "start": {
                    "type": "integer",
                    "description": "Start value of VNI Pool range. Minimum: 75001, Maximum: 16777215.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/PolicyVniPoolTag:PolicyVniPoolTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "end",
                "start"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyVniPool resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "end": {
                        "type": "integer",
                        "description": "End value of VNI Pool range. Minimum: 75001, Maximum: 16777215.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the policy resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "start": {
                        "type": "integer",
                        "description": "Start value of VNI Pool range. Minimum: 75001, Maximum: 16777215.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/PolicyVniPoolTag:PolicyVniPoolTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/qosSwitchingProfile:QosSwitchingProfile": {
            "properties": {
                "classOfService": {
                    "type": "integer",
                    "description": "Class of service.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "dscpPriority": {
                    "type": "integer",
                    "description": "DSCP Priority (0-63)\n"
                },
                "dscpTrusted": {
                    "type": "boolean",
                    "description": "Trust mode for DSCP (False by default)\n"
                },
                "egressRateShaper": {
                    "$ref": "#/types/nsxt:index/QosSwitchingProfileEgressRateShaper:QosSwitchingProfileEgressRateShaper",
                    "description": "Egress rate shaper configuration:\n"
                },
                "ingressBroadcastRateShaper": {
                    "$ref": "#/types/nsxt:index/QosSwitchingProfileIngressBroadcastRateShaper:QosSwitchingProfileIngressBroadcastRateShaper",
                    "description": "Ingress rate shaper configuration:\n"
                },
                "ingressRateShaper": {
                    "$ref": "#/types/nsxt:index/QosSwitchingProfileIngressRateShaper:QosSwitchingProfileIngressRateShaper",
                    "description": "Ingress rate shaper configuration:\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/QosSwitchingProfileTag:QosSwitchingProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this qos switching profile.\n"
                }
            },
            "required": [
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "classOfService": {
                    "type": "integer",
                    "description": "Class of service.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "dscpPriority": {
                    "type": "integer",
                    "description": "DSCP Priority (0-63)\n"
                },
                "dscpTrusted": {
                    "type": "boolean",
                    "description": "Trust mode for DSCP (False by default)\n"
                },
                "egressRateShaper": {
                    "$ref": "#/types/nsxt:index/QosSwitchingProfileEgressRateShaper:QosSwitchingProfileEgressRateShaper",
                    "description": "Egress rate shaper configuration:\n"
                },
                "ingressBroadcastRateShaper": {
                    "$ref": "#/types/nsxt:index/QosSwitchingProfileIngressBroadcastRateShaper:QosSwitchingProfileIngressBroadcastRateShaper",
                    "description": "Ingress rate shaper configuration:\n"
                },
                "ingressRateShaper": {
                    "$ref": "#/types/nsxt:index/QosSwitchingProfileIngressRateShaper:QosSwitchingProfileIngressRateShaper",
                    "description": "Ingress rate shaper configuration:\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/QosSwitchingProfileTag:QosSwitchingProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this qos switching profile.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering QosSwitchingProfile resources.\n",
                "properties": {
                    "classOfService": {
                        "type": "integer",
                        "description": "Class of service.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "dscpPriority": {
                        "type": "integer",
                        "description": "DSCP Priority (0-63)\n"
                    },
                    "dscpTrusted": {
                        "type": "boolean",
                        "description": "Trust mode for DSCP (False by default)\n"
                    },
                    "egressRateShaper": {
                        "$ref": "#/types/nsxt:index/QosSwitchingProfileEgressRateShaper:QosSwitchingProfileEgressRateShaper",
                        "description": "Egress rate shaper configuration:\n"
                    },
                    "ingressBroadcastRateShaper": {
                        "$ref": "#/types/nsxt:index/QosSwitchingProfileIngressBroadcastRateShaper:QosSwitchingProfileIngressBroadcastRateShaper",
                        "description": "Ingress rate shaper configuration:\n"
                    },
                    "ingressRateShaper": {
                        "$ref": "#/types/nsxt:index/QosSwitchingProfileIngressRateShaper:QosSwitchingProfileIngressRateShaper",
                        "description": "Ingress rate shaper configuration:\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/QosSwitchingProfileTag:QosSwitchingProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this qos switching profile.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/spoofguardSwitchingProfile:SpoofguardSwitchingProfile": {
            "properties": {
                "addressBindingWhitelistEnabled": {
                    "type": "boolean",
                    "description": "A boolean flag indicating whether this profile overrides the default system wide settings for Spoof Guard when assigned to ports.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/SpoofguardSwitchingProfileTag:SpoofguardSwitchingProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this spoofguard switching profile.\n"
                }
            },
            "required": [
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "addressBindingWhitelistEnabled": {
                    "type": "boolean",
                    "description": "A boolean flag indicating whether this profile overrides the default system wide settings for Spoof Guard when assigned to ports.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/SpoofguardSwitchingProfileTag:SpoofguardSwitchingProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this spoofguard switching profile.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SpoofguardSwitchingProfile resources.\n",
                "properties": {
                    "addressBindingWhitelistEnabled": {
                        "type": "boolean",
                        "description": "A boolean flag indicating whether this profile overrides the default system wide settings for Spoof Guard when assigned to ports.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/SpoofguardSwitchingProfileTag:SpoofguardSwitchingProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this spoofguard switching profile.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/staticRoute:StaticRoute": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "logicalRouterId": {
                    "type": "string",
                    "description": "Logical router id.\n"
                },
                "network": {
                    "type": "string",
                    "description": "CIDR.\n"
                },
                "nextHops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/StaticRouteNextHop:StaticRouteNextHop"
                    },
                    "description": "List of Next Hops, each with those arguments:\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/StaticRouteTag:StaticRouteTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this static route.\n"
                }
            },
            "required": [
                "displayName",
                "logicalRouterId",
                "network",
                "nextHops",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "logicalRouterId": {
                    "type": "string",
                    "description": "Logical router id.\n"
                },
                "network": {
                    "type": "string",
                    "description": "CIDR.\n"
                },
                "nextHops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/StaticRouteNextHop:StaticRouteNextHop"
                    },
                    "description": "List of Next Hops, each with those arguments:\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/StaticRouteTag:StaticRouteTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this static route.\n"
                }
            },
            "requiredInputs": [
                "logicalRouterId",
                "network",
                "nextHops"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StaticRoute resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "logicalRouterId": {
                        "type": "string",
                        "description": "Logical router id.\n"
                    },
                    "network": {
                        "type": "string",
                        "description": "CIDR.\n"
                    },
                    "nextHops": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/StaticRouteNextHop:StaticRouteNextHop"
                        },
                        "description": "List of Next Hops, each with those arguments:\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/StaticRouteTag:StaticRouteTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this static route.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/switchSecuritySwitchingProfile:SwitchSecuritySwitchingProfile": {
            "properties": {
                "blockClientDhcp": {
                    "type": "boolean",
                    "description": "Indicates whether DHCP client blocking is enabled\n"
                },
                "blockNonIp": {
                    "type": "boolean",
                    "description": "Indicates whether blocking of all traffic except IP/(G)ARP/BPDU is enabled.\n"
                },
                "blockServerDhcp": {
                    "type": "boolean",
                    "description": "Indicates whether DHCP server blocking is enabled\n"
                },
                "bpduFilterEnabled": {
                    "type": "boolean",
                    "description": "Indicates whether BPDU filter is enabled\n"
                },
                "bpduFilterWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of allowed MAC addresses to be excluded from BPDU filtering, if enabled.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "rateLimits": {
                    "$ref": "#/types/nsxt:index/SwitchSecuritySwitchingProfileRateLimits:SwitchSecuritySwitchingProfileRateLimits",
                    "description": "Rate limit definitions for broadcast and multicast traffic.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/SwitchSecuritySwitchingProfileTag:SwitchSecuritySwitchingProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this qos switching profile.\n"
                }
            },
            "required": [
                "displayName",
                "revision"
            ],
            "inputProperties": {
                "blockClientDhcp": {
                    "type": "boolean",
                    "description": "Indicates whether DHCP client blocking is enabled\n"
                },
                "blockNonIp": {
                    "type": "boolean",
                    "description": "Indicates whether blocking of all traffic except IP/(G)ARP/BPDU is enabled.\n"
                },
                "blockServerDhcp": {
                    "type": "boolean",
                    "description": "Indicates whether DHCP server blocking is enabled\n"
                },
                "bpduFilterEnabled": {
                    "type": "boolean",
                    "description": "Indicates whether BPDU filter is enabled\n"
                },
                "bpduFilterWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of allowed MAC addresses to be excluded from BPDU filtering, if enabled.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of this resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of this resource. Defaults to ID if not set.\n"
                },
                "rateLimits": {
                    "$ref": "#/types/nsxt:index/SwitchSecuritySwitchingProfileRateLimits:SwitchSecuritySwitchingProfileRateLimits",
                    "description": "Rate limit definitions for broadcast and multicast traffic.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/SwitchSecuritySwitchingProfileTag:SwitchSecuritySwitchingProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this qos switching profile.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SwitchSecuritySwitchingProfile resources.\n",
                "properties": {
                    "blockClientDhcp": {
                        "type": "boolean",
                        "description": "Indicates whether DHCP client blocking is enabled\n"
                    },
                    "blockNonIp": {
                        "type": "boolean",
                        "description": "Indicates whether blocking of all traffic except IP/(G)ARP/BPDU is enabled.\n"
                    },
                    "blockServerDhcp": {
                        "type": "boolean",
                        "description": "Indicates whether DHCP server blocking is enabled\n"
                    },
                    "bpduFilterEnabled": {
                        "type": "boolean",
                        "description": "Indicates whether BPDU filter is enabled\n"
                    },
                    "bpduFilterWhitelists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of allowed MAC addresses to be excluded from BPDU filtering, if enabled.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of this resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of this resource. Defaults to ID if not set.\n"
                    },
                    "rateLimits": {
                        "$ref": "#/types/nsxt:index/SwitchSecuritySwitchingProfileRateLimits:SwitchSecuritySwitchingProfileRateLimits",
                        "description": "Rate limit definitions for broadcast and multicast traffic.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/SwitchSecuritySwitchingProfileTag:SwitchSecuritySwitchingProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this qos switching profile.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/transportNode:TransportNode": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "edgeNode": {
                    "$ref": "#/types/nsxt:index/TransportNodeEdgeNode:TransportNodeEdgeNode"
                },
                "failureDomain": {
                    "type": "string",
                    "description": "Id of the failure domain.\n"
                },
                "hostNode": {
                    "$ref": "#/types/nsxt:index/TransportNodeHostNode:TransportNodeHostNode"
                },
                "node": {
                    "$ref": "#/types/nsxt:index/TransportNodeNode:TransportNodeNode"
                },
                "preconfiguredHostSwitch": {
                    "$ref": "#/types/nsxt:index/TransportNodePreconfiguredHostSwitch:TransportNodePreconfiguredHostSwitch",
                    "description": "Preconfigured host switch.\n"
                },
                "publicCloudGatewayNode": {
                    "$ref": "#/types/nsxt:index/TransportNodePublicCloudGatewayNode:TransportNodePublicCloudGatewayNode"
                },
                "remoteTunnelEndpoint": {
                    "$ref": "#/types/nsxt:index/TransportNodeRemoteTunnelEndpoint:TransportNodeRemoteTunnelEndpoint",
                    "description": "Configuration for a remote tunnel endpoint.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "standardHostSwitch": {
                    "$ref": "#/types/nsxt:index/TransportNodeStandardHostSwitch:TransportNodeStandardHostSwitch",
                    "description": "Standard host switch specification.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/TransportNodeTag:TransportNodeTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "required": [
                "displayName",
                "failureDomain",
                "revision"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "edgeNode": {
                    "$ref": "#/types/nsxt:index/TransportNodeEdgeNode:TransportNodeEdgeNode"
                },
                "failureDomain": {
                    "type": "string",
                    "description": "Id of the failure domain.\n"
                },
                "hostNode": {
                    "$ref": "#/types/nsxt:index/TransportNodeHostNode:TransportNodeHostNode"
                },
                "node": {
                    "$ref": "#/types/nsxt:index/TransportNodeNode:TransportNodeNode"
                },
                "preconfiguredHostSwitch": {
                    "$ref": "#/types/nsxt:index/TransportNodePreconfiguredHostSwitch:TransportNodePreconfiguredHostSwitch",
                    "description": "Preconfigured host switch.\n"
                },
                "publicCloudGatewayNode": {
                    "$ref": "#/types/nsxt:index/TransportNodePublicCloudGatewayNode:TransportNodePublicCloudGatewayNode"
                },
                "remoteTunnelEndpoint": {
                    "$ref": "#/types/nsxt:index/TransportNodeRemoteTunnelEndpoint:TransportNodeRemoteTunnelEndpoint",
                    "description": "Configuration for a remote tunnel endpoint.\n"
                },
                "standardHostSwitch": {
                    "$ref": "#/types/nsxt:index/TransportNodeStandardHostSwitch:TransportNodeStandardHostSwitch",
                    "description": "Standard host switch specification.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/TransportNodeTag:TransportNodeTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TransportNode resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "edgeNode": {
                        "$ref": "#/types/nsxt:index/TransportNodeEdgeNode:TransportNodeEdgeNode"
                    },
                    "failureDomain": {
                        "type": "string",
                        "description": "Id of the failure domain.\n"
                    },
                    "hostNode": {
                        "$ref": "#/types/nsxt:index/TransportNodeHostNode:TransportNodeHostNode"
                    },
                    "node": {
                        "$ref": "#/types/nsxt:index/TransportNodeNode:TransportNodeNode"
                    },
                    "preconfiguredHostSwitch": {
                        "$ref": "#/types/nsxt:index/TransportNodePreconfiguredHostSwitch:TransportNodePreconfiguredHostSwitch",
                        "description": "Preconfigured host switch.\n"
                    },
                    "publicCloudGatewayNode": {
                        "$ref": "#/types/nsxt:index/TransportNodePublicCloudGatewayNode:TransportNodePublicCloudGatewayNode"
                    },
                    "remoteTunnelEndpoint": {
                        "$ref": "#/types/nsxt:index/TransportNodeRemoteTunnelEndpoint:TransportNodeRemoteTunnelEndpoint",
                        "description": "Configuration for a remote tunnel endpoint.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "standardHostSwitch": {
                        "$ref": "#/types/nsxt:index/TransportNodeStandardHostSwitch:TransportNodeStandardHostSwitch",
                        "description": "Standard host switch specification.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/TransportNodeTag:TransportNodeTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/uplinkHostSwitchProfile:UplinkHostSwitchProfile": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "lags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/UplinkHostSwitchProfileLag:UplinkHostSwitchProfileLag"
                    },
                    "description": "List of LACP group.\n"
                },
                "mtu": {
                    "type": "integer",
                    "description": "Maximum Transmission Unit used for uplinks. Minimum: 1280.\n"
                },
                "namedTeamings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/UplinkHostSwitchProfileNamedTeaming:UplinkHostSwitchProfileNamedTeaming"
                    },
                    "description": "List of named uplink teaming policies that can be used by logical switches.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n"
                },
                "overlayEncap": {
                    "type": "string",
                    "description": "The protocol used to encapsulate overlay traffic. Possible values are: `VXLAN`, `GENEVE`. Default: `GENEVE`.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The NSX path of the policy resource.\n"
                },
                "realizedId": {
                    "type": "string",
                    "description": "Realized ID for the profile. For reference in fabric resources (such as `transport_node`), `realized_id` should be used rather than `id`.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/UplinkHostSwitchProfileTag:UplinkHostSwitchProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "teaming": {
                    "$ref": "#/types/nsxt:index/UplinkHostSwitchProfileTeaming:UplinkHostSwitchProfileTeaming",
                    "description": "Default TeamingPolicy associated with this UplinkProfile.\n"
                },
                "transportVlan": {
                    "type": "integer",
                    "description": "VLAN used for tagging Overlay traffic of associated HostSwitch. Default: 0.\n"
                }
            },
            "required": [
                "displayName",
                "nsxId",
                "path",
                "realizedId",
                "revision",
                "teaming"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the resource.\n"
                },
                "lags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/UplinkHostSwitchProfileLag:UplinkHostSwitchProfileLag"
                    },
                    "description": "List of LACP group.\n"
                },
                "mtu": {
                    "type": "integer",
                    "description": "Maximum Transmission Unit used for uplinks. Minimum: 1280.\n"
                },
                "namedTeamings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/UplinkHostSwitchProfileNamedTeaming:UplinkHostSwitchProfileNamedTeaming"
                    },
                    "description": "List of named uplink teaming policies that can be used by logical switches.\n"
                },
                "nsxId": {
                    "type": "string",
                    "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                    "willReplaceOnChanges": true
                },
                "overlayEncap": {
                    "type": "string",
                    "description": "The protocol used to encapsulate overlay traffic. Possible values are: `VXLAN`, `GENEVE`. Default: `GENEVE`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/UplinkHostSwitchProfileTag:UplinkHostSwitchProfileTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this resource.\n"
                },
                "teaming": {
                    "$ref": "#/types/nsxt:index/UplinkHostSwitchProfileTeaming:UplinkHostSwitchProfileTeaming",
                    "description": "Default TeamingPolicy associated with this UplinkProfile.\n"
                },
                "transportVlan": {
                    "type": "integer",
                    "description": "VLAN used for tagging Overlay traffic of associated HostSwitch. Default: 0.\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "teaming"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UplinkHostSwitchProfile resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the resource.\n"
                    },
                    "lags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/UplinkHostSwitchProfileLag:UplinkHostSwitchProfileLag"
                        },
                        "description": "List of LACP group.\n"
                    },
                    "mtu": {
                        "type": "integer",
                        "description": "Maximum Transmission Unit used for uplinks. Minimum: 1280.\n"
                    },
                    "namedTeamings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/UplinkHostSwitchProfileNamedTeaming:UplinkHostSwitchProfileNamedTeaming"
                        },
                        "description": "List of named uplink teaming policies that can be used by logical switches.\n"
                    },
                    "nsxId": {
                        "type": "string",
                        "description": "The NSX ID of this resource. If set, this ID will be used to create the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "overlayEncap": {
                        "type": "string",
                        "description": "The protocol used to encapsulate overlay traffic. Possible values are: `VXLAN`, `GENEVE`. Default: `GENEVE`.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "realizedId": {
                        "type": "string",
                        "description": "Realized ID for the profile. For reference in fabric resources (such as `transport_node`), `realized_id` should be used rather than `id`.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/UplinkHostSwitchProfileTag:UplinkHostSwitchProfileTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this resource.\n"
                    },
                    "teaming": {
                        "$ref": "#/types/nsxt:index/UplinkHostSwitchProfileTeaming:UplinkHostSwitchProfileTeaming",
                        "description": "Default TeamingPolicy associated with this UplinkProfile.\n"
                    },
                    "transportVlan": {
                        "type": "integer",
                        "description": "VLAN used for tagging Overlay traffic of associated HostSwitch. Default: 0.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/vlanLogicalSwitch:VlanLogicalSwitch": {
            "properties": {
                "addressBindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/VlanLogicalSwitchAddressBinding:VlanLogicalSwitchAddressBinding"
                    },
                    "description": "List of Address Bindings for the logical switch. This setting allows to provide bindings between IP address, mac Address and vlan.\n"
                },
                "adminState": {
                    "type": "string",
                    "description": "Admin state for the logical switch. Accepted values - 'UP' or 'DOWN'. The default value is 'UP'.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "ipPoolId": {
                    "type": "string",
                    "description": "Ip Pool ID to be associated with the logical switch.\n"
                },
                "macPoolId": {
                    "type": "string",
                    "description": "Mac Pool ID to be associated with the logical switch.\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                },
                "switchingProfileIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/VlanLogicalSwitchSwitchingProfileId:VlanLogicalSwitchSwitchingProfileId"
                    },
                    "description": "List of IDs of switching profiles (of various types) to be associated with this switch. Default switching profiles will be used if not specified.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/VlanLogicalSwitchTag:VlanLogicalSwitchTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this logical switch.\n"
                },
                "transportZoneId": {
                    "type": "string",
                    "description": "Transport Zone ID for the logical switch.\n"
                },
                "vlan": {
                    "type": "integer",
                    "description": "Vlan for the logical switch.\n"
                }
            },
            "required": [
                "displayName",
                "revision",
                "transportZoneId",
                "vlan"
            ],
            "inputProperties": {
                "addressBindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/VlanLogicalSwitchAddressBinding:VlanLogicalSwitchAddressBinding"
                    },
                    "description": "List of Address Bindings for the logical switch. This setting allows to provide bindings between IP address, mac Address and vlan.\n"
                },
                "adminState": {
                    "type": "string",
                    "description": "Admin state for the logical switch. Accepted values - 'UP' or 'DOWN'. The default value is 'UP'.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name, defaults to ID if not set.\n"
                },
                "ipPoolId": {
                    "type": "string",
                    "description": "Ip Pool ID to be associated with the logical switch.\n"
                },
                "macPoolId": {
                    "type": "string",
                    "description": "Mac Pool ID to be associated with the logical switch.\n"
                },
                "switchingProfileIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/VlanLogicalSwitchSwitchingProfileId:VlanLogicalSwitchSwitchingProfileId"
                    },
                    "description": "List of IDs of switching profiles (of various types) to be associated with this switch. Default switching profiles will be used if not specified.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/VlanLogicalSwitchTag:VlanLogicalSwitchTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this logical switch.\n"
                },
                "transportZoneId": {
                    "type": "string",
                    "description": "Transport Zone ID for the logical switch.\n",
                    "willReplaceOnChanges": true
                },
                "vlan": {
                    "type": "integer",
                    "description": "Vlan for the logical switch.\n"
                }
            },
            "requiredInputs": [
                "transportZoneId",
                "vlan"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VlanLogicalSwitch resources.\n",
                "properties": {
                    "addressBindings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/VlanLogicalSwitchAddressBinding:VlanLogicalSwitchAddressBinding"
                        },
                        "description": "List of Address Bindings for the logical switch. This setting allows to provide bindings between IP address, mac Address and vlan.\n"
                    },
                    "adminState": {
                        "type": "string",
                        "description": "Admin state for the logical switch. Accepted values - 'UP' or 'DOWN'. The default value is 'UP'.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name, defaults to ID if not set.\n"
                    },
                    "ipPoolId": {
                        "type": "string",
                        "description": "Ip Pool ID to be associated with the logical switch.\n"
                    },
                    "macPoolId": {
                        "type": "string",
                        "description": "Mac Pool ID to be associated with the logical switch.\n"
                    },
                    "revision": {
                        "type": "integer",
                        "description": "Indicates current revision number of the object as seen by NSX-T API server. This attribute can be useful for debugging.\n"
                    },
                    "switchingProfileIds": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/VlanLogicalSwitchSwitchingProfileId:VlanLogicalSwitchSwitchingProfileId"
                        },
                        "description": "List of IDs of switching profiles (of various types) to be associated with this switch. Default switching profiles will be used if not specified.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/VlanLogicalSwitchTag:VlanLogicalSwitchTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this logical switch.\n"
                    },
                    "transportZoneId": {
                        "type": "string",
                        "description": "Transport Zone ID for the logical switch.\n",
                        "willReplaceOnChanges": true
                    },
                    "vlan": {
                        "type": "integer",
                        "description": "Vlan for the logical switch.\n"
                    }
                },
                "type": "object"
            }
        },
        "nsxt:index/vmTags:VmTags": {
            "properties": {
                "instanceId": {
                    "type": "string",
                    "description": "BIOS Id of the Virtual Machine.\n"
                },
                "logicalPortTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/VmTagsLogicalPortTag:VmTagsLogicalPortTag"
                    },
                    "description": "A list of scope + tag pairs to associate with all logical ports that are automatically created for this VM.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/VmTagsTag:VmTagsTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this VM.\n"
                }
            },
            "required": [
                "instanceId"
            ],
            "inputProperties": {
                "instanceId": {
                    "type": "string",
                    "description": "BIOS Id of the Virtual Machine.\n"
                },
                "logicalPortTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/VmTagsLogicalPortTag:VmTagsLogicalPortTag"
                    },
                    "description": "A list of scope + tag pairs to associate with all logical ports that are automatically created for this VM.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/nsxt:index/VmTagsTag:VmTagsTag"
                    },
                    "description": "A list of scope + tag pairs to associate with this VM.\n"
                }
            },
            "requiredInputs": [
                "instanceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VmTags resources.\n",
                "properties": {
                    "instanceId": {
                        "type": "string",
                        "description": "BIOS Id of the Virtual Machine.\n"
                    },
                    "logicalPortTags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/VmTagsLogicalPortTag:VmTagsLogicalPortTag"
                        },
                        "description": "A list of scope + tag pairs to associate with all logical ports that are automatically created for this VM.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/VmTagsTag:VmTagsTag"
                        },
                        "description": "A list of scope + tag pairs to associate with this VM.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "nsxt:index/getCertificate:getCertificate": {
            "description": "This data source provides information about various types of certificates imported into NSX trust management.\n\nThis data source is applicable to NSX-T Policy Manager.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst cA = nsxt.getCertificate({\n    displayName: \"ca-cert\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\nc_a = nsxt.get_certificate(display_name=\"ca-cert\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var cA = Nsxt.GetCertificate.Invoke(new()\n    {\n        DisplayName = \"ca-cert\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetCertificate(ctx, \u0026nsxt.GetCertificateArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"ca-cert\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var cA = NsxtFunctions.getCertificate(GetCertificateArgs.builder()\n            .displayName(\"ca-cert\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  cA:\n    fn::invoke:\n      Function: nsxt:getCertificate\n      Arguments:\n        displayName: ca-cert\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCertificate.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Certificate.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name of the Certificate to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Certificate to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCertificate.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Certificate.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id"
                ]
            }
        },
        "nsxt:index/getComputeCollection:getComputeCollection": {
            "description": "This data source provides information about a Compute Collection configured on NSX.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst testCluster = nsxt.getComputeCollection({\n    displayName: \"Compute_Cluster\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest_cluster = nsxt.get_compute_collection(display_name=\"Compute_Cluster\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testCluster = Nsxt.GetComputeCollection.Invoke(new()\n    {\n        DisplayName = \"Compute_Cluster\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetComputeCollection(ctx, \u0026nsxt.GetComputeCollectionArgs{\n\t\t\tDisplayName: \"Compute_Cluster\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetComputeCollectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var testCluster = NsxtFunctions.getComputeCollection(GetComputeCollectionArgs.builder()\n            .displayName(\"Compute_Cluster\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  testCluster:\n    fn::invoke:\n      Function: nsxt:getComputeCollection\n      Arguments:\n        displayName: Compute_Cluster\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getComputeCollection.\n",
                "properties": {
                    "cmLocalId": {
                        "type": "string",
                        "description": "Local Id of the compute collection in the Compute Manager.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name of the Compute Collection to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Compute Collection to retrieve.\n"
                    },
                    "originId": {
                        "type": "string",
                        "description": "Id of the compute manager from where this Compute Collection was discovered.\n"
                    },
                    "originType": {
                        "type": "string",
                        "description": "ComputeCollection type like VC_Cluster. Here the Compute Manager type prefix would help in differentiating similar named Compute Collection types from different Compute Managers.\n"
                    }
                },
                "type": "object",
                "required": [
                    "displayName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getComputeCollection.\n",
                "properties": {
                    "cmLocalId": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "originId": {
                        "type": "string"
                    },
                    "originType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "displayName",
                    "id"
                ]
            }
        },
        "nsxt:index/getComputeManager:getComputeManager": {
            "description": "This data source provides information about a Compute Manager configured on NSX.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst testVcenter = nsxt.getComputeManager({\n    displayName: \"test-vcenter\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest_vcenter = nsxt.get_compute_manager(display_name=\"test-vcenter\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testVcenter = Nsxt.GetComputeManager.Invoke(new()\n    {\n        DisplayName = \"test-vcenter\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupComputeManager(ctx, \u0026nsxt.LookupComputeManagerArgs{\n\t\t\tDisplayName: \"test-vcenter\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetComputeManagerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var testVcenter = NsxtFunctions.getComputeManager(GetComputeManagerArgs.builder()\n            .displayName(\"test-vcenter\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  testVcenter:\n    fn::invoke:\n      Function: nsxt:getComputeManager\n      Arguments:\n        displayName: test-vcenter\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getComputeManager.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Compute Manager.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name of the Compute Manager to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Compute Manager to retrieve\n"
                    }
                },
                "type": "object",
                "required": [
                    "displayName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getComputeManager.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Compute Manager.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "server": {
                        "type": "string",
                        "description": "IP address or hostname of compute manager.\n"
                    }
                },
                "type": "object",
                "required": [
                    "displayName",
                    "id",
                    "server"
                ]
            }
        },
        "nsxt:index/getEdgeCluster:getEdgeCluster": {
            "description": "This data source provides information about Edge clusters configured in NSX. An Edge cluster is a collection of Edge nodes which can be deployed as either VM form-factor or bare-metal form-factor machines for connectivity between overlay logical switches and non-NSX underlay networking for north/south layer 2 or layer 3 connectivity. Each T0 router will be placed on one ore more Edge nodes in an Edge cluster therefore this data source is needed for the creation of T0 logical routers.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst edgeCluster1 = nsxt.getEdgeCluster({\n    displayName: \"edgecluster\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\nedge_cluster1 = nsxt.get_edge_cluster(display_name=\"edgecluster\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var edgeCluster1 = Nsxt.GetEdgeCluster.Invoke(new()\n    {\n        DisplayName = \"edgecluster\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupEdgeCluster(ctx, \u0026nsxt.LookupEdgeClusterArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"edgecluster\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetEdgeClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var edgeCluster1 = NsxtFunctions.getEdgeCluster(GetEdgeClusterArgs.builder()\n            .displayName(\"edgecluster\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  edgeCluster1:\n    fn::invoke:\n      Function: nsxt:getEdgeCluster\n      Arguments:\n        displayName: edgecluster\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEdgeCluster.\n",
                "properties": {
                    "deploymentType": {
                        "type": "string",
                        "description": "This field could show deployment_type of members. It would return UNKNOWN if there is no members, and return VIRTUAL_MACHINE|PHYSICAL_MACHINE if all Edge members are VIRTUAL_MACHINE|PHYSICAL_MACHINE.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the edge cluster.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Edge Cluster to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Edge Cluster to retrieve.\n"
                    },
                    "memberNodeType": {
                        "type": "string",
                        "description": "An Edge cluster is homogeneous collection of NSX transport nodes used for north/south connectivity between NSX logical networking and physical networking. Hence all transport nodes of the cluster must be of same type. This field shows the type of transport node,\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEdgeCluster.\n",
                "properties": {
                    "deploymentType": {
                        "type": "string",
                        "description": "This field could show deployment_type of members. It would return UNKNOWN if there is no members, and return VIRTUAL_MACHINE|PHYSICAL_MACHINE if all Edge members are VIRTUAL_MACHINE|PHYSICAL_MACHINE.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the edge cluster.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "memberNodeType": {
                        "type": "string",
                        "description": "An Edge cluster is homogeneous collection of NSX transport nodes used for north/south connectivity between NSX logical networking and physical networking. Hence all transport nodes of the cluster must be of same type. This field shows the type of transport node,\n"
                    }
                },
                "type": "object",
                "required": [
                    "deploymentType",
                    "description",
                    "displayName",
                    "id",
                    "memberNodeType"
                ]
            }
        },
        "nsxt:index/getFailureDomain:getFailureDomain": {
            "description": "This data source provides information about Failure Domain configured in NSX.\n\nThis resource is supported with NSX 3.0.0 onwards.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst failureDomain = nsxt.getFailureDomain({\n    displayName: \"failuredomain1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\nfailure_domain = nsxt.get_failure_domain(display_name=\"failuredomain1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var failureDomain = Nsxt.GetFailureDomain.Invoke(new()\n    {\n        DisplayName = \"failuredomain1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupFailureDomain(ctx, \u0026nsxt.LookupFailureDomainArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"failuredomain1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetFailureDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var failureDomain = NsxtFunctions.getFailureDomain(GetFailureDomainArgs.builder()\n            .displayName(\"failuredomain1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  failureDomain:\n    fn::invoke:\n      Function: nsxt:getFailureDomain\n      Arguments:\n        displayName: failuredomain1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFailureDomain.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Failure Domain to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Failure Domain to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFailureDomain.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id"
                ]
            }
        },
        "nsxt:index/getFirewallSection:getFirewallSection": {
            "description": "This data source provides information about firewall section configured on NSX. It can be useful to enforce placement of newly created firewall sections.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst blockAll = nsxt.getFirewallSection({\n    displayName: \"block all\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\nblock_all = nsxt.get_firewall_section(display_name=\"block all\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var blockAll = Nsxt.GetFirewallSection.Invoke(new()\n    {\n        DisplayName = \"block all\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupFirewallSection(ctx, \u0026nsxt.LookupFirewallSectionArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"block all\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetFirewallSectionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var blockAll = NsxtFunctions.getFirewallSection(GetFirewallSectionArgs.builder()\n            .displayName(\"block all\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  blockAll:\n    fn::invoke:\n      Function: nsxt:getFirewallSection\n      Arguments:\n        displayName: block all\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewallSection.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name of resource to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of resource to retrieve\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewallSection.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id"
                ]
            }
        },
        "nsxt:index/getIpPool:getIpPool": {
            "description": "This data source provides information about a IP Pool configured on NSX.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst ipPool = nsxt.getIpPool({\n    displayName: \"DefaultIpPool\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\nip_pool = nsxt.get_ip_pool(display_name=\"DefaultIpPool\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ipPool = Nsxt.GetIpPool.Invoke(new()\n    {\n        DisplayName = \"DefaultIpPool\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupIpPool(ctx, \u0026nsxt.LookupIpPoolArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"DefaultIpPool\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetIpPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ipPool = NsxtFunctions.getIpPool(GetIpPoolArgs.builder()\n            .displayName(\"DefaultIpPool\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ipPool:\n    fn::invoke:\n      Function: nsxt:getIpPool\n      Arguments:\n        displayName: DefaultIpPool\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIpPool.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the IP pool.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name of the IP pool to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of IP pool to retrieve\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIpPool.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the IP pool.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id"
                ]
            }
        },
        "nsxt:index/getLogicalTier0Router:getLogicalTier0Router": {
            "description": "This data source provides information about Tier 0 Logical Routers configured in NSX. A Tier 0 router is used to connect NSX networking with traditional physical networking. Tier 0 routers are placed on an Edge cluster and will exist on one or more Edge node depending on deployment settings (i.e. active/active or active/passive). A Tier 0 router forwards layer 3 IP packets and typically peers with a traditional physical router using BGP or can use static routing.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst tier0Router = nsxt.getLogicalTier0Router({\n    displayName: \"PLR1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntier0_router = nsxt.get_logical_tier0_router(display_name=\"PLR1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tier0Router = Nsxt.GetLogicalTier0Router.Invoke(new()\n    {\n        DisplayName = \"PLR1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupLogicalTier0Router(ctx, \u0026nsxt.LookupLogicalTier0RouterArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"PLR1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetLogicalTier0RouterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tier0Router = NsxtFunctions.getLogicalTier0Router(GetLogicalTier0RouterArgs.builder()\n            .displayName(\"PLR1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  tier0Router:\n    fn::invoke:\n      Function: nsxt:getLogicalTier0Router\n      Arguments:\n        displayName: PLR1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLogicalTier0Router.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Logical Router.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of Logical Router to retrieve.\n"
                    },
                    "edgeClusterId": {
                        "type": "string",
                        "description": "The id of the Edge Cluster where this Logical Router is placed.\n"
                    },
                    "highAvailabilityMode": {
                        "type": "string",
                        "description": "The high availability mode of this Logical Router.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Logical Router to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLogicalTier0Router.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Logical Router.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "edgeClusterId": {
                        "type": "string",
                        "description": "The id of the Edge Cluster where this Logical Router is placed.\n"
                    },
                    "highAvailabilityMode": {
                        "type": "string",
                        "description": "The high availability mode of this Logical Router.\n"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "edgeClusterId",
                    "highAvailabilityMode",
                    "id"
                ]
            }
        },
        "nsxt:index/getLogicalTier1Router:getLogicalTier1Router": {
            "description": "This data source provides information about Tier1 Logical Routers configured on NSX.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst tier1Router = nsxt.getLogicalTier1Router({\n    displayName: \"router1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntier1_router = nsxt.get_logical_tier1_router(display_name=\"router1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tier1Router = Nsxt.GetLogicalTier1Router.Invoke(new()\n    {\n        DisplayName = \"router1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupLogicalTier1Router(ctx, \u0026nsxt.LookupLogicalTier1RouterArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"router1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetLogicalTier1RouterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tier1Router = NsxtFunctions.getLogicalTier1Router(GetLogicalTier1RouterArgs.builder()\n            .displayName(\"router1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  tier1Router:\n    fn::invoke:\n      Function: nsxt:getLogicalTier1Router\n      Arguments:\n        displayName: router1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLogicalTier1Router.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Logical Router.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of Logical Router to retrieve.\n"
                    },
                    "edgeClusterId": {
                        "type": "string",
                        "description": "The id of the Edge cluster where this Logical Router is placed.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Logical Router to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLogicalTier1Router.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Logical Router.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "edgeClusterId": {
                        "type": "string",
                        "description": "The id of the Edge cluster where this Logical Router is placed.\n"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "edgeClusterId",
                    "id"
                ]
            }
        },
        "nsxt:index/getMacPool:getMacPool": {
            "description": "This data source provides information about a MAC Pool configured on NSX.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst macPool = nsxt.getMacPool({\n    displayName: \"DefaultMacPool\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\nmac_pool = nsxt.get_mac_pool(display_name=\"DefaultMacPool\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var macPool = Nsxt.GetMacPool.Invoke(new()\n    {\n        DisplayName = \"DefaultMacPool\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetMacPool(ctx, \u0026nsxt.GetMacPoolArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"DefaultMacPool\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetMacPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var macPool = NsxtFunctions.getMacPool(GetMacPoolArgs.builder()\n            .displayName(\"DefaultMacPool\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  macPool:\n    fn::invoke:\n      Function: nsxt:getMacPool\n      Arguments:\n        displayName: DefaultMacPool\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMacPool.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the MAC pool.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name of the MAC pool to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of MAC pool to retrieve\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMacPool.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the MAC pool.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id"
                ]
            }
        },
        "nsxt:index/getManagementCluster:getManagementCluster": {
            "description": "This data source provides information about the NSX-T management cluster.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst cluster = nsxt.getManagementCluster({});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ncluster = nsxt.get_management_cluster()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var cluster = Nsxt.GetManagementCluster.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetManagementCluster(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var cluster = NsxtFunctions.getManagementCluster();\n\n    }\n}\n```\n```yaml\nvariables:\n  cluster:\n    fn::invoke:\n      Function: nsxt:getManagementCluster\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getManagementCluster.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Unique identifier of this cluster.\n"
                    },
                    "nodeSha256Thumbprint": {
                        "type": "string",
                        "description": "SHA256 of certificate thumbprint of this manager node.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "nodeSha256Thumbprint"
                ]
            }
        },
        "nsxt:index/getNsGroup:getNsGroup": {
            "description": "This data source provides information about a network and security (NS) group in NSX. A NS group is used to group other objects into collections for application of other settings.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst nsGroup1 = nsxt.getNsGroup({\n    displayName: \"test group\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\nns_group1 = nsxt.get_ns_group(display_name=\"test group\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nsGroup1 = Nsxt.GetNsGroup.Invoke(new()\n    {\n        DisplayName = \"test group\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupNsGroup(ctx, \u0026nsxt.LookupNsGroupArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"test group\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetNsGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var nsGroup1 = NsxtFunctions.getNsGroup(GetNsGroupArgs.builder()\n            .displayName(\"test group\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  nsGroup1:\n    fn::invoke:\n      Function: nsxt:getNsGroup\n      Arguments:\n        displayName: test group\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNsGroup.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the NS group.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name of the NS group to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of NS group to retrieve\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNsGroup.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the NS group.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id"
                ]
            }
        },
        "nsxt:index/getNsGroups:getNsGroups": {
            "description": "This data source builds a \"name to uuid\" map of the whole NS Group table. Such map can be referenced in configuration to obtain object uuids by display name at a cost of single roudtrip to NSX, which improves apply and refresh\ntime at scale, compared to multiple instances of `nsxt.NsGroup` data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@SCC-Hyperscale-fr/nsxt\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst map = nsxt.getNsGroups({});\nconst s1 = new nsxt.FirewallSection(\"s1\", {\n    displayName: \"section1\",\n    appliedTos: [{\n        targetType: \"NSGroup\",\n        targetId: map.then(map =\u003e map.items?.group1),\n    }],\n    sectionType: \"LAYER3\",\n});\n```\n```python\nimport pulumi\nimport hyperscale_pulumi_nsxt as nsxt\nimport pulumi_nsxt as nsxt\n\nmap = nsxt.get_ns_groups()\ns1 = nsxt.FirewallSection(\"s1\",\n    display_name=\"section1\",\n    applied_tos=[nsxt.FirewallSectionAppliedToArgs(\n        target_type=\"NSGroup\",\n        target_id=map.items[\"group1\"],\n    )],\n    section_type=\"LAYER3\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\nusing Nsxt = SCC-Hyperscale-fr.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var map = Nsxt.GetNsGroups.Invoke();\n\n    var s1 = new Nsxt.FirewallSection(\"s1\", new()\n    {\n        DisplayName = \"section1\",\n        AppliedTos = new[]\n        {\n            new Nsxt.Inputs.FirewallSectionAppliedToArgs\n            {\n                TargetType = \"NSGroup\",\n                TargetId = map.Apply(getNsGroupsResult =\u003e getNsGroupsResult.Items?.Group1),\n            },\n        },\n        SectionType = \"LAYER3\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_map, err := nsxt.GetNsGroups(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.NewFirewallSection(ctx, \"s1\", \u0026nsxt.FirewallSectionArgs{\n\t\t\tDisplayName: pulumi.String(\"section1\"),\n\t\t\tAppliedTos: nsxt.FirewallSectionAppliedToArray{\n\t\t\t\t\u0026nsxt.FirewallSectionAppliedToArgs{\n\t\t\t\t\tTargetType: pulumi.String(\"NSGroup\"),\n\t\t\t\t\tTargetId:   *pulumi.String(_map.Items.Group1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSectionType: pulumi.String(\"LAYER3\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.FirewallSection;\nimport com.pulumi.nsxt.FirewallSectionArgs;\nimport com.pulumi.nsxt.inputs.FirewallSectionAppliedToArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var map = NsxtFunctions.getNsGroups();\n\n        var s1 = new FirewallSection(\"s1\", FirewallSectionArgs.builder()        \n            .displayName(\"section1\")\n            .appliedTos(FirewallSectionAppliedToArgs.builder()\n                .targetType(\"NSGroup\")\n                .targetId(map.applyValue(getNsGroupsResult -\u003e getNsGroupsResult.items().group1()))\n                .build())\n            .sectionType(\"LAYER3\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  s1:\n    type: nsxt:FirewallSection\n    properties:\n      displayName: section1\n      appliedTos:\n        - targetType: NSGroup\n          targetId: ${map.items.group1}\n      sectionType: LAYER3\nvariables:\n  map:\n    fn::invoke:\n      Function: nsxt:getNsGroups\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getNsGroups.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of ns group uuids keyed by display name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "items",
                    "id"
                ]
            }
        },
        "nsxt:index/getNsService:getNsService": {
            "description": "This data source provides information about a network and security (NS) service configured in NSX. NS services are either factory defined in NSX or can be defined by the NSX administrator. They provide a convenience name for a port/protocol pair that is often used in fire walling or load balancing.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst nsServiceDns = nsxt.getNsService({\n    displayName: \"DNS\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\nns_service_dns = nsxt.get_ns_service(display_name=\"DNS\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nsServiceDns = Nsxt.GetNsService.Invoke(new()\n    {\n        DisplayName = \"DNS\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetNsService(ctx, \u0026nsxt.GetNsServiceArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"DNS\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetNsServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var nsServiceDns = NsxtFunctions.getNsService(GetNsServiceArgs.builder()\n            .displayName(\"DNS\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  nsServiceDns:\n    fn::invoke:\n      Function: nsxt:getNsService\n      Arguments:\n        displayName: DNS\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNsService.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the NS service.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name of the NS service to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of NS service to retrieve\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getNsService.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the NS service.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id"
                ]
            }
        },
        "nsxt:index/getNsServices:getNsServices": {
            "description": "This data source builds a \"name to uuid\" map of the whole NS Services table. Such map can be referenced in configuration to obtain object uuids by display name at a cost of single roudtrip to NSX, which improves apply and refresh\ntime at scale, compared to multiple instances of `nsxt.getNsService` data source.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@SCC-Hyperscale-fr/nsxt\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst map = nsxt.getNsServices({});\nconst s1 = new nsxt.FirewallSection(\"s1\", {\n    displayName: \"section1\",\n    rules: [{\n        displayName: \"in_rule\",\n        action: \"DROP\",\n        direction: \"IN\",\n        services: [{\n            targetType: \"NSService\",\n            targetId: map.then(map =\u003e map.items?.service1),\n        }],\n    }],\n    sectionType: \"LAYER3\",\n});\n```\n```python\nimport pulumi\nimport hyperscale_pulumi_nsxt as nsxt\nimport pulumi_nsxt as nsxt\n\nmap = nsxt.get_ns_services()\ns1 = nsxt.FirewallSection(\"s1\",\n    display_name=\"section1\",\n    rules=[nsxt.FirewallSectionRuleArgs(\n        display_name=\"in_rule\",\n        action=\"DROP\",\n        direction=\"IN\",\n        services=[nsxt.FirewallSectionRuleServiceArgs(\n            target_type=\"NSService\",\n            target_id=map.items[\"service1\"],\n        )],\n    )],\n    section_type=\"LAYER3\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\nusing Nsxt = SCC-Hyperscale-fr.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var map = Nsxt.GetNsServices.Invoke();\n\n    var s1 = new Nsxt.FirewallSection(\"s1\", new()\n    {\n        DisplayName = \"section1\",\n        Rules = new[]\n        {\n            new Nsxt.Inputs.FirewallSectionRuleArgs\n            {\n                DisplayName = \"in_rule\",\n                Action = \"DROP\",\n                Direction = \"IN\",\n                Services = new[]\n                {\n                    new Nsxt.Inputs.FirewallSectionRuleServiceArgs\n                    {\n                        TargetType = \"NSService\",\n                        TargetId = map.Apply(getNsServicesResult =\u003e getNsServicesResult.Items?.Service1),\n                    },\n                },\n            },\n        },\n        SectionType = \"LAYER3\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_map, err := nsxt.GetNsServices(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.NewFirewallSection(ctx, \"s1\", \u0026nsxt.FirewallSectionArgs{\n\t\t\tDisplayName: pulumi.String(\"section1\"),\n\t\t\tRules: nsxt.FirewallSectionRuleArray{\n\t\t\t\t\u0026nsxt.FirewallSectionRuleArgs{\n\t\t\t\t\tDisplayName: pulumi.String(\"in_rule\"),\n\t\t\t\t\tAction:      pulumi.String(\"DROP\"),\n\t\t\t\t\tDirection:   pulumi.String(\"IN\"),\n\t\t\t\t\tServices: nsxt.FirewallSectionRuleServiceArray{\n\t\t\t\t\t\t\u0026nsxt.FirewallSectionRuleServiceArgs{\n\t\t\t\t\t\t\tTargetType: pulumi.String(\"NSService\"),\n\t\t\t\t\t\t\tTargetId:   *pulumi.String(_map.Items.Service1),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tSectionType: pulumi.String(\"LAYER3\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.FirewallSection;\nimport com.pulumi.nsxt.FirewallSectionArgs;\nimport com.pulumi.nsxt.inputs.FirewallSectionRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var map = NsxtFunctions.getNsServices();\n\n        var s1 = new FirewallSection(\"s1\", FirewallSectionArgs.builder()        \n            .displayName(\"section1\")\n            .rules(FirewallSectionRuleArgs.builder()\n                .displayName(\"in_rule\")\n                .action(\"DROP\")\n                .direction(\"IN\")\n                .services(FirewallSectionRuleServiceArgs.builder()\n                    .targetType(\"NSService\")\n                    .targetId(map.applyValue(getNsServicesResult -\u003e getNsServicesResult.items().service1()))\n                    .build())\n                .build())\n            .sectionType(\"LAYER3\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  s1:\n    type: nsxt:FirewallSection\n    properties:\n      displayName: section1\n      rules:\n        - displayName: in_rule\n          action: DROP\n          direction: IN\n          services:\n            - targetType: NSService\n              targetId: ${map.items.service1}\n      sectionType: LAYER3\nvariables:\n  map:\n    fn::invoke:\n      Function: nsxt:getNsServices\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getNsServices.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of ns service uuids keyed by display name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "items",
                    "id"
                ]
            }
        },
        "nsxt:index/getPolicyBfdProfile:getPolicyBfdProfile": {
            "description": "This data source provides information about policy BFD Profile configured on NSX.\nThis data source is applicable to NSX Global Manager, NSX Policy Manager and VMC (NSX version 3.0.0 onwards).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyBfdProfile({\n    displayName: \"profile1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_bfd_profile(display_name=\"profile1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyBfdProfile.Invoke(new()\n    {\n        DisplayName = \"profile1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetPolicyBfdProfile(ctx, \u0026nsxt.GetPolicyBfdProfileArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"profile1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyBfdProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyBfdProfile(GetPolicyBfdProfileArgs.builder()\n            .displayName(\"profile1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyBfdProfile\n      Arguments:\n        displayName: profile1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyBfdProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Profile to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Profile to retrieve. If ID is specified, no additional argument should be configured.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyBfdProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyBridgeProfile:getPolicyBridgeProfile": {
            "description": "This data source provides information about Edge Bridge Profile configured on NSX.\nThis data source is applicable to NSX Policy Manager.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyBridgeProfile({\n    displayName: \"profile1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_bridge_profile(display_name=\"profile1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyBridgeProfile.Invoke(new()\n    {\n        DisplayName = \"profile1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetPolicyBridgeProfile(ctx, \u0026nsxt.GetPolicyBridgeProfileArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"profile1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyBridgeProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyBridgeProfile(GetPolicyBridgeProfileArgs.builder()\n            .displayName(\"profile1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyBridgeProfile\n      Arguments:\n        displayName: profile1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyBridgeProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Profile to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Profile to retrieve. If ID is specified, no additional argument should be configured.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyBridgeProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyCertificate:getPolicyCertificate": {
            "description": "This data source provides information about Service Certificate configured on NSX Policy.\n\nThis data source is applicable to NSX Global Manager, and NSX Policy Manager.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyCertificate({\n    displayName: \"certificate1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_certificate(display_name=\"certificate1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyCertificate.Invoke(new()\n    {\n        DisplayName = \"certificate1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetPolicyCertificate(ctx, \u0026nsxt.GetPolicyCertificateArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"certificate1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyCertificate(GetPolicyCertificateArgs.builder()\n            .displayName(\"certificate1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyCertificate\n      Arguments:\n        displayName: certificate1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyCertificate.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Certificate to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Certificate to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyCertificate.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyContextProfile:getPolicyContextProfile": {
            "description": "This data source provides information about Policy Context Profile configured on NSX.\n\nThis data source is applicable to NSX Global Manager and NSX Policy Manager.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst diameter = nsxt.getPolicyContextProfile({\n    displayName: \"DIAMETER\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndiameter = nsxt.get_policy_context_profile(display_name=\"DIAMETER\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var diameter = Nsxt.GetPolicyContextProfile.Invoke(new()\n    {\n        DisplayName = \"DIAMETER\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyContextProfile(ctx, \u0026nsxt.LookupPolicyContextProfileArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"DIAMETER\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyContextProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var diameter = NsxtFunctions.getPolicyContextProfile(GetPolicyContextProfileArgs.builder()\n            .displayName(\"DIAMETER\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  diameter:\n    fn::invoke:\n      Function: nsxt:getPolicyContextProfile\n      Arguments:\n        displayName: DIAMETER\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst demoprof = demoproj.then(demoproj =\u003e nsxt.getPolicyContextProfile({\n    context: {\n        projectId: demoproj.id,\n    },\n    displayName: \"demoprof\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\ndemoprof = nsxt.get_policy_context_profile(context=nsxt.GetPolicyContextProfileContextArgs(\n        project_id=demoproj.id,\n    ),\n    display_name=\"demoprof\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var demoprof = Nsxt.GetPolicyContextProfile.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicyContextProfileContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        DisplayName = \"demoprof\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.LookupPolicyContextProfile(ctx, \u0026nsxt.LookupPolicyContextProfileArgs{\n\t\t\tContext: nsxt.GetPolicyContextProfileContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tDisplayName: pulumi.StringRef(\"demoprof\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyContextProfileArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyContextProfileContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var demoprof = NsxtFunctions.getPolicyContextProfile(GetPolicyContextProfileArgs.builder()\n            .context(GetPolicyContextProfileContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .displayName(\"demoprof\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  demoprof:\n    fn::invoke:\n      Function: nsxt:getPolicyContextProfile\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        displayName: demoprof\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyContextProfile.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyContextProfileContext:getPolicyContextProfileContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Profile to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Profile to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyContextProfile.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyContextProfileContext:getPolicyContextProfileContext"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyDhcpServer:getPolicyDhcpServer": {
            "description": "This data source provides information about policy DHCP servers configured on NSX.\n\nThis data source is applicable to NSX Policy Manager, NSX Global Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyDhcpServer({\n    displayName: \"dhcp-2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_dhcp_server(display_name=\"dhcp-2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyDhcpServer.Invoke(new()\n    {\n        DisplayName = \"dhcp-2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyDhcpServer(ctx, \u0026nsxt.LookupPolicyDhcpServerArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"dhcp-2\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyDhcpServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyDhcpServer(GetPolicyDhcpServerArgs.builder()\n            .displayName(\"dhcp-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyDhcpServer\n      Arguments:\n        displayName: dhcp-2\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst demodhcp = demoproj.then(demoproj =\u003e nsxt.getPolicyDhcpServer({\n    context: {\n        projectId: demoproj.id,\n    },\n    displayName: \"demodhcp\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\ndemodhcp = nsxt.get_policy_dhcp_server(context=nsxt.GetPolicyDhcpServerContextArgs(\n        project_id=demoproj.id,\n    ),\n    display_name=\"demodhcp\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var demodhcp = Nsxt.GetPolicyDhcpServer.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicyDhcpServerContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        DisplayName = \"demodhcp\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.LookupPolicyDhcpServer(ctx, \u0026nsxt.LookupPolicyDhcpServerArgs{\n\t\t\tContext: nsxt.GetPolicyDhcpServerContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tDisplayName: pulumi.StringRef(\"demodhcp\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyDhcpServerArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyDhcpServerContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var demodhcp = NsxtFunctions.getPolicyDhcpServer(GetPolicyDhcpServerArgs.builder()\n            .context(GetPolicyDhcpServerContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .displayName(\"demodhcp\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  demodhcp:\n    fn::invoke:\n      Function: nsxt:getPolicyDhcpServer\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        displayName: demodhcp\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyDhcpServer.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyDhcpServerContext:getPolicyDhcpServerContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of DHCP server to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of DHCP Server to retrieve. If ID is specified, no additional argument should be configured.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyDhcpServer.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyDhcpServerContext:getPolicyDhcpServerContext"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyEdgeCluster:getPolicyEdgeCluster": {
            "description": "This data source provides information about policy edge cluster configured on NSX.\n\nThis data source is applicable to NSX Global Manager, NSX Policy Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst ec = nsxt.getPolicyEdgeCluster({\n    displayName: \"ec\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\nec = nsxt.get_policy_edge_cluster(display_name=\"ec\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ec = Nsxt.GetPolicyEdgeCluster.Invoke(new()\n    {\n        DisplayName = \"ec\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetPolicyEdgeCluster(ctx, \u0026nsxt.GetPolicyEdgeClusterArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"ec\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyEdgeClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ec = NsxtFunctions.getPolicyEdgeCluster(GetPolicyEdgeClusterArgs.builder()\n            .displayName(\"ec\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ec:\n    fn::invoke:\n      Function: nsxt:getPolicyEdgeCluster\n      Arguments:\n        displayName: ec\n```\n\nNote: This usage is for Global Manager only.\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst paris = nsxt.getPolicySite({\n    displayName: \"Paris\",\n});\nconst gmEc = paris.then(paris =\u003e nsxt.getPolicyEdgeCluster({\n    displayName: \"ec\",\n    sitePath: paris.path,\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\nparis = nsxt.get_policy_site(display_name=\"Paris\")\ngm_ec = nsxt.get_policy_edge_cluster(display_name=\"ec\",\n    site_path=paris.path)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var paris = Nsxt.GetPolicySite.Invoke(new()\n    {\n        DisplayName = \"Paris\",\n    });\n\n    var gmEc = Nsxt.GetPolicyEdgeCluster.Invoke(new()\n    {\n        DisplayName = \"ec\",\n        SitePath = paris.Apply(getPolicySiteResult =\u003e getPolicySiteResult.Path),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tparis, err := nsxt.GetPolicySite(ctx, \u0026nsxt.GetPolicySiteArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"Paris\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.GetPolicyEdgeCluster(ctx, \u0026nsxt.GetPolicyEdgeClusterArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"ec\"),\n\t\t\tSitePath:    pulumi.StringRef(paris.Path),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicySiteArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyEdgeClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var paris = NsxtFunctions.getPolicySite(GetPolicySiteArgs.builder()\n            .displayName(\"Paris\")\n            .build());\n\n        final var gmEc = NsxtFunctions.getPolicyEdgeCluster(GetPolicyEdgeClusterArgs.builder()\n            .displayName(\"ec\")\n            .sitePath(paris.applyValue(getPolicySiteResult -\u003e getPolicySiteResult.path()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  paris:\n    fn::invoke:\n      Function: nsxt:getPolicySite\n      Arguments:\n        displayName: Paris\n  gmEc:\n    fn::invoke:\n      Function: nsxt:getPolicyEdgeCluster\n      Arguments:\n        displayName: ec\n        sitePath: ${paris.path}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyEdgeCluster.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the edge cluster to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the edge cluster to retrieve.\n"
                    },
                    "sitePath": {
                        "type": "string",
                        "description": "The path of the site which the Edge Cluster belongs to, this configuration is required for global manager only. `path` field of the existing `nsxt.getPolicySite` can be used here. If a single edge cluster is configured on site, `id` and `display_name` can be omitted in configuration, otherwise either of these is required to specify the desired cluster.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyEdgeCluster.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "sitePath": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyEdgeNode:getPolicyEdgeNode": {
            "description": "This data source provides information about policy edge nodes configured on NSX.\n\nThis data source is applicable to NSX Global Manager and NSX Policy Manager.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst ec = nsxt.getPolicyEdgeCluster({\n    displayName: \"ec\",\n});\nconst node1 = ec.then(ec =\u003e nsxt.getPolicyEdgeNode({\n    edgeClusterPath: ec.path,\n    memberIndex: 0,\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\nec = nsxt.get_policy_edge_cluster(display_name=\"ec\")\nnode1 = nsxt.get_policy_edge_node(edge_cluster_path=ec.path,\n    member_index=0)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ec = Nsxt.GetPolicyEdgeCluster.Invoke(new()\n    {\n        DisplayName = \"ec\",\n    });\n\n    var node1 = Nsxt.GetPolicyEdgeNode.Invoke(new()\n    {\n        EdgeClusterPath = ec.Apply(getPolicyEdgeClusterResult =\u003e getPolicyEdgeClusterResult.Path),\n        MemberIndex = 0,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tec, err := nsxt.GetPolicyEdgeCluster(ctx, \u0026nsxt.GetPolicyEdgeClusterArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"ec\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.GetPolicyEdgeNode(ctx, \u0026nsxt.GetPolicyEdgeNodeArgs{\n\t\t\tEdgeClusterPath: ec.Path,\n\t\t\tMemberIndex:     pulumi.IntRef(0),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyEdgeClusterArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyEdgeNodeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ec = NsxtFunctions.getPolicyEdgeCluster(GetPolicyEdgeClusterArgs.builder()\n            .displayName(\"ec\")\n            .build());\n\n        final var node1 = NsxtFunctions.getPolicyEdgeNode(GetPolicyEdgeNodeArgs.builder()\n            .edgeClusterPath(ec.applyValue(getPolicyEdgeClusterResult -\u003e getPolicyEdgeClusterResult.path()))\n            .memberIndex(0)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ec:\n    fn::invoke:\n      Function: nsxt:getPolicyEdgeCluster\n      Arguments:\n        displayName: ec\n  node1:\n    fn::invoke:\n      Function: nsxt:getPolicyEdgeNode\n      Arguments:\n        edgeClusterPath: ${ec.path}\n        memberIndex: 0\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyEdgeNode.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the edge node to retrieve.\n"
                    },
                    "edgeClusterPath": {
                        "type": "string",
                        "description": "The path of edge cluster where to which this node belongs.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the edge node to retrieve.\n"
                    },
                    "memberIndex": {
                        "type": "integer",
                        "description": "Member index of the node in edge cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "edgeClusterPath"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyEdgeNode.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "edgeClusterPath": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "memberIndex": {
                        "type": "integer"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "edgeClusterPath",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyGatewayLocaleService:getPolicyGatewayLocaleService": {
            "description": "This data source provides information about certain locale service for Tier-0 or Tier-1 gateway configured on NSX.\n\nThis data source is applicable to NSX Policy Manager, NSX Global Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyGatewayLocaleService({\n    gatewayPath: data.nsxt_policy_tier0_gateway.path,\n    displayName: \"london\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_gateway_locale_service(gateway_path=data[\"nsxt_policy_tier0_gateway\"][\"path\"],\n    display_name=\"london\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyGatewayLocaleService.Invoke(new()\n    {\n        GatewayPath = data.Nsxt_policy_tier0_gateway.Path,\n        DisplayName = \"london\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetPolicyGatewayLocaleService(ctx, \u0026nsxt.GetPolicyGatewayLocaleServiceArgs{\n\t\t\tGatewayPath: data.Nsxt_policy_tier0_gateway.Path,\n\t\t\tDisplayName: pulumi.StringRef(\"london\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyGatewayLocaleServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyGatewayLocaleService(GetPolicyGatewayLocaleServiceArgs.builder()\n            .gatewayPath(data.nsxt_policy_tier0_gateway().path())\n            .displayName(\"london\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyGatewayLocaleService\n      Arguments:\n        gatewayPath: ${data.nsxt_policy_tier0_gateway.path}\n        displayName: london\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst demoserv = demoproj.then(demoproj =\u003e nsxt.getPolicyGatewayLocaleService({\n    context: {\n        projectId: demoproj.id,\n    },\n    gatewayPath: data.nsxt_policy_tier1_gateway.path,\n    displayName: \"demoserv\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\ndemoserv = nsxt.get_policy_gateway_locale_service(context=nsxt.GetPolicyGatewayLocaleServiceContextArgs(\n        project_id=demoproj.id,\n    ),\n    gateway_path=data[\"nsxt_policy_tier1_gateway\"][\"path\"],\n    display_name=\"demoserv\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var demoserv = Nsxt.GetPolicyGatewayLocaleService.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicyGatewayLocaleServiceContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        GatewayPath = data.Nsxt_policy_tier1_gateway.Path,\n        DisplayName = \"demoserv\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.GetPolicyGatewayLocaleService(ctx, \u0026nsxt.GetPolicyGatewayLocaleServiceArgs{\n\t\t\tContext: nsxt.GetPolicyGatewayLocaleServiceContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tGatewayPath: data.Nsxt_policy_tier1_gateway.Path,\n\t\t\tDisplayName: pulumi.StringRef(\"demoserv\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyGatewayLocaleServiceArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyGatewayLocaleServiceContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var demoserv = NsxtFunctions.getPolicyGatewayLocaleService(GetPolicyGatewayLocaleServiceArgs.builder()\n            .context(GetPolicyGatewayLocaleServiceContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .gatewayPath(data.nsxt_policy_tier1_gateway().path())\n            .displayName(\"demoserv\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  demoserv:\n    fn::invoke:\n      Function: nsxt:getPolicyGatewayLocaleService\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        gatewayPath: ${data.nsxt_policy_tier1_gateway.path}\n        displayName: demoserv\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyGatewayLocaleService.\n",
                "properties": {
                    "bgpPath": {
                        "type": "string",
                        "description": "Path for BGP configuration configured on this service.\n"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyGatewayLocaleServiceContext:getPolicyGatewayLocaleServiceContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name or prefix of locale service to retrieve.\n"
                    },
                    "edgeClusterPath": {
                        "type": "string",
                        "description": "The path of the Edge cluster configured on this service.\n"
                    },
                    "gatewayPath": {
                        "type": "string",
                        "description": "Path for the gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of locale service gateway to retrieve.\n"
                    }
                },
                "type": "object",
                "required": [
                    "gatewayPath"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyGatewayLocaleService.\n",
                "properties": {
                    "bgpPath": {
                        "type": "string",
                        "description": "Path for BGP configuration configured on this service.\n"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyGatewayLocaleServiceContext:getPolicyGatewayLocaleServiceContext"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "edgeClusterPath": {
                        "type": "string",
                        "description": "The path of the Edge cluster configured on this service.\n"
                    },
                    "gatewayPath": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bgpPath",
                    "description",
                    "displayName",
                    "edgeClusterPath",
                    "gatewayPath",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyGatewayPolicy:getPolicyGatewayPolicy": {
            "description": "This data source provides information about policy Gateway Policues configured on NSX.\nThis data source can be useful for fetching policy path to use in `nsxt.PolicyPredefinedGatewayPolicy` resource.\n\nThis data source is applicable to NSX Policy Manager, NSX Global Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst predefined = nsxt.getPolicyGatewayPolicy({\n    displayName: \"default\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\npredefined = nsxt.get_policy_gateway_policy(display_name=\"default\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var predefined = Nsxt.GetPolicyGatewayPolicy.Invoke(new()\n    {\n        DisplayName = \"default\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyGatewayPolicy(ctx, \u0026nsxt.LookupPolicyGatewayPolicyArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"default\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyGatewayPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var predefined = NsxtFunctions.getPolicyGatewayPolicy(GetPolicyGatewayPolicyArgs.builder()\n            .displayName(\"default\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  predefined:\n    fn::invoke:\n      Function: nsxt:getPolicyGatewayPolicy\n      Arguments:\n        displayName: default\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst demopolicy = demoproj.then(demoproj =\u003e nsxt.getPolicyGatewayPolicy({\n    context: {\n        projectId: demoproj.id,\n    },\n    displayName: \"default\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\ndemopolicy = nsxt.get_policy_gateway_policy(context=nsxt.GetPolicyGatewayPolicyContextArgs(\n        project_id=demoproj.id,\n    ),\n    display_name=\"default\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var demopolicy = Nsxt.GetPolicyGatewayPolicy.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicyGatewayPolicyContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        DisplayName = \"default\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.LookupPolicyGatewayPolicy(ctx, \u0026nsxt.LookupPolicyGatewayPolicyArgs{\n\t\t\tContext: nsxt.GetPolicyGatewayPolicyContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tDisplayName: pulumi.StringRef(\"default\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyGatewayPolicyArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyGatewayPolicyContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var demopolicy = NsxtFunctions.getPolicyGatewayPolicy(GetPolicyGatewayPolicyArgs.builder()\n            .context(GetPolicyGatewayPolicyContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .displayName(\"default\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  demopolicy:\n    fn::invoke:\n      Function: nsxt:getPolicyGatewayPolicy\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        displayName: default\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyGatewayPolicy.\n",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "Category of the policy to retrieve. May be useful to retrieve default policy.\n"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyGatewayPolicyContext:getPolicyGatewayPolicyContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the policy to retrieve.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain of the policy, defaults to `default`. Needs to be specified in VMC environment.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the gateway policy to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyGatewayPolicy.\n",
                "properties": {
                    "category": {
                        "type": "string"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyGatewayPolicyContext:getPolicyGatewayPolicyContext"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "category",
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyGatewayPrefixList:getPolicyGatewayPrefixList": {
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyGatewayPrefixList.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "gatewayPath": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "displayName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyGatewayPrefixList.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "gatewayPath": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyGatewayQosProfile:getPolicyGatewayQosProfile": {
            "description": "This data source provides information about policy Gateway Quality of Service Profile configured on NSX.\n\nThis data source is applicable to NSX Global Manager, and NSX Policy Manager.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyGatewayQosProfile({\n    displayName: \"gateway-qos-profile1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_gateway_qos_profile(display_name=\"gateway-qos-profile1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyGatewayQosProfile.Invoke(new()\n    {\n        DisplayName = \"gateway-qos-profile1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyGatewayQosProfile(ctx, \u0026nsxt.LookupPolicyGatewayQosProfileArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"gateway-qos-profile1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyGatewayQosProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyGatewayQosProfile(GetPolicyGatewayQosProfileArgs.builder()\n            .displayName(\"gateway-qos-profile1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyGatewayQosProfile\n      Arguments:\n        displayName: gateway-qos-profile1\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst qosprof = demoproj.then(demoproj =\u003e nsxt.getPolicyGatewayQosProfile({\n    context: {\n        projectId: demoproj.id,\n    },\n    displayName: \"qosprof\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\nqosprof = nsxt.get_policy_gateway_qos_profile(context=nsxt.GetPolicyGatewayQosProfileContextArgs(\n        project_id=demoproj.id,\n    ),\n    display_name=\"qosprof\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var qosprof = Nsxt.GetPolicyGatewayQosProfile.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicyGatewayQosProfileContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        DisplayName = \"qosprof\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.LookupPolicyGatewayQosProfile(ctx, \u0026nsxt.LookupPolicyGatewayQosProfileArgs{\n\t\t\tContext: nsxt.GetPolicyGatewayQosProfileContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tDisplayName: pulumi.StringRef(\"qosprof\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyGatewayQosProfileArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyGatewayQosProfileContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var qosprof = NsxtFunctions.getPolicyGatewayQosProfile(GetPolicyGatewayQosProfileArgs.builder()\n            .context(GetPolicyGatewayQosProfileContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .displayName(\"qosprof\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  qosprof:\n    fn::invoke:\n      Function: nsxt:getPolicyGatewayQosProfile\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        displayName: qosprof\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyGatewayQosProfile.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyGatewayQosProfileContext:getPolicyGatewayQosProfileContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Gateway QoS Profile to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of GatewayQosProfile to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyGatewayQosProfile.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyGatewayQosProfileContext:getPolicyGatewayQosProfileContext"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyGatewayRouteMap:getPolicyGatewayRouteMap": {
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyGatewayRouteMap.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "gatewayPath": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "displayName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyGatewayRouteMap.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "gatewayPath": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyGroup:getPolicyGroup": {
            "description": "This data source provides information about an inventory Group configured on NSX.\n\nThis data source is applicable to NSX Policy Manager, NSX Global Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyGroup({\n    displayName: \"group1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_group(display_name=\"group1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyGroup.Invoke(new()\n    {\n        DisplayName = \"group1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyGroup(ctx, \u0026nsxt.LookupPolicyGroupArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"group1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyGroup(GetPolicyGroupArgs.builder()\n            .displayName(\"group1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyGroup\n      Arguments:\n        displayName: group1\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst demogroup = demoproj.then(demoproj =\u003e nsxt.getPolicyGroup({\n    context: {\n        projectId: demoproj.id,\n    },\n    displayName: \"demogroup\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\ndemogroup = nsxt.get_policy_group(context=nsxt.GetPolicyGroupContextArgs(\n        project_id=demoproj.id,\n    ),\n    display_name=\"demogroup\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var demogroup = Nsxt.GetPolicyGroup.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicyGroupContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        DisplayName = \"demogroup\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.LookupPolicyGroup(ctx, \u0026nsxt.LookupPolicyGroupArgs{\n\t\t\tContext: nsxt.GetPolicyGroupContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tDisplayName: pulumi.StringRef(\"demogroup\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyGroupArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyGroupContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var demogroup = NsxtFunctions.getPolicyGroup(GetPolicyGroupArgs.builder()\n            .context(GetPolicyGroupContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .displayName(\"demogroup\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  demogroup:\n    fn::invoke:\n      Function: nsxt:getPolicyGroup\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        displayName: demogroup\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyGroup.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyGroupContext:getPolicyGroupContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Group to retrieve.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain this Group belongs to. For VMware Cloud on AWS use `cgw`. For Global Manager, please use site id for this field. If not specified, this field is default to `default`.\n",
                        "willReplaceOnChanges": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Group to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyGroup.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyGroupContext:getPolicyGroupContext"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyIntrusionServiceProfile:getPolicyIntrusionServiceProfile": {
            "description": "This data source provides information about policy IDS Profile configured on NSX.\nThis data source is applicable to NSX Policy Manager and VMC (NSX version 3.0.0 onwards).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyIntrusionServiceProfile({\n    displayName: \"DefaultIDSProfile\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_intrusion_service_profile(display_name=\"DefaultIDSProfile\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyIntrusionServiceProfile.Invoke(new()\n    {\n        DisplayName = \"DefaultIDSProfile\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyIntrusionServiceProfile(ctx, \u0026nsxt.LookupPolicyIntrusionServiceProfileArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"DefaultIDSProfile\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyIntrusionServiceProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyIntrusionServiceProfile(GetPolicyIntrusionServiceProfileArgs.builder()\n            .displayName(\"DefaultIDSProfile\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyIntrusionServiceProfile\n      Arguments:\n        displayName: DefaultIDSProfile\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyIntrusionServiceProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Profile to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Profile to retrieve. If ID is specified, no additional argument should be configured.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyIntrusionServiceProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyIpBlock:getPolicyIpBlock": {
            "description": "This data source provides information about Policy IP Blocks configured on NSX.\n\nThis data source is applicable to NSX Policy Manager.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyIpBlock({\n    displayName: \"ipblock1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_ip_block(display_name=\"ipblock1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyIpBlock.Invoke(new()\n    {\n        DisplayName = \"ipblock1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyIpBlock(ctx, \u0026nsxt.LookupPolicyIpBlockArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"ipblock1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyIpBlockArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyIpBlock(GetPolicyIpBlockArgs.builder()\n            .displayName(\"ipblock1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyIpBlock\n      Arguments:\n        displayName: ipblock1\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst demoblock = demoproj.then(demoproj =\u003e nsxt.getPolicyIpBlock({\n    context: {\n        projectId: demoproj.id,\n    },\n    displayName: \"demoblock\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\ndemoblock = nsxt.get_policy_ip_block(context=nsxt.GetPolicyIpBlockContextArgs(\n        project_id=demoproj.id,\n    ),\n    display_name=\"demoblock\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var demoblock = Nsxt.GetPolicyIpBlock.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicyIpBlockContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        DisplayName = \"demoblock\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.LookupPolicyIpBlock(ctx, \u0026nsxt.LookupPolicyIpBlockArgs{\n\t\t\tContext: nsxt.GetPolicyIpBlockContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tDisplayName: pulumi.StringRef(\"demoblock\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyIpBlockArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyIpBlockContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var demoblock = NsxtFunctions.getPolicyIpBlock(GetPolicyIpBlockArgs.builder()\n            .context(GetPolicyIpBlockContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .displayName(\"demoblock\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  demoblock:\n    fn::invoke:\n      Function: nsxt:getPolicyIpBlock\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        displayName: demoblock\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyIpBlock.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyIpBlockContext:getPolicyIpBlockContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the IP Block to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of IP Block to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyIpBlock.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyIpBlockContext:getPolicyIpBlockContext"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyIpDiscoveryProfile:getPolicyIpDiscoveryProfile": {
            "description": "This data source provides information about Policy IP Discovery Profile configured on NSX.\n\nThis data source is applicable to NSX Global Manager, NSX Policy Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyIpDiscoveryProfile({\n    displayName: \"ip-discovery-profile1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_ip_discovery_profile(display_name=\"ip-discovery-profile1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyIpDiscoveryProfile.Invoke(new()\n    {\n        DisplayName = \"ip-discovery-profile1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyIpDiscoveryProfile(ctx, \u0026nsxt.LookupPolicyIpDiscoveryProfileArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"ip-discovery-profile1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyIpDiscoveryProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyIpDiscoveryProfile(GetPolicyIpDiscoveryProfileArgs.builder()\n            .displayName(\"ip-discovery-profile1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyIpDiscoveryProfile\n      Arguments:\n        displayName: ip-discovery-profile1\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst demoprof = demoproj.then(demoproj =\u003e nsxt.getPolicyIpDiscoveryProfile({\n    context: {\n        projectId: demoproj.id,\n    },\n    displayName: \"demoprof\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\ndemoprof = nsxt.get_policy_ip_discovery_profile(context=nsxt.GetPolicyIpDiscoveryProfileContextArgs(\n        project_id=demoproj.id,\n    ),\n    display_name=\"demoprof\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var demoprof = Nsxt.GetPolicyIpDiscoveryProfile.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicyIpDiscoveryProfileContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        DisplayName = \"demoprof\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.LookupPolicyIpDiscoveryProfile(ctx, \u0026nsxt.LookupPolicyIpDiscoveryProfileArgs{\n\t\t\tContext: nsxt.GetPolicyIpDiscoveryProfileContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tDisplayName: pulumi.StringRef(\"demoprof\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyIpDiscoveryProfileArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyIpDiscoveryProfileContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var demoprof = NsxtFunctions.getPolicyIpDiscoveryProfile(GetPolicyIpDiscoveryProfileArgs.builder()\n            .context(GetPolicyIpDiscoveryProfileContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .displayName(\"demoprof\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  demoprof:\n    fn::invoke:\n      Function: nsxt:getPolicyIpDiscoveryProfile\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        displayName: demoprof\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyIpDiscoveryProfile.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyIpDiscoveryProfileContext:getPolicyIpDiscoveryProfileContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Profile to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Profile to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyIpDiscoveryProfile.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyIpDiscoveryProfileContext:getPolicyIpDiscoveryProfileContext"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyIpPool:getPolicyIpPool": {
            "description": "This data source provides information about policy IP Pools configured on NSX.\n\nThis data source is applicable to NSX Policy Manager.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyIpPool({\n    displayName: \"ippool1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_ip_pool(display_name=\"ippool1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyIpPool.Invoke(new()\n    {\n        DisplayName = \"ippool1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyIpPool(ctx, \u0026nsxt.LookupPolicyIpPoolArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"ippool1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyIpPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyIpPool(GetPolicyIpPoolArgs.builder()\n            .displayName(\"ippool1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyIpPool\n      Arguments:\n        displayName: ippool1\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst demopool = demoproj.then(demoproj =\u003e nsxt.getPolicyIpPool({\n    context: {\n        projectId: demoproj.id,\n    },\n    displayName: \"demopool\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\ndemopool = nsxt.get_policy_ip_pool(context=nsxt.GetPolicyIpPoolContextArgs(\n        project_id=demoproj.id,\n    ),\n    display_name=\"demopool\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var demopool = Nsxt.GetPolicyIpPool.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicyIpPoolContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        DisplayName = \"demopool\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.LookupPolicyIpPool(ctx, \u0026nsxt.LookupPolicyIpPoolArgs{\n\t\t\tContext: nsxt.GetPolicyIpPoolContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tDisplayName: pulumi.StringRef(\"demopool\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyIpPoolArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyIpPoolContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var demopool = NsxtFunctions.getPolicyIpPool(GetPolicyIpPoolArgs.builder()\n            .context(GetPolicyIpPoolContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .displayName(\"demopool\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  demopool:\n    fn::invoke:\n      Function: nsxt:getPolicyIpPool\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        displayName: demopool\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyIpPool.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyIpPoolContext:getPolicyIpPoolContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the IP Pool Config to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of IP Pool Config to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyIpPool.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyIpPoolContext:getPolicyIpPoolContext"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyIpsecVpnLocalEndpoint:getPolicyIpsecVpnLocalEndpoint": {
            "description": "This data source provides information about IPSec VPN policy local endpoint configured on NSX.\n\nThis data source is applicable to NSX Policy Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyIpsecVpnLocalEndpoint({\n    displayName: \"local_endpoint1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_ipsec_vpn_local_endpoint(display_name=\"local_endpoint1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyIpsecVpnLocalEndpoint.Invoke(new()\n    {\n        DisplayName = \"local_endpoint1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyIpsecVpnLocalEndpoint(ctx, \u0026nsxt.LookupPolicyIpsecVpnLocalEndpointArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"local_endpoint1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyIpsecVpnLocalEndpointArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyIpsecVpnLocalEndpoint(GetPolicyIpsecVpnLocalEndpointArgs.builder()\n            .displayName(\"local_endpoint1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyIpsecVpnLocalEndpoint\n      Arguments:\n        displayName: local_endpoint1\n```\n{{% /example %}}\n{{% /examples %}}\n## VMC Example Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyIpsecVpnLocalEndpoint({\n    id: \"Public-IP1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_ipsec_vpn_local_endpoint(id=\"Public-IP1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyIpsecVpnLocalEndpoint.Invoke(new()\n    {\n        Id = \"Public-IP1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyIpsecVpnLocalEndpoint(ctx, \u0026nsxt.LookupPolicyIpsecVpnLocalEndpointArgs{\n\t\t\tId: pulumi.StringRef(\"Public-IP1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyIpsecVpnLocalEndpointArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyIpsecVpnLocalEndpoint(GetPolicyIpsecVpnLocalEndpointArgs.builder()\n            .id(\"Public-IP1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyIpsecVpnLocalEndpoint\n      Arguments:\n        id: Public-IP1\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyIpsecVpnLocalEndpoint.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Local Endpoint to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Local Endpoint to retrieve.\n"
                    },
                    "servicePath": {
                        "type": "string",
                        "description": "Service Path for this Local Endpoint.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyIpsecVpnLocalEndpoint.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "localAddress": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "servicePath": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "localAddress",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyIpsecVpnService:getPolicyIpsecVpnService": {
            "description": "This data source provides information about policy ipsec vpn service configured on NSX.\n\nThis data source is applicable to NSX Policy Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyIpsecVpnService({\n    displayName: \"ipsec_vpn_service1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_ipsec_vpn_service(display_name=\"ipsec_vpn_service1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyIpsecVpnService.Invoke(new()\n    {\n        DisplayName = \"ipsec_vpn_service1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyIpsecVpnService(ctx, \u0026nsxt.LookupPolicyIpsecVpnServiceArgs{\n\t\t\tDisplayName: \"ipsec_vpn_service1\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyIpsecVpnServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyIpsecVpnService(GetPolicyIpsecVpnServiceArgs.builder()\n            .displayName(\"ipsec_vpn_service1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyIpsecVpnService\n      Arguments:\n        displayName: ipsec_vpn_service1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyIpsecVpnService.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name of the IPSec VPN Service.\n"
                    },
                    "gatewayPath": {
                        "type": "string",
                        "description": "Gateway Path for this Service.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of IPSec VPN Service to retrieve.\n"
                    }
                },
                "type": "object",
                "required": [
                    "displayName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyIpsecVpnService.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "gatewayPath": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyIpv6DadProfile:getPolicyIpv6DadProfile": {
            "description": "This data source provides information about policy IPv6 Duplicate Address Discovery Profile configured on NSX.\n\nThis data source is applicable to NSX Global Manager, and NSX Policy Manager.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyIpv6DadProfile({\n    displayName: \"ipv6-dad-profile1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_ipv6_dad_profile(display_name=\"ipv6-dad-profile1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyIpv6DadProfile.Invoke(new()\n    {\n        DisplayName = \"ipv6-dad-profile1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetPolicyIpv6DadProfile(ctx, \u0026nsxt.GetPolicyIpv6DadProfileArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"ipv6-dad-profile1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyIpv6DadProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyIpv6DadProfile(GetPolicyIpv6DadProfileArgs.builder()\n            .displayName(\"ipv6-dad-profile1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyIpv6DadProfile\n      Arguments:\n        displayName: ipv6-dad-profile1\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst demodad6 = demoproj.then(demoproj =\u003e nsxt.getPolicyIpv6DadProfile({\n    context: {\n        projectId: demoproj.id,\n    },\n    displayName: \"demodad6\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\ndemodad6 = nsxt.get_policy_ipv6_dad_profile(context=nsxt.GetPolicyIpv6DadProfileContextArgs(\n        project_id=demoproj.id,\n    ),\n    display_name=\"demodad6\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var demodad6 = Nsxt.GetPolicyIpv6DadProfile.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicyIpv6DadProfileContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        DisplayName = \"demodad6\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.GetPolicyIpv6DadProfile(ctx, \u0026nsxt.GetPolicyIpv6DadProfileArgs{\n\t\t\tContext: nsxt.GetPolicyIpv6DadProfileContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tDisplayName: pulumi.StringRef(\"demodad6\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyIpv6DadProfileArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyIpv6DadProfileContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var demodad6 = NsxtFunctions.getPolicyIpv6DadProfile(GetPolicyIpv6DadProfileArgs.builder()\n            .context(GetPolicyIpv6DadProfileContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .displayName(\"demodad6\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  demodad6:\n    fn::invoke:\n      Function: nsxt:getPolicyIpv6DadProfile\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        displayName: demodad6\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyIpv6DadProfile.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyIpv6DadProfileContext:getPolicyIpv6DadProfileContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Profile to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Profile to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyIpv6DadProfile.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyIpv6DadProfileContext:getPolicyIpv6DadProfileContext"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyIpv6NdraProfile:getPolicyIpv6NdraProfile": {
            "description": "This data source provides information about policy IPv6 Neighbor Discovery and Router Advertisement Profile configured on NSX.\n\nThis data source is applicable to NSX Global Manager, and NSX Policy Manager.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyIpv6NdraProfile({\n    displayName: \"ipv6-ndra-profile1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_ipv6_ndra_profile(display_name=\"ipv6-ndra-profile1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyIpv6NdraProfile.Invoke(new()\n    {\n        DisplayName = \"ipv6-ndra-profile1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetPolicyIpv6NdraProfile(ctx, \u0026nsxt.GetPolicyIpv6NdraProfileArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"ipv6-ndra-profile1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyIpv6NdraProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyIpv6NdraProfile(GetPolicyIpv6NdraProfileArgs.builder()\n            .displayName(\"ipv6-ndra-profile1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyIpv6NdraProfile\n      Arguments:\n        displayName: ipv6-ndra-profile1\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst demondra = demoproj.then(demoproj =\u003e nsxt.getPolicyIpv6NdraProfile({\n    context: {\n        projectId: demoproj.id,\n    },\n    displayName: \"demondra\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\ndemondra = nsxt.get_policy_ipv6_ndra_profile(context=nsxt.GetPolicyIpv6NdraProfileContextArgs(\n        project_id=demoproj.id,\n    ),\n    display_name=\"demondra\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var demondra = Nsxt.GetPolicyIpv6NdraProfile.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicyIpv6NdraProfileContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        DisplayName = \"demondra\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.GetPolicyIpv6NdraProfile(ctx, \u0026nsxt.GetPolicyIpv6NdraProfileArgs{\n\t\t\tContext: nsxt.GetPolicyIpv6NdraProfileContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tDisplayName: pulumi.StringRef(\"demondra\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyIpv6NdraProfileArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyIpv6NdraProfileContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var demondra = NsxtFunctions.getPolicyIpv6NdraProfile(GetPolicyIpv6NdraProfileArgs.builder()\n            .context(GetPolicyIpv6NdraProfileContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .displayName(\"demondra\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  demondra:\n    fn::invoke:\n      Function: nsxt:getPolicyIpv6NdraProfile\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        displayName: demondra\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyIpv6NdraProfile.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyIpv6NdraProfileContext:getPolicyIpv6NdraProfileContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Profile to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Profile to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyIpv6NdraProfile.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyIpv6NdraProfileContext:getPolicyIpv6NdraProfileContext"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyL2VpnService:getPolicyL2VpnService": {
            "description": "This data source provides information about policy l2 vpn service configured on NSX.\n\nThis data source is applicable to NSX Policy Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyL2VpnService({\n    displayName: \"l2_vpn_service1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_l2_vpn_service(display_name=\"l2_vpn_service1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyL2VpnService.Invoke(new()\n    {\n        DisplayName = \"l2_vpn_service1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyL2VpnService(ctx, \u0026nsxt.LookupPolicyL2VpnServiceArgs{\n\t\t\tDisplayName: \"l2_vpn_service1\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyL2VpnServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyL2VpnService(GetPolicyL2VpnServiceArgs.builder()\n            .displayName(\"l2_vpn_service1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyL2VpnService\n      Arguments:\n        displayName: l2_vpn_service1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyL2VpnService.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name of the L2 VPN Service.\n"
                    },
                    "gatewayPath": {
                        "type": "string",
                        "description": "Gateway Path for this Service.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of L2 VPN Service to retrieve.\n"
                    }
                },
                "type": "object",
                "required": [
                    "displayName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyL2VpnService.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "gatewayPath": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyLbAppProfile:getPolicyLbAppProfile": {
            "description": "This data source provides information about policy Load Balancer Application Profile configured in NSX.\n\nThis data source is applicable to NSX Policy Manager.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyLbAppProfile({\n    displayName: \"my-tcp-profile\",\n    type: \"TCP\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_lb_app_profile(display_name=\"my-tcp-profile\",\n    type=\"TCP\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyLbAppProfile.Invoke(new()\n    {\n        DisplayName = \"my-tcp-profile\",\n        Type = \"TCP\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetPolicyLbAppProfile(ctx, \u0026nsxt.GetPolicyLbAppProfileArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"my-tcp-profile\"),\n\t\t\tType:        pulumi.StringRef(\"TCP\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyLbAppProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyLbAppProfile(GetPolicyLbAppProfileArgs.builder()\n            .displayName(\"my-tcp-profile\")\n            .type(\"TCP\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyLbAppProfile\n      Arguments:\n        displayName: my-tcp-profile\n        type: TCP\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyLbAppProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Profile to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Profile to retrieve.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of Profile to retrieve, one of `HTTP`, `TCP`, `UDP`, `ANY`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyLbAppProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyLbClientSslProfile:getPolicyLbClientSslProfile": {
            "description": "This data source provides information about Policy Client SSL Profile for Load Balancer configured on NSX.\n\nThis data source is applicable to NSX Policy Manager.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyLbClientSslProfile({\n    displayName: \"myprofile\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_lb_client_ssl_profile(display_name=\"myprofile\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyLbClientSslProfile.Invoke(new()\n    {\n        DisplayName = \"myprofile\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetPolicyLbClientSslProfile(ctx, \u0026nsxt.GetPolicyLbClientSslProfileArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"myprofile\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyLbClientSslProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyLbClientSslProfile(GetPolicyLbClientSslProfileArgs.builder()\n            .displayName(\"myprofile\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyLbClientSslProfile\n      Arguments:\n        displayName: myprofile\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyLbClientSslProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Profile to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Profile to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyLbClientSslProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyLbMonitor:getPolicyLbMonitor": {
            "description": "This data source provides information about Policy Load Balancer Monitor configured on NSX.\n\nThis data source is applicable to NSX Policy Manager.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyLbMonitor({\n    displayName: \"my-tcp-monitor\",\n    type: \"TCP\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_lb_monitor(display_name=\"my-tcp-monitor\",\n    type=\"TCP\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyLbMonitor.Invoke(new()\n    {\n        DisplayName = \"my-tcp-monitor\",\n        Type = \"TCP\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetPolicyLbMonitor(ctx, \u0026nsxt.GetPolicyLbMonitorArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"my-tcp-monitor\"),\n\t\t\tType:        pulumi.StringRef(\"TCP\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyLbMonitorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyLbMonitor(GetPolicyLbMonitorArgs.builder()\n            .displayName(\"my-tcp-monitor\")\n            .type(\"TCP\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyLbMonitor\n      Arguments:\n        displayName: my-tcp-monitor\n        type: TCP\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyLbMonitor.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of Monitor to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Monitor to retrieve.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of Monitor to retrieve, one of `HTTP`, `HTTPS`, `TCP`, `UDP`, `ICMP`, `PASSIVE`, `ANY`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyLbMonitor.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyLbPersistenceProfile:getPolicyLbPersistenceProfile": {
            "description": "This data source provides information about Policy Load Balancer Persistence Profiles configured on NSX.\n\nThis data source is applicable to NSX Policy Manager.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyLbPersistenceProfile({\n    displayName: \"policy-lb-persistence-profile1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_lb_persistence_profile(display_name=\"policy-lb-persistence-profile1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyLbPersistenceProfile.Invoke(new()\n    {\n        DisplayName = \"policy-lb-persistence-profile1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetPolicyLbPersistenceProfile(ctx, \u0026nsxt.GetPolicyLbPersistenceProfileArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"policy-lb-persistence-profile1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyLbPersistenceProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyLbPersistenceProfile(GetPolicyLbPersistenceProfileArgs.builder()\n            .displayName(\"policy-lb-persistence-profile1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyLbPersistenceProfile\n      Arguments:\n        displayName: policy-lb-persistence-profile1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyLbPersistenceProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of Profile to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Profile to retrieve.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The Load Balancer Persistence Profile type. One of `ANY`, `SOURCE_IP`, `COOKIE` or `GENERIC`. Defaults to `ANY`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyLbPersistenceProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyLbServerSslProfile:getPolicyLbServerSslProfile": {
            "description": "This data source provides information about Policy Server SSL Profile for Load Balancer configured on NSX.\n\nThis data source is applicable to NSX Policy Manager.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyLbServerSslProfile({\n    displayName: \"myprofile\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_lb_server_ssl_profile(display_name=\"myprofile\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyLbServerSslProfile.Invoke(new()\n    {\n        DisplayName = \"myprofile\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetPolicyLbServerSslProfile(ctx, \u0026nsxt.GetPolicyLbServerSslProfileArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"myprofile\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyLbServerSslProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyLbServerSslProfile(GetPolicyLbServerSslProfileArgs.builder()\n            .displayName(\"myprofile\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyLbServerSslProfile\n      Arguments:\n        displayName: myprofile\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyLbServerSslProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Profile to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Profile to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyLbServerSslProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyLbService:getPolicyLbService": {
            "description": "This data source provides information about Policy Service for Load Balancer configured on NSX.\n\nThis data source is applicable to NSX Global Manager, NSX Policy Manager and VMC (NSX version 3.0.0 onwards).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyLbService({\n    displayName: \"myservice\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_lb_service(display_name=\"myservice\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyLbService.Invoke(new()\n    {\n        DisplayName = \"myservice\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyLbService(ctx, \u0026nsxt.LookupPolicyLbServiceArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"myservice\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyLbServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyLbService(GetPolicyLbServiceArgs.builder()\n            .displayName(\"myservice\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyLbService\n      Arguments:\n        displayName: myservice\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyLbService.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Service to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Service to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyLbService.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyMacDiscoveryProfile:getPolicyMacDiscoveryProfile": {
            "description": "This data source provides information about policy MAC Discovery Profile configured on NSX.\n\nThis data source is applicable to NSX Policy Manager, NSX Global Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyMacDiscoveryProfile({\n    displayName: \"mac-discovery-profile1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_mac_discovery_profile(display_name=\"mac-discovery-profile1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyMacDiscoveryProfile.Invoke(new()\n    {\n        DisplayName = \"mac-discovery-profile1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyMacDiscoveryProfile(ctx, \u0026nsxt.LookupPolicyMacDiscoveryProfileArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"mac-discovery-profile1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyMacDiscoveryProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyMacDiscoveryProfile(GetPolicyMacDiscoveryProfileArgs.builder()\n            .displayName(\"mac-discovery-profile1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyMacDiscoveryProfile\n      Arguments:\n        displayName: mac-discovery-profile1\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst macprof = demoproj.then(demoproj =\u003e nsxt.getPolicyMacDiscoveryProfile({\n    context: {\n        projectId: demoproj.id,\n    },\n    displayName: \"macprof\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\nmacprof = nsxt.get_policy_mac_discovery_profile(context=nsxt.GetPolicyMacDiscoveryProfileContextArgs(\n        project_id=demoproj.id,\n    ),\n    display_name=\"macprof\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var macprof = Nsxt.GetPolicyMacDiscoveryProfile.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicyMacDiscoveryProfileContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        DisplayName = \"macprof\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.LookupPolicyMacDiscoveryProfile(ctx, \u0026nsxt.LookupPolicyMacDiscoveryProfileArgs{\n\t\t\tContext: nsxt.GetPolicyMacDiscoveryProfileContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tDisplayName: pulumi.StringRef(\"macprof\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyMacDiscoveryProfileArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyMacDiscoveryProfileContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var macprof = NsxtFunctions.getPolicyMacDiscoveryProfile(GetPolicyMacDiscoveryProfileArgs.builder()\n            .context(GetPolicyMacDiscoveryProfileContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .displayName(\"macprof\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  macprof:\n    fn::invoke:\n      Function: nsxt:getPolicyMacDiscoveryProfile\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        displayName: macprof\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyMacDiscoveryProfile.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyMacDiscoveryProfileContext:getPolicyMacDiscoveryProfileContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of Profile to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Profile to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyMacDiscoveryProfile.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyMacDiscoveryProfileContext:getPolicyMacDiscoveryProfileContext"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyProject:getPolicyProject": {
            "description": "This data source provides information about policy Project configured on NSX.\nThis data source is applicable to NSX Policy Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyProject({\n    displayName: \"project1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_project(display_name=\"project1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"project1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"project1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"project1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: project1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyProject.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Project to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Project to retrieve. If ID is specified, no additional argument should be configured.\n"
                    },
                    "shortId": {
                        "type": "string",
                        "description": "Defaults to id if id is less than equal to 8 characters or defaults to random generated id if not set.\n"
                    },
                    "siteInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/getPolicyProjectSiteInfo:getPolicyProjectSiteInfo"
                        },
                        "description": "Information related to sites applicable for given Project.\n"
                    },
                    "tier0GatewayPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tier 0 has to be pre-created before Project is created.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyProject.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "shortId": {
                        "type": "string",
                        "description": "Defaults to id if id is less than equal to 8 characters or defaults to random generated id if not set.\n"
                    },
                    "siteInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/nsxt:index/getPolicyProjectSiteInfo:getPolicyProjectSiteInfo"
                        },
                        "description": "Information related to sites applicable for given Project.\n"
                    },
                    "tier0GatewayPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tier 0 has to be pre-created before Project is created.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyQosProfile:getPolicyQosProfile": {
            "description": "This data source provides information about policy Quality of Service Profile configured on NSX.\n\nThis data source is applicable to NSX Policy Manager, NSX Global Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyQosProfile({\n    displayName: \"qos-profile1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_qos_profile(display_name=\"qos-profile1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyQosProfile.Invoke(new()\n    {\n        DisplayName = \"qos-profile1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyQosProfile(ctx, \u0026nsxt.LookupPolicyQosProfileArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"qos-profile1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyQosProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyQosProfile(GetPolicyQosProfileArgs.builder()\n            .displayName(\"qos-profile1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyQosProfile\n      Arguments:\n        displayName: qos-profile1\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst demoqosprof = demoproj.then(demoproj =\u003e nsxt.getPolicyQosProfile({\n    context: {\n        projectId: demoproj.id,\n    },\n    displayName: \"demoqosprof\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\ndemoqosprof = nsxt.get_policy_qos_profile(context=nsxt.GetPolicyQosProfileContextArgs(\n        project_id=demoproj.id,\n    ),\n    display_name=\"demoqosprof\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var demoqosprof = Nsxt.GetPolicyQosProfile.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicyQosProfileContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        DisplayName = \"demoqosprof\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.LookupPolicyQosProfile(ctx, \u0026nsxt.LookupPolicyQosProfileArgs{\n\t\t\tContext: nsxt.GetPolicyQosProfileContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tDisplayName: pulumi.StringRef(\"demoqosprof\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyQosProfileArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyQosProfileContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var demoqosprof = NsxtFunctions.getPolicyQosProfile(GetPolicyQosProfileArgs.builder()\n            .context(GetPolicyQosProfileContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .displayName(\"demoqosprof\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  demoqosprof:\n    fn::invoke:\n      Function: nsxt:getPolicyQosProfile\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        displayName: demoqosprof\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyQosProfile.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyQosProfileContext:getPolicyQosProfileContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Profile to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Profile to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyQosProfile.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyQosProfileContext:getPolicyQosProfileContext"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyRealizationInfo:getPolicyRealizationInfo": {
            "description": "This data source provides information about the realization of a policy resource on NSX manager. This data source will wait until realization is determined as either success or error. It is recommended to use this data source if further configuration depends on resource realization.\n\nThis data source is applicable to NSX Policy Manager and NSX Global Manager.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst tier1Gw = nsxt.getPolicyTier1Gateway({\n    displayName: \"tier1_gw\",\n});\nconst info = tier1Gw.then(tier1Gw =\u003e nsxt.getPolicyRealizationInfo({\n    path: tier1Gw.path,\n    entityType: \"RealizedLogicalRouter\",\n    timeout: 60,\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntier1_gw = nsxt.get_policy_tier1_gateway(display_name=\"tier1_gw\")\ninfo = nsxt.get_policy_realization_info(path=tier1_gw.path,\n    entity_type=\"RealizedLogicalRouter\",\n    timeout=60)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tier1Gw = Nsxt.GetPolicyTier1Gateway.Invoke(new()\n    {\n        DisplayName = \"tier1_gw\",\n    });\n\n    var info = Nsxt.GetPolicyRealizationInfo.Invoke(new()\n    {\n        Path = tier1Gw.Apply(getPolicyTier1GatewayResult =\u003e getPolicyTier1GatewayResult.Path),\n        EntityType = \"RealizedLogicalRouter\",\n        Timeout = 60,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttier1Gw, err := nsxt.LookupPolicyTier1Gateway(ctx, \u0026nsxt.LookupPolicyTier1GatewayArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"tier1_gw\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.GetPolicyRealizationInfo(ctx, \u0026nsxt.GetPolicyRealizationInfoArgs{\n\t\t\tPath:       tier1Gw.Path,\n\t\t\tEntityType: pulumi.StringRef(\"RealizedLogicalRouter\"),\n\t\t\tTimeout:    pulumi.IntRef(60),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyTier1GatewayArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyRealizationInfoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tier1Gw = NsxtFunctions.getPolicyTier1Gateway(GetPolicyTier1GatewayArgs.builder()\n            .displayName(\"tier1_gw\")\n            .build());\n\n        final var info = NsxtFunctions.getPolicyRealizationInfo(GetPolicyRealizationInfoArgs.builder()\n            .path(tier1Gw.applyValue(getPolicyTier1GatewayResult -\u003e getPolicyTier1GatewayResult.path()))\n            .entityType(\"RealizedLogicalRouter\")\n            .timeout(60)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  tier1Gw:\n    fn::invoke:\n      Function: nsxt:getPolicyTier1Gateway\n      Arguments:\n        displayName: tier1_gw\n  info:\n    fn::invoke:\n      Function: nsxt:getPolicyRealizationInfo\n      Arguments:\n        path: ${tier1Gw.path}\n        entityType: RealizedLogicalRouter\n        timeout: 60\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst tier1Gw = nsxt.getPolicyTier1Gateway({\n    displayName: \"tier1_gw\",\n});\nconst info = Promise.all([demoproj, tier1Gw]).then(([demoproj, tier1Gw]) =\u003e nsxt.getPolicyRealizationInfo({\n    context: {\n        projectId: demoproj.id,\n    },\n    path: tier1Gw.path,\n    entityType: \"RealizedLogicalRouter\",\n    timeout: 60,\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\ntier1_gw = nsxt.get_policy_tier1_gateway(display_name=\"tier1_gw\")\ninfo = nsxt.get_policy_realization_info(context=nsxt.GetPolicyRealizationInfoContextArgs(\n        project_id=demoproj.id,\n    ),\n    path=tier1_gw.path,\n    entity_type=\"RealizedLogicalRouter\",\n    timeout=60)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var tier1Gw = Nsxt.GetPolicyTier1Gateway.Invoke(new()\n    {\n        DisplayName = \"tier1_gw\",\n    });\n\n    var info = Nsxt.GetPolicyRealizationInfo.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicyRealizationInfoContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        Path = tier1Gw.Apply(getPolicyTier1GatewayResult =\u003e getPolicyTier1GatewayResult.Path),\n        EntityType = \"RealizedLogicalRouter\",\n        Timeout = 60,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttier1Gw, err := nsxt.LookupPolicyTier1Gateway(ctx, \u0026nsxt.LookupPolicyTier1GatewayArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"tier1_gw\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.GetPolicyRealizationInfo(ctx, \u0026nsxt.GetPolicyRealizationInfoArgs{\n\t\t\tContext: nsxt.GetPolicyRealizationInfoContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tPath:       tier1Gw.Path,\n\t\t\tEntityType: pulumi.StringRef(\"RealizedLogicalRouter\"),\n\t\t\tTimeout:    pulumi.IntRef(60),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyTier1GatewayArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyRealizationInfoArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyRealizationInfoContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var tier1Gw = NsxtFunctions.getPolicyTier1Gateway(GetPolicyTier1GatewayArgs.builder()\n            .displayName(\"tier1_gw\")\n            .build());\n\n        final var info = NsxtFunctions.getPolicyRealizationInfo(GetPolicyRealizationInfoArgs.builder()\n            .context(GetPolicyRealizationInfoContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .path(tier1Gw.applyValue(getPolicyTier1GatewayResult -\u003e getPolicyTier1GatewayResult.path()))\n            .entityType(\"RealizedLogicalRouter\")\n            .timeout(60)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  tier1Gw:\n    fn::invoke:\n      Function: nsxt:getPolicyTier1Gateway\n      Arguments:\n        displayName: tier1_gw\n  info:\n    fn::invoke:\n      Function: nsxt:getPolicyRealizationInfo\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        path: ${tier1Gw.path}\n        entityType: RealizedLogicalRouter\n        timeout: 60\n```\n{{% /example %}}\n{{% /examples %}}\n## Global Manager Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst tier1Gw = nsxt.getPolicyTier1Gateway({\n    displayName: \"tier1_gw\",\n});\nconst site = nsxt.getPolicySite({\n    displayName: \"Paris\",\n});\nconst info = Promise.all([tier1Gw, site]).then(([tier1Gw, site]) =\u003e nsxt.getPolicyRealizationInfo({\n    path: tier1Gw.path,\n    entityType: \"RealizedLogicalRouter\",\n    sitePath: site.path,\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntier1_gw = nsxt.get_policy_tier1_gateway(display_name=\"tier1_gw\")\nsite = nsxt.get_policy_site(display_name=\"Paris\")\ninfo = nsxt.get_policy_realization_info(path=tier1_gw.path,\n    entity_type=\"RealizedLogicalRouter\",\n    site_path=site.path)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tier1Gw = Nsxt.GetPolicyTier1Gateway.Invoke(new()\n    {\n        DisplayName = \"tier1_gw\",\n    });\n\n    var site = Nsxt.GetPolicySite.Invoke(new()\n    {\n        DisplayName = \"Paris\",\n    });\n\n    var info = Nsxt.GetPolicyRealizationInfo.Invoke(new()\n    {\n        Path = tier1Gw.Apply(getPolicyTier1GatewayResult =\u003e getPolicyTier1GatewayResult.Path),\n        EntityType = \"RealizedLogicalRouter\",\n        SitePath = site.Apply(getPolicySiteResult =\u003e getPolicySiteResult.Path),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttier1Gw, err := nsxt.LookupPolicyTier1Gateway(ctx, \u0026nsxt.LookupPolicyTier1GatewayArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"tier1_gw\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsite, err := nsxt.GetPolicySite(ctx, \u0026nsxt.GetPolicySiteArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"Paris\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.GetPolicyRealizationInfo(ctx, \u0026nsxt.GetPolicyRealizationInfoArgs{\n\t\t\tPath:       tier1Gw.Path,\n\t\t\tEntityType: pulumi.StringRef(\"RealizedLogicalRouter\"),\n\t\t\tSitePath:   pulumi.StringRef(site.Path),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyTier1GatewayArgs;\nimport com.pulumi.nsxt.inputs.GetPolicySiteArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyRealizationInfoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tier1Gw = NsxtFunctions.getPolicyTier1Gateway(GetPolicyTier1GatewayArgs.builder()\n            .displayName(\"tier1_gw\")\n            .build());\n\n        final var site = NsxtFunctions.getPolicySite(GetPolicySiteArgs.builder()\n            .displayName(\"Paris\")\n            .build());\n\n        final var info = NsxtFunctions.getPolicyRealizationInfo(GetPolicyRealizationInfoArgs.builder()\n            .path(tier1Gw.applyValue(getPolicyTier1GatewayResult -\u003e getPolicyTier1GatewayResult.path()))\n            .entityType(\"RealizedLogicalRouter\")\n            .sitePath(site.applyValue(getPolicySiteResult -\u003e getPolicySiteResult.path()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  tier1Gw:\n    fn::invoke:\n      Function: nsxt:getPolicyTier1Gateway\n      Arguments:\n        displayName: tier1_gw\n  site:\n    fn::invoke:\n      Function: nsxt:getPolicySite\n      Arguments:\n        displayName: Paris\n  info:\n    fn::invoke:\n      Function: nsxt:getPolicyRealizationInfo\n      Arguments:\n        path: ${tier1Gw.path}\n        entityType: RealizedLogicalRouter\n        sitePath: ${site.path}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyRealizationInfo.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyRealizationInfoContext:getPolicyRealizationInfoContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "delay": {
                        "type": "integer",
                        "description": "Delay (in seconds) before realization polling is started. Default is set to 1.\n"
                    },
                    "entityType": {
                        "type": "string",
                        "description": "The entity type of realized resource. If not set, on of the realized resources of the policy resource will be retrieved.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The policy path of the resource.\n"
                    },
                    "sitePath": {
                        "type": "string",
                        "description": "The path of the site which the resource belongs to, this configuration is required for global manager only. `path` field of the existing `nsxt.getPolicySite` can be used here.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "Timeout (in seconds) for realization polling. Default is set to 1200.\n"
                    }
                },
                "type": "object",
                "required": [
                    "path"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyRealizationInfo.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyRealizationInfoContext:getPolicyRealizationInfoContext"
                    },
                    "delay": {
                        "type": "integer"
                    },
                    "entityType": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "realizedId": {
                        "type": "string",
                        "description": "The id of the realized object.\n"
                    },
                    "sitePath": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string",
                        "description": "The realization state of the resource: \"REALIZED\", \"UNKNOWN\", \"UNREALIZED\" or \"ERROR\".\n"
                    },
                    "timeout": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "entityType",
                    "id",
                    "path",
                    "realizedId",
                    "state"
                ]
            }
        },
        "nsxt:index/getPolicySecurityPolicy:getPolicySecurityPolicy": {
            "description": "This data source provides information about policy Security Policues configured on NSX.\nThis data source can be useful for fetching policy path to use in `nsxt.PolicyPredefinedSecurityPolicy` resource.\n\nThis data source is applicable to NSX Policy Manager, NSX Global Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst predefined = nsxt.getPolicySecurityPolicy({\n    category: \"Application\",\n    isDefault: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\npredefined = nsxt.get_policy_security_policy(category=\"Application\",\n    is_default=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var predefined = Nsxt.GetPolicySecurityPolicy.Invoke(new()\n    {\n        Category = \"Application\",\n        IsDefault = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicySecurityPolicy(ctx, \u0026nsxt.LookupPolicySecurityPolicyArgs{\n\t\t\tCategory:  pulumi.StringRef(\"Application\"),\n\t\t\tIsDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicySecurityPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var predefined = NsxtFunctions.getPolicySecurityPolicy(GetPolicySecurityPolicyArgs.builder()\n            .category(\"Application\")\n            .isDefault(true)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  predefined:\n    fn::invoke:\n      Function: nsxt:getPolicySecurityPolicy\n      Arguments:\n        category: Application\n        isDefault: true\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst predefined = demoproj.then(demoproj =\u003e nsxt.getPolicySecurityPolicy({\n    context: {\n        projectId: demoproj.id,\n    },\n    isDefault: true,\n    category: \"Application\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\npredefined = nsxt.get_policy_security_policy(context=nsxt.GetPolicySecurityPolicyContextArgs(\n        project_id=demoproj.id,\n    ),\n    is_default=True,\n    category=\"Application\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var predefined = Nsxt.GetPolicySecurityPolicy.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicySecurityPolicyContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        IsDefault = true,\n        Category = \"Application\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.LookupPolicySecurityPolicy(ctx, \u0026nsxt.LookupPolicySecurityPolicyArgs{\n\t\t\tContext: nsxt.GetPolicySecurityPolicyContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tIsDefault: pulumi.BoolRef(true),\n\t\t\tCategory:  pulumi.StringRef(\"Application\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicySecurityPolicyArgs;\nimport com.pulumi.nsxt.inputs.GetPolicySecurityPolicyContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var predefined = NsxtFunctions.getPolicySecurityPolicy(GetPolicySecurityPolicyArgs.builder()\n            .context(GetPolicySecurityPolicyContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .isDefault(true)\n            .category(\"Application\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  predefined:\n    fn::invoke:\n      Function: nsxt:getPolicySecurityPolicy\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        isDefault: true\n        category: Application\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicySecurityPolicy.\n",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "Category of the policy to retrieve.\n"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicySecurityPolicyContext:getPolicySecurityPolicyContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name of the policy to retrieve.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain of the policy, defaults to `default`. Needs to be specified in VMC environment.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Security Policy to retrieve.\n"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Whether this is a default policy. Default is `false`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicySecurityPolicy.\n",
                "properties": {
                    "category": {
                        "type": "string"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicySecurityPolicyContext:getPolicySecurityPolicyContext"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "isDefault": {
                        "type": "boolean"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "category",
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicySegment:getPolicySegment": {
            "description": "This data source provides information about policy Segment configured on NSX.\nThis data source is applicable to NSX Global Manager, NSX Policy Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicySegment({\n    displayName: \"segment1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_segment(display_name=\"segment1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicySegment.Invoke(new()\n    {\n        DisplayName = \"segment1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicySegment(ctx, \u0026nsxt.LookupPolicySegmentArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"segment1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicySegmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicySegment(GetPolicySegmentArgs.builder()\n            .displayName(\"segment1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicySegment\n      Arguments:\n        displayName: segment1\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst demoseg = demoproj.then(demoproj =\u003e nsxt.getPolicySegment({\n    context: {\n        projectId: demoproj.id,\n    },\n    displayName: \"demoseg\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\ndemoseg = nsxt.get_policy_segment(context=nsxt.GetPolicySegmentContextArgs(\n        project_id=demoproj.id,\n    ),\n    display_name=\"demoseg\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var demoseg = Nsxt.GetPolicySegment.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicySegmentContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        DisplayName = \"demoseg\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.LookupPolicySegment(ctx, \u0026nsxt.LookupPolicySegmentArgs{\n\t\t\tContext: nsxt.GetPolicySegmentContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tDisplayName: pulumi.StringRef(\"demoseg\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicySegmentArgs;\nimport com.pulumi.nsxt.inputs.GetPolicySegmentContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var demoseg = NsxtFunctions.getPolicySegment(GetPolicySegmentArgs.builder()\n            .context(GetPolicySegmentContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .displayName(\"demoseg\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  demoseg:\n    fn::invoke:\n      Function: nsxt:getPolicySegment\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        displayName: demoseg\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicySegment.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicySegmentContext:getPolicySegmentContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Segment to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Segment to retrieve. If ID is specified, no additional argument should be configured.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicySegment.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicySegmentContext:getPolicySegmentContext"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicySegmentRealization:getPolicySegmentRealization": {
            "description": "This data source provides information about the realization of a policy segment or policy vlan segment on hypervisor.\nThis data source will wait until realization is complete with either success, partial success or error. It is recommended\nto use this data source in conjunction with vsphere provider, in order to ensure segment is realized on hypervisor before\nVM is created on same network.\n\nThis data source is applicable to NSX Policy Manager.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```python\nimport pulumi\nimport hyperscale_pulumi_nsxt as nsxt\nimport pulumi_nsxt as nsxt\nimport pulumi_vsphere as vsphere\n\ns1_policy_segment = nsxt.PolicySegment(\"s1PolicySegment\",\n    display_name=\"segment1\",\n    transport_zone_path=data[\"nsxt_policy_transport_zone\"][\"tz1\"][\"path\"])\ns1_policy_segment_realization = nsxt.get_policy_segment_realization_output(path=s1_policy_segment.path)\nnet = vsphere.get_network(name=nsxt_policy_segment_realization[\"s1\"][\"network_name\"],\n    datacenter_id=data[\"vsphere_datacenter\"][\"datacenter\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\nusing Nsxt = SCC-Hyperscale-fr.Nsxt;\nusing VSphere = Pulumi.VSphere;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var s1PolicySegment = new Nsxt.PolicySegment(\"s1PolicySegment\", new()\n    {\n        DisplayName = \"segment1\",\n        TransportZonePath = data.Nsxt_policy_transport_zone.Tz1.Path,\n    });\n\n    var s1PolicySegmentRealization = Nsxt.GetPolicySegmentRealization.Invoke(new()\n    {\n        Path = s1PolicySegment.Path,\n    });\n\n    var net = VSphere.GetNetwork.Invoke(new()\n    {\n        Name = nsxt_policy_segment_realization.S1.Network_name,\n        DatacenterId = data.Vsphere_datacenter.Datacenter.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ts1PolicySegment, err := nsxt.NewPolicySegment(ctx, \"s1PolicySegment\", \u0026nsxt.PolicySegmentArgs{\n\t\t\tDisplayName:       pulumi.String(\"segment1\"),\n\t\t\tTransportZonePath: pulumi.Any(data.Nsxt_policy_transport_zone.Tz1.Path),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = nsxt.GetPolicySegmentRealizationOutput(ctx, nsxt.GetPolicySegmentRealizationOutputArgs{\n\t\t\tPath: s1PolicySegment.Path,\n\t\t}, nil)\n\t\t_, err = vsphere.GetNetwork(ctx, \u0026vsphere.GetNetworkArgs{\n\t\t\tName:         nsxt_policy_segment_realization.S1.Network_name,\n\t\t\tDatacenterId: pulumi.StringRef(data.Vsphere_datacenter.Datacenter.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.PolicySegment;\nimport com.pulumi.nsxt.PolicySegmentArgs;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicySegmentRealizationArgs;\nimport com.pulumi.vsphere.VsphereFunctions;\nimport com.pulumi.vsphere.inputs.GetNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var s1PolicySegment = new PolicySegment(\"s1PolicySegment\", PolicySegmentArgs.builder()        \n            .displayName(\"segment1\")\n            .transportZonePath(data.nsxt_policy_transport_zone().tz1().path())\n            .build());\n\n        final var s1PolicySegmentRealization = NsxtFunctions.getPolicySegmentRealization(GetPolicySegmentRealizationArgs.builder()\n            .path(s1PolicySegment.path())\n            .build());\n\n        final var net = VsphereFunctions.getNetwork(GetNetworkArgs.builder()\n            .name(nsxt_policy_segment_realization.s1().network_name())\n            .datacenterId(data.vsphere_datacenter().datacenter().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  s1PolicySegment:\n    type: nsxt:PolicySegment\n    properties:\n      displayName: segment1\n      transportZonePath: ${data.nsxt_policy_transport_zone.tz1.path}\nvariables:\n  s1PolicySegmentRealization:\n    fn::invoke:\n      Function: nsxt:getPolicySegmentRealization\n      Arguments:\n        path: ${s1PolicySegment.path}\n  net:\n    fn::invoke:\n      Function: vsphere:getNetwork\n      Arguments:\n        name: ${nsxt_policy_segment_realization.s1.network_name}\n        datacenterId: ${data.vsphere_datacenter.datacenter.id}\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@SCC-Hyperscale-fr/nsxt\";\nimport * as nsxt from \"@pulumi/nsxt\";\nimport * as vsphere from \"@pulumi/vsphere\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst s1PolicySegment = new nsxt.PolicySegment(\"s1PolicySegment\", {\n    context: {\n        projectId: demoproj.then(demoproj =\u003e demoproj.id),\n    },\n    displayName: \"segment1\",\n});\nconst s1PolicySegmentRealization = pulumi.all([demoproj, s1PolicySegment.path]).apply(([demoproj, path]) =\u003e nsxt.getPolicySegmentRealizationOutput({\n    context: {\n        projectId: demoproj.id,\n    },\n    path: path,\n}));\nconst net = vsphere.getNetwork({\n    name: nsxt_policy_segment_realization.s1.network_name,\n    datacenterId: data.vsphere_datacenter.datacenter.id,\n});\n```\n```python\nimport pulumi\nimport hyperscale_pulumi_nsxt as nsxt\nimport pulumi_nsxt as nsxt\nimport pulumi_vsphere as vsphere\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\ns1_policy_segment = nsxt.PolicySegment(\"s1PolicySegment\",\n    context=nsxt.PolicySegmentContextArgs(\n        project_id=demoproj.id,\n    ),\n    display_name=\"segment1\")\ns1_policy_segment_realization = s1_policy_segment.path.apply(lambda path: nsxt.get_policy_segment_realization_output(context=nsxt.GetPolicySegmentRealizationContextArgs(\n        project_id=demoproj.id,\n    ),\n    path=path))\nnet = vsphere.get_network(name=nsxt_policy_segment_realization[\"s1\"][\"network_name\"],\n    datacenter_id=data[\"vsphere_datacenter\"][\"datacenter\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\nusing Nsxt = SCC-Hyperscale-fr.Nsxt;\nusing VSphere = Pulumi.VSphere;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var s1PolicySegment = new Nsxt.PolicySegment(\"s1PolicySegment\", new()\n    {\n        Context = new Nsxt.Inputs.PolicySegmentContextArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        DisplayName = \"segment1\",\n    });\n\n    var s1PolicySegmentRealization = Nsxt.GetPolicySegmentRealization.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicySegmentRealizationContextArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        Path = s1PolicySegment.Path,\n    });\n\n    var net = VSphere.GetNetwork.Invoke(new()\n    {\n        Name = nsxt_policy_segment_realization.S1.Network_name,\n        DatacenterId = data.Vsphere_datacenter.Datacenter.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi-vsphere/sdk/v4/go/vsphere\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ts1PolicySegment, err := nsxt.NewPolicySegment(ctx, \"s1PolicySegment\", \u0026nsxt.PolicySegmentArgs{\n\t\t\tContext: \u0026nsxt.PolicySegmentContextArgs{\n\t\t\t\tProjectId: *pulumi.String(demoproj.Id),\n\t\t\t},\n\t\t\tDisplayName: pulumi.String(\"segment1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = s1PolicySegment.Path.ApplyT(func(path string) (nsxt.GetPolicySegmentRealizationResult, error) {\n\t\t\treturn nsxt.GetPolicySegmentRealizationOutput(ctx, nsxt.GetPolicySegmentRealizationOutputArgs{\n\t\t\t\tContext: nsxt.GetPolicySegmentRealizationContext{\n\t\t\t\t\tProjectId: demoproj.Id,\n\t\t\t\t},\n\t\t\t\tPath: path,\n\t\t\t}, nil), nil\n\t\t}).(nsxt.GetPolicySegmentRealizationResultOutput)\n\t\t_, err = vsphere.GetNetwork(ctx, \u0026vsphere.GetNetworkArgs{\n\t\t\tName:         nsxt_policy_segment_realization.S1.Network_name,\n\t\t\tDatacenterId: pulumi.StringRef(data.Vsphere_datacenter.Datacenter.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.PolicySegment;\nimport com.pulumi.nsxt.PolicySegmentArgs;\nimport com.pulumi.nsxt.inputs.PolicySegmentContextArgs;\nimport com.pulumi.nsxt.inputs.GetPolicySegmentRealizationArgs;\nimport com.pulumi.nsxt.inputs.GetPolicySegmentRealizationContextArgs;\nimport com.pulumi.vsphere.VsphereFunctions;\nimport com.pulumi.vsphere.inputs.GetNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        var s1PolicySegment = new PolicySegment(\"s1PolicySegment\", PolicySegmentArgs.builder()        \n            .context(PolicySegmentContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .displayName(\"segment1\")\n            .build());\n\n        final var s1PolicySegmentRealization = NsxtFunctions.getPolicySegmentRealization(GetPolicySegmentRealizationArgs.builder()\n            .context(GetPolicySegmentRealizationContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .path(s1PolicySegment.path())\n            .build());\n\n        final var net = VsphereFunctions.getNetwork(GetNetworkArgs.builder()\n            .name(nsxt_policy_segment_realization.s1().network_name())\n            .datacenterId(data.vsphere_datacenter().datacenter().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  s1PolicySegment:\n    type: nsxt:PolicySegment\n    properties:\n      context:\n        projectId: ${demoproj.id}\n      displayName: segment1\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  s1PolicySegmentRealization:\n    fn::invoke:\n      Function: nsxt:getPolicySegmentRealization\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        path: ${s1PolicySegment.path}\n  net:\n    fn::invoke:\n      Function: vsphere:getNetwork\n      Arguments:\n        name: ${nsxt_policy_segment_realization.s1.network_name}\n        datacenterId: ${data.vsphere_datacenter.datacenter.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicySegmentRealization.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicySegmentRealizationContext:getPolicySegmentRealizationContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The policy path of the segment.\n"
                    }
                },
                "type": "object",
                "required": [
                    "path"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPolicySegmentRealization.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicySegmentRealizationContext:getPolicySegmentRealizationContext"
                    },
                    "id": {
                        "type": "string"
                    },
                    "networkName": {
                        "type": "string",
                        "description": "Network name on the hypervisor. This attribute can be used in vsphere provider in order to ensure implicit dependency on segment realization.\n"
                    },
                    "path": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string",
                        "description": "The realization state of the resource: `success`, `partial_success`, `orphaned`, `failed` or `error`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "networkName",
                    "path",
                    "state"
                ]
            }
        },
        "nsxt:index/getPolicySegmentSecurityProfile:getPolicySegmentSecurityProfile": {
            "description": "This data source provides information about policy Segment Security Profile configured on NSX.\n\nThis data source is applicable to NSX Policy Manager, NSX Global Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicySegmentSecurityProfile({\n    displayName: \"segment-security-profile1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_segment_security_profile(display_name=\"segment-security-profile1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicySegmentSecurityProfile.Invoke(new()\n    {\n        DisplayName = \"segment-security-profile1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicySegmentSecurityProfile(ctx, \u0026nsxt.LookupPolicySegmentSecurityProfileArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"segment-security-profile1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicySegmentSecurityProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicySegmentSecurityProfile(GetPolicySegmentSecurityProfileArgs.builder()\n            .displayName(\"segment-security-profile1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicySegmentSecurityProfile\n      Arguments:\n        displayName: segment-security-profile1\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst demosegprof = demoproj.then(demoproj =\u003e nsxt.getPolicySegmentSecurityProfile({\n    context: {\n        projectId: demoproj.id,\n    },\n    displayName: \"demosegprof\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\ndemosegprof = nsxt.get_policy_segment_security_profile(context=nsxt.GetPolicySegmentSecurityProfileContextArgs(\n        project_id=demoproj.id,\n    ),\n    display_name=\"demosegprof\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var demosegprof = Nsxt.GetPolicySegmentSecurityProfile.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicySegmentSecurityProfileContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        DisplayName = \"demosegprof\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.LookupPolicySegmentSecurityProfile(ctx, \u0026nsxt.LookupPolicySegmentSecurityProfileArgs{\n\t\t\tContext: nsxt.GetPolicySegmentSecurityProfileContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tDisplayName: pulumi.StringRef(\"demosegprof\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicySegmentSecurityProfileArgs;\nimport com.pulumi.nsxt.inputs.GetPolicySegmentSecurityProfileContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var demosegprof = NsxtFunctions.getPolicySegmentSecurityProfile(GetPolicySegmentSecurityProfileArgs.builder()\n            .context(GetPolicySegmentSecurityProfileContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .displayName(\"demosegprof\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  demosegprof:\n    fn::invoke:\n      Function: nsxt:getPolicySegmentSecurityProfile\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        displayName: demosegprof\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicySegmentSecurityProfile.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicySegmentSecurityProfileContext:getPolicySegmentSecurityProfileContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the SegmentSecurityProfile to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of SegmentSecurityProfile to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicySegmentSecurityProfile.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicySegmentSecurityProfileContext:getPolicySegmentSecurityProfileContext"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyService:getPolicyService": {
            "description": "This data source provides information about policy services configured in NSX.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst dnsService = nsxt.getPolicyService({\n    displayName: \"DNS\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndns_service = nsxt.get_policy_service(display_name=\"DNS\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dnsService = Nsxt.GetPolicyService.Invoke(new()\n    {\n        DisplayName = \"DNS\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyService(ctx, \u0026nsxt.LookupPolicyServiceArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"DNS\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dnsService = NsxtFunctions.getPolicyService(GetPolicyServiceArgs.builder()\n            .displayName(\"DNS\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dnsService:\n    fn::invoke:\n      Function: nsxt:getPolicyService\n      Arguments:\n        displayName: DNS\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst demodnssvc = demoproj.then(demoproj =\u003e nsxt.getPolicyService({\n    context: {\n        projectId: demoproj.id,\n    },\n    displayName: \"demodnssvc\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\ndemodnssvc = nsxt.get_policy_service(context=nsxt.GetPolicyServiceContextArgs(\n        project_id=demoproj.id,\n    ),\n    display_name=\"demodnssvc\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var demodnssvc = Nsxt.GetPolicyService.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicyServiceContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        DisplayName = \"demodnssvc\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.LookupPolicyService(ctx, \u0026nsxt.LookupPolicyServiceArgs{\n\t\t\tContext: nsxt.GetPolicyServiceContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tDisplayName: pulumi.StringRef(\"demodnssvc\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyServiceArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyServiceContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var demodnssvc = NsxtFunctions.getPolicyService(GetPolicyServiceArgs.builder()\n            .context(GetPolicyServiceContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .displayName(\"demodnssvc\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  demodnssvc:\n    fn::invoke:\n      Function: nsxt:getPolicyService\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        displayName: demodnssvc\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyService.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyServiceContext:getPolicyServiceContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the service to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of service to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyService.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyServiceContext:getPolicyServiceContext"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicySite:getPolicySite": {
            "description": "This data source provides information about Site (or Location) configured on NSX Global Manager.\n\nThis data source is applicable to NSX Global Manager only.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst paris = nsxt.getPolicySite({\n    displayName: \"Paris\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\nparis = nsxt.get_policy_site(display_name=\"Paris\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var paris = Nsxt.GetPolicySite.Invoke(new()\n    {\n        DisplayName = \"Paris\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetPolicySite(ctx, \u0026nsxt.GetPolicySiteArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"Paris\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicySiteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var paris = NsxtFunctions.getPolicySite(GetPolicySiteArgs.builder()\n            .displayName(\"Paris\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  paris:\n    fn::invoke:\n      Function: nsxt:getPolicySite\n      Arguments:\n        displayName: Paris\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicySite.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Site to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Site to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicySite.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource. This attribute can serve as `site_path` field of `nsxt.PolicyTransportZone` data source.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicySpoofguardProfile:getPolicySpoofguardProfile": {
            "description": "This data source provides information about policy Spoofguard Profile configured on NSX.\n\nThis data source is applicable to NSX Policy Manager, NSX Global Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicySpoofguardProfile({\n    displayName: \"spoofguard-profile1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_spoofguard_profile(display_name=\"spoofguard-profile1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicySpoofguardProfile.Invoke(new()\n    {\n        DisplayName = \"spoofguard-profile1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetPolicySpoofguardProfile(ctx, \u0026nsxt.GetPolicySpoofguardProfileArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"spoofguard-profile1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicySpoofguardProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicySpoofguardProfile(GetPolicySpoofguardProfileArgs.builder()\n            .displayName(\"spoofguard-profile1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicySpoofguardProfile\n      Arguments:\n        displayName: spoofguard-profile1\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst demosgprof = demoproj.then(demoproj =\u003e nsxt.getPolicySpoofguardProfile({\n    context: {\n        projectId: demoproj.id,\n    },\n    displayName: \"demosgprof\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\ndemosgprof = nsxt.get_policy_spoofguard_profile(context=nsxt.GetPolicySpoofguardProfileContextArgs(\n        project_id=demoproj.id,\n    ),\n    display_name=\"demosgprof\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var demosgprof = Nsxt.GetPolicySpoofguardProfile.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicySpoofguardProfileContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        DisplayName = \"demosgprof\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.GetPolicySpoofguardProfile(ctx, \u0026nsxt.GetPolicySpoofguardProfileArgs{\n\t\t\tContext: nsxt.GetPolicySpoofguardProfileContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tDisplayName: pulumi.StringRef(\"demosgprof\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicySpoofguardProfileArgs;\nimport com.pulumi.nsxt.inputs.GetPolicySpoofguardProfileContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var demosgprof = NsxtFunctions.getPolicySpoofguardProfile(GetPolicySpoofguardProfileArgs.builder()\n            .context(GetPolicySpoofguardProfileContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .displayName(\"demosgprof\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  demosgprof:\n    fn::invoke:\n      Function: nsxt:getPolicySpoofguardProfile\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        displayName: demosgprof\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicySpoofguardProfile.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicySpoofguardProfileContext:getPolicySpoofguardProfileContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the SpoofGuardProfile to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of SpoofGuardProfile to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicySpoofguardProfile.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicySpoofguardProfileContext:getPolicySpoofguardProfileContext"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyTier0Gateway:getPolicyTier0Gateway": {
            "description": "This data source provides information about policy Tier-0 gateways configured on NSX.\n\nThis data source is applicable to NSX Policy Manager, NSX Global Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst tier0GwGateway = nsxt.getPolicyTier0Gateway({\n    displayName: \"tier0-gw\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntier0_gw_gateway = nsxt.get_policy_tier0_gateway(display_name=\"tier0-gw\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tier0GwGateway = Nsxt.GetPolicyTier0Gateway.Invoke(new()\n    {\n        DisplayName = \"tier0-gw\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyTier0Gateway(ctx, \u0026nsxt.LookupPolicyTier0GatewayArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"tier0-gw\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyTier0GatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tier0GwGateway = NsxtFunctions.getPolicyTier0Gateway(GetPolicyTier0GatewayArgs.builder()\n            .displayName(\"tier0-gw\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  tier0GwGateway:\n    fn::invoke:\n      Function: nsxt:getPolicyTier0Gateway\n      Arguments:\n        displayName: tier0-gw\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyTier0Gateway.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Tier-0 gateway to retrieve.\n"
                    },
                    "edgeClusterPath": {
                        "type": "string",
                        "description": "The path of the Edge cluster where this Tier-0 gateway is placed. This attribute is not set for NSX Global Manager, where gateway can spawn across multiple sites.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Tier-0 gateway to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyTier0Gateway.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "edgeClusterPath": {
                        "type": "string",
                        "description": "The path of the Edge cluster where this Tier-0 gateway is placed. This attribute is not set for NSX Global Manager, where gateway can spawn across multiple sites.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "edgeClusterPath",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyTier1Gateway:getPolicyTier1Gateway": {
            "description": "This data source provides information about policy Tier-1s configured on NSX.\n\nThis data source is applicable to NSX Policy Manager, NSX Global Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst tier1Router = nsxt.getPolicyTier1Gateway({\n    displayName: \"tier1_gw\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntier1_router = nsxt.get_policy_tier1_gateway(display_name=\"tier1_gw\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tier1Router = Nsxt.GetPolicyTier1Gateway.Invoke(new()\n    {\n        DisplayName = \"tier1_gw\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyTier1Gateway(ctx, \u0026nsxt.LookupPolicyTier1GatewayArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"tier1_gw\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyTier1GatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tier1Router = NsxtFunctions.getPolicyTier1Gateway(GetPolicyTier1GatewayArgs.builder()\n            .displayName(\"tier1_gw\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  tier1Router:\n    fn::invoke:\n      Function: nsxt:getPolicyTier1Gateway\n      Arguments:\n        displayName: tier1_gw\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst demotier1 = demoproj.then(demoproj =\u003e nsxt.getPolicyTier1Gateway({\n    context: {\n        projectId: demoproj.id,\n    },\n    displayName: \"demotier1\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\ndemotier1 = nsxt.get_policy_tier1_gateway(context=nsxt.GetPolicyTier1GatewayContextArgs(\n        project_id=demoproj.id,\n    ),\n    display_name=\"demotier1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var demotier1 = Nsxt.GetPolicyTier1Gateway.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicyTier1GatewayContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        DisplayName = \"demotier1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.LookupPolicyTier1Gateway(ctx, \u0026nsxt.LookupPolicyTier1GatewayArgs{\n\t\t\tContext: nsxt.GetPolicyTier1GatewayContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tDisplayName: pulumi.StringRef(\"demotier1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyTier1GatewayArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyTier1GatewayContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var demotier1 = NsxtFunctions.getPolicyTier1Gateway(GetPolicyTier1GatewayArgs.builder()\n            .context(GetPolicyTier1GatewayContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .displayName(\"demotier1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  demotier1:\n    fn::invoke:\n      Function: nsxt:getPolicyTier1Gateway\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        displayName: demotier1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyTier1Gateway.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyTier1GatewayContext:getPolicyTier1GatewayContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Tier-1 gateway to retrieve.\n"
                    },
                    "edgeClusterPath": {
                        "type": "string",
                        "description": "The path of the Edge cluster where this Tier-1 gateway is placed.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Tier-1 gateway to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyTier1Gateway.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyTier1GatewayContext:getPolicyTier1GatewayContext"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "edgeClusterPath": {
                        "type": "string",
                        "description": "The path of the Edge cluster where this Tier-1 gateway is placed.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "edgeClusterPath",
                    "id",
                    "path"
                ]
            }
        },
        "nsxt:index/getPolicyTransportZone:getPolicyTransportZone": {
            "description": "This data source provides information about Policy based Transport Zones (TZ) configured in NSX. A Transport Zone defines the scope to which a network can extend in NSX. For example an overlay based Transport Zone is associated with both hypervisors and logical switches and defines which hypervisors will be able to serve the defined logical switch. Virtual machines on the hypervisor associated with a Transport Zone can be attached to logical switches in that same Transport Zone.\n\nThis data source is applicable to NSX Global Manager, NSX Policy Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst overlayTransportZone = nsxt.getPolicyTransportZone({\n    displayName: \"1-transportzone-87\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\noverlay_transport_zone = nsxt.get_policy_transport_zone(display_name=\"1-transportzone-87\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var overlayTransportZone = Nsxt.GetPolicyTransportZone.Invoke(new()\n    {\n        DisplayName = \"1-transportzone-87\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyTransportZone(ctx, \u0026nsxt.LookupPolicyTransportZoneArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"1-transportzone-87\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyTransportZoneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var overlayTransportZone = NsxtFunctions.getPolicyTransportZone(GetPolicyTransportZoneArgs.builder()\n            .displayName(\"1-transportzone-87\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  overlayTransportZone:\n    fn::invoke:\n      Function: nsxt:getPolicyTransportZone\n      Arguments:\n        displayName: 1-transportzone-87\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst vlanTransportZone = nsxt.getPolicyTransportZone({\n    isDefault: true,\n    transportType: \"VLAN_BACKED\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\nvlan_transport_zone = nsxt.get_policy_transport_zone(is_default=True,\n    transport_type=\"VLAN_BACKED\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vlanTransportZone = Nsxt.GetPolicyTransportZone.Invoke(new()\n    {\n        IsDefault = true,\n        TransportType = \"VLAN_BACKED\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyTransportZone(ctx, \u0026nsxt.LookupPolicyTransportZoneArgs{\n\t\t\tIsDefault:     pulumi.BoolRef(true),\n\t\t\tTransportType: pulumi.StringRef(\"VLAN_BACKED\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyTransportZoneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var vlanTransportZone = NsxtFunctions.getPolicyTransportZone(GetPolicyTransportZoneArgs.builder()\n            .isDefault(true)\n            .transportType(\"VLAN_BACKED\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  vlanTransportZone:\n    fn::invoke:\n      Function: nsxt:getPolicyTransportZone\n      Arguments:\n        isDefault: true\n        transportType: VLAN_BACKED\n```\n\nNote: This usage is for Global Manager only.\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst paris = nsxt.getPolicySite({\n    displayName: \"Paris\",\n});\nconst overlayTransportZone = paris.then(paris =\u003e nsxt.getPolicyTransportZone({\n    displayName: \"1-transportzone-87\",\n    sitePath: paris.path,\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\nparis = nsxt.get_policy_site(display_name=\"Paris\")\noverlay_transport_zone = nsxt.get_policy_transport_zone(display_name=\"1-transportzone-87\",\n    site_path=paris.path)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var paris = Nsxt.GetPolicySite.Invoke(new()\n    {\n        DisplayName = \"Paris\",\n    });\n\n    var overlayTransportZone = Nsxt.GetPolicyTransportZone.Invoke(new()\n    {\n        DisplayName = \"1-transportzone-87\",\n        SitePath = paris.Apply(getPolicySiteResult =\u003e getPolicySiteResult.Path),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tparis, err := nsxt.GetPolicySite(ctx, \u0026nsxt.GetPolicySiteArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"Paris\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.LookupPolicyTransportZone(ctx, \u0026nsxt.LookupPolicyTransportZoneArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"1-transportzone-87\"),\n\t\t\tSitePath:    pulumi.StringRef(paris.Path),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicySiteArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyTransportZoneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var paris = NsxtFunctions.getPolicySite(GetPolicySiteArgs.builder()\n            .displayName(\"Paris\")\n            .build());\n\n        final var overlayTransportZone = NsxtFunctions.getPolicyTransportZone(GetPolicyTransportZoneArgs.builder()\n            .displayName(\"1-transportzone-87\")\n            .sitePath(paris.applyValue(getPolicySiteResult -\u003e getPolicySiteResult.path()))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  paris:\n    fn::invoke:\n      Function: nsxt:getPolicySite\n      Arguments:\n        displayName: Paris\n  overlayTransportZone:\n    fn::invoke:\n      Function: nsxt:getPolicyTransportZone\n      Arguments:\n        displayName: 1-transportzone-87\n        sitePath: ${paris.path}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyTransportZone.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Transport Zone.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Transport Zone to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Transport Zone to retrieve.\n"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "May be set together with `transport_type` in order to retrieve default Transport Zone for this transport type.\n"
                    },
                    "sitePath": {
                        "type": "string",
                        "description": "The path of the site which the Transport Zone belongs to, this configuration is required for global manager only. `path` field of the existing `nsxt.getPolicySite` can be used here.\n"
                    },
                    "transportType": {
                        "type": "string",
                        "description": "Transport type of requested Transport Zone, one of `OVERLAY_STANDARD`, `OVERLAY_ENS`, `OVERLAY_BACKED`, `VLAN_BACKED` and `UNKNOWN`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyTransportZone.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Transport Zone.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "A boolean flag indicating if this Transport Zone is the default.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "sitePath": {
                        "type": "string"
                    },
                    "transportType": {
                        "type": "string",
                        "description": "The transport type of this transport zone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "isDefault",
                    "path",
                    "transportType"
                ]
            }
        },
        "nsxt:index/getPolicyVm:getPolicyVm": {
            "description": "This data source provides information about Policy based Virtual Machine (VM) listed in NSX inventory, and allows look-up of the VM by `display_name` or the BIOS, external or instance ID exposed on the VM resource.\n\nThis data source is applicable to NSX Policy Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst nsxtVm1 = nsxt.getPolicyVm({\n    displayName: \"nsxt-virtualmachine1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\nnsxt_vm1 = nsxt.get_policy_vm(display_name=\"nsxt-virtualmachine1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nsxtVm1 = Nsxt.GetPolicyVm.Invoke(new()\n    {\n        DisplayName = \"nsxt-virtualmachine1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetPolicyVm(ctx, \u0026nsxt.GetPolicyVmArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"nsxt-virtualmachine1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyVmArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var nsxtVm1 = NsxtFunctions.getPolicyVm(GetPolicyVmArgs.builder()\n            .displayName(\"nsxt-virtualmachine1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  nsxtVm1:\n    fn::invoke:\n      Function: nsxt:getPolicyVm\n      Arguments:\n        displayName: nsxt-virtualmachine1\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst nsxtVm1 = demoproj.then(demoproj =\u003e nsxt.getPolicyVm({\n    context: {\n        projectId: demoproj.id,\n    },\n    displayName: \"nsxt-virtualmachine1\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\nnsxt_vm1 = nsxt.get_policy_vm(context=nsxt.GetPolicyVmContextArgs(\n        project_id=demoproj.id,\n    ),\n    display_name=\"nsxt-virtualmachine1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var nsxtVm1 = Nsxt.GetPolicyVm.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicyVmContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        DisplayName = \"nsxt-virtualmachine1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.GetPolicyVm(ctx, \u0026nsxt.GetPolicyVmArgs{\n\t\t\tContext: nsxt.GetPolicyVmContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tDisplayName: pulumi.StringRef(\"nsxt-virtualmachine1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyVmArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyVmContextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var nsxtVm1 = NsxtFunctions.getPolicyVm(GetPolicyVmArgs.builder()\n            .context(GetPolicyVmContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .displayName(\"nsxt-virtualmachine1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  nsxtVm1:\n    fn::invoke:\n      Function: nsxt:getPolicyVm\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        displayName: nsxt-virtualmachine1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyVm.\n",
                "properties": {
                    "biosId": {
                        "type": "string",
                        "description": "The BIOS UUID of the Virtual Machine.\n"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyVmContext:getPolicyVmContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Virtual Machine.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Virtual Machine to retrieve.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "The external ID of the Virtual Machine.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The instance UUID of the Virtual Machine.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyVm.\n",
                "properties": {
                    "biosId": {
                        "type": "string"
                    },
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyVmContext:getPolicyVmContext"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Virtual Machine.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "externalId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "instanceId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "biosId",
                    "description",
                    "displayName",
                    "externalId",
                    "instanceId",
                    "id"
                ]
            }
        },
        "nsxt:index/getPolicyVms:getPolicyVms": {
            "description": "This data source provides map of all Policy based Virtual Machines (VMs) listed in NSX inventory, and allows look-up of the VM by `display_name` in the map. Value of the map would provide one of VM ID types, according to `value_type` argument.\n\nThis data source is applicable to NSX Policy Manager and VMC.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@SCC-Hyperscale-fr/nsxt\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst all = nsxt.getPolicyVms({\n    state: \"running\",\n    guestOs: \"ubuntu\",\n    valueType: \"bios_id\",\n});\nconst test = new nsxt.PolicyVmTags(\"test\", {\n    instanceId: all.then(all =\u003e all.items?.[\"vm-1\"]),\n    tags: [{\n        scope: \"color\",\n        tag: \"blue\",\n    }],\n});\n```\n```python\nimport pulumi\nimport hyperscale_pulumi_nsxt as nsxt\nimport pulumi_nsxt as nsxt\n\nall = nsxt.get_policy_vms(state=\"running\",\n    guest_os=\"ubuntu\",\n    value_type=\"bios_id\")\ntest = nsxt.PolicyVmTags(\"test\",\n    instance_id=all.items[\"vm-1\"],\n    tags=[nsxt.PolicyVmTagsTagArgs(\n        scope=\"color\",\n        tag=\"blue\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\nusing Nsxt = SCC-Hyperscale-fr.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Nsxt.GetPolicyVms.Invoke(new()\n    {\n        State = \"running\",\n        GuestOs = \"ubuntu\",\n        ValueType = \"bios_id\",\n    });\n\n    var test = new Nsxt.PolicyVmTags(\"test\", new()\n    {\n        InstanceId = all.Apply(getPolicyVmsResult =\u003e getPolicyVmsResult.Items?.Vm_1),\n        Tags = new[]\n        {\n            new Nsxt.Inputs.PolicyVmTagsTagArgs\n            {\n                Scope = \"color\",\n                Tag = \"blue\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tall, err := nsxt.GetPolicyVms(ctx, \u0026nsxt.GetPolicyVmsArgs{\n\t\t\tState:     pulumi.StringRef(\"running\"),\n\t\t\tGuestOs:   pulumi.StringRef(\"ubuntu\"),\n\t\t\tValueType: pulumi.StringRef(\"bios_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.NewPolicyVmTags(ctx, \"test\", \u0026nsxt.PolicyVmTagsArgs{\n\t\t\tInstanceId: *pulumi.String(all.Items.Vm1),\n\t\t\tTags: nsxt.PolicyVmTagsTagArray{\n\t\t\t\t\u0026nsxt.PolicyVmTagsTagArgs{\n\t\t\t\t\tScope: pulumi.String(\"color\"),\n\t\t\t\t\tTag:   pulumi.String(\"blue\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyVmsArgs;\nimport com.pulumi.nsxt.PolicyVmTags;\nimport com.pulumi.nsxt.PolicyVmTagsArgs;\nimport com.pulumi.nsxt.inputs.PolicyVmTagsTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = NsxtFunctions.getPolicyVms(GetPolicyVmsArgs.builder()\n            .state(\"running\")\n            .guestOs(\"ubuntu\")\n            .valueType(\"bios_id\")\n            .build());\n\n        var test = new PolicyVmTags(\"test\", PolicyVmTagsArgs.builder()        \n            .instanceId(all.applyValue(getPolicyVmsResult -\u003e getPolicyVmsResult.items().vm-1()))\n            .tags(PolicyVmTagsTagArgs.builder()\n                .scope(\"color\")\n                .tag(\"blue\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: nsxt:PolicyVmTags\n    properties:\n      instanceId: ${all.items\"vm-1\"[%!s(MISSING)]}\n      tags:\n        - scope: color\n          tag: blue\nvariables:\n  all:\n    fn::invoke:\n      Function: nsxt:getPolicyVms\n      Arguments:\n        state: running\n        guestOs: ubuntu\n        valueType: bios_id\n```\n{{% /example %}}\n{{% example %}}\n### Multi-Tenancy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@SCC-Hyperscale-fr/nsxt\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst demoproj = nsxt.getPolicyProject({\n    displayName: \"demoproj\",\n});\nconst all = demoproj.then(demoproj =\u003e nsxt.getPolicyVms({\n    context: {\n        projectId: demoproj.id,\n    },\n    state: \"running\",\n    guestOs: \"ubuntu\",\n    valueType: \"bios_id\",\n}));\nconst test = new nsxt.PolicyVmTags(\"test\", {\n    context: {\n        projectId: demoproj.then(demoproj =\u003e demoproj.id),\n    },\n    instanceId: all.then(all =\u003e all.items?.[\"vm-1\"]),\n    tags: [{\n        scope: \"color\",\n        tag: \"blue\",\n    }],\n});\n```\n```python\nimport pulumi\nimport hyperscale_pulumi_nsxt as nsxt\nimport pulumi_nsxt as nsxt\n\ndemoproj = nsxt.get_policy_project(display_name=\"demoproj\")\nall = nsxt.get_policy_vms(context=nsxt.GetPolicyVmsContextArgs(\n        project_id=demoproj.id,\n    ),\n    state=\"running\",\n    guest_os=\"ubuntu\",\n    value_type=\"bios_id\")\ntest = nsxt.PolicyVmTags(\"test\",\n    context=nsxt.PolicyVmTagsContextArgs(\n        project_id=demoproj.id,\n    ),\n    instance_id=all.items[\"vm-1\"],\n    tags=[nsxt.PolicyVmTagsTagArgs(\n        scope=\"color\",\n        tag=\"blue\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\nusing Nsxt = SCC-Hyperscale-fr.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demoproj = Nsxt.GetPolicyProject.Invoke(new()\n    {\n        DisplayName = \"demoproj\",\n    });\n\n    var all = Nsxt.GetPolicyVms.Invoke(new()\n    {\n        Context = new Nsxt.Inputs.GetPolicyVmsContextInputArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        State = \"running\",\n        GuestOs = \"ubuntu\",\n        ValueType = \"bios_id\",\n    });\n\n    var test = new Nsxt.PolicyVmTags(\"test\", new()\n    {\n        Context = new Nsxt.Inputs.PolicyVmTagsContextArgs\n        {\n            ProjectId = demoproj.Apply(getPolicyProjectResult =\u003e getPolicyProjectResult.Id),\n        },\n        InstanceId = all.Apply(getPolicyVmsResult =\u003e getPolicyVmsResult.Items?.Vm_1),\n        Tags = new[]\n        {\n            new Nsxt.Inputs.PolicyVmTagsTagArgs\n            {\n                Scope = \"color\",\n                Tag = \"blue\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemoproj, err := nsxt.LookupPolicyProject(ctx, \u0026nsxt.LookupPolicyProjectArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"demoproj\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tall, err := nsxt.GetPolicyVms(ctx, \u0026nsxt.GetPolicyVmsArgs{\n\t\t\tContext: nsxt.GetPolicyVmsContext{\n\t\t\t\tProjectId: demoproj.Id,\n\t\t\t},\n\t\t\tState:     pulumi.StringRef(\"running\"),\n\t\t\tGuestOs:   pulumi.StringRef(\"ubuntu\"),\n\t\t\tValueType: pulumi.StringRef(\"bios_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = nsxt.NewPolicyVmTags(ctx, \"test\", \u0026nsxt.PolicyVmTagsArgs{\n\t\t\tContext: \u0026nsxt.PolicyVmTagsContextArgs{\n\t\t\t\tProjectId: *pulumi.String(demoproj.Id),\n\t\t\t},\n\t\t\tInstanceId: *pulumi.String(all.Items.Vm1),\n\t\t\tTags: nsxt.PolicyVmTagsTagArray{\n\t\t\t\t\u0026nsxt.PolicyVmTagsTagArgs{\n\t\t\t\t\tScope: pulumi.String(\"color\"),\n\t\t\t\t\tTag:   pulumi.String(\"blue\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyProjectArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyVmsArgs;\nimport com.pulumi.nsxt.inputs.GetPolicyVmsContextArgs;\nimport com.pulumi.nsxt.PolicyVmTags;\nimport com.pulumi.nsxt.PolicyVmTagsArgs;\nimport com.pulumi.nsxt.inputs.PolicyVmTagsContextArgs;\nimport com.pulumi.nsxt.inputs.PolicyVmTagsTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demoproj = NsxtFunctions.getPolicyProject(GetPolicyProjectArgs.builder()\n            .displayName(\"demoproj\")\n            .build());\n\n        final var all = NsxtFunctions.getPolicyVms(GetPolicyVmsArgs.builder()\n            .context(GetPolicyVmsContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .state(\"running\")\n            .guestOs(\"ubuntu\")\n            .valueType(\"bios_id\")\n            .build());\n\n        var test = new PolicyVmTags(\"test\", PolicyVmTagsArgs.builder()        \n            .context(PolicyVmTagsContextArgs.builder()\n                .projectId(demoproj.applyValue(getPolicyProjectResult -\u003e getPolicyProjectResult.id()))\n                .build())\n            .instanceId(all.applyValue(getPolicyVmsResult -\u003e getPolicyVmsResult.items().vm-1()))\n            .tags(PolicyVmTagsTagArgs.builder()\n                .scope(\"color\")\n                .tag(\"blue\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: nsxt:PolicyVmTags\n    properties:\n      context:\n        projectId: ${demoproj.id}\n      instanceId: ${all.items\"vm-1\"[%!s(MISSING)]}\n      tags:\n        - scope: color\n          tag: blue\nvariables:\n  demoproj:\n    fn::invoke:\n      Function: nsxt:getPolicyProject\n      Arguments:\n        displayName: demoproj\n  all:\n    fn::invoke:\n      Function: nsxt:getPolicyVms\n      Arguments:\n        context:\n          projectId: ${demoproj.id}\n        state: running\n        guestOs: ubuntu\n        valueType: bios_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyVms.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyVmsContext:getPolicyVmsContext",
                        "description": "The context which the object belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "guestOs": {
                        "type": "string",
                        "description": "Filter results by operating system of the machine. The match is case insensitive and prefix-based.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Filter results by power state of the machine.\n"
                    },
                    "valueType": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyVms.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/nsxt:index/getPolicyVmsContext:getPolicyVmsContext"
                    },
                    "guestOs": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of IDs by Display Name.\n"
                    },
                    "state": {
                        "type": "string"
                    },
                    "valueType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "items",
                    "id"
                ]
            }
        },
        "nsxt:index/getPolicyVniPool:getPolicyVniPool": {
            "description": "This data source provides information about policy VNI Pools configured in NSX.\n\nThis data source is applicable to NSX Policy Manager.\n\nThis data source is supported with NSX 3.0.0 onwards.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst test = nsxt.getPolicyVniPool({\n    displayName: \"vnipool1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\ntest = nsxt.get_policy_vni_pool(display_name=\"vnipool1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Nsxt.GetPolicyVniPool.Invoke(new()\n    {\n        DisplayName = \"vnipool1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupPolicyVniPool(ctx, \u0026nsxt.LookupPolicyVniPoolArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"vnipool1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetPolicyVniPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = NsxtFunctions.getPolicyVniPool(GetPolicyVniPoolArgs.builder()\n            .displayName(\"vnipool1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: nsxt:getPolicyVniPool\n      Arguments:\n        displayName: vnipool1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPolicyVniPool.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the VNI Pool Config to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of VNI Pool Config to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPolicyVniPool.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "end": {
                        "type": "integer",
                        "description": "The end range of VNI Pool.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    },
                    "start": {
                        "type": "integer",
                        "description": "The start range of VNI Pool.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "end",
                    "id",
                    "path",
                    "start"
                ]
            }
        },
        "nsxt:index/getProviderInfo:getProviderInfo": {
            "outputs": {
                "description": "A collection of values returned by getProviderInfo.\n",
                "properties": {
                    "commit": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "commit",
                    "date",
                    "id"
                ]
            }
        },
        "nsxt:index/getSwitchingProfile:getSwitchingProfile": {
            "description": "The switching profile data source provides information about switching profiles configured in NSX. A switching profile is a template that defines the settings of one or more logical switches. There can be both factory default and user defined switching profiles. One example of a switching profile is a quality of service (QoS) profile which defines the QoS settings of all switches that use the defined switch profile.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst qosProfile = nsxt.getSwitchingProfile({\n    displayName: \"qos-profile\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\nqos_profile = nsxt.get_switching_profile(display_name=\"qos-profile\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var qosProfile = Nsxt.GetSwitchingProfile.Invoke(new()\n    {\n        DisplayName = \"qos-profile\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetSwitchingProfile(ctx, \u0026nsxt.GetSwitchingProfileArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"qos-profile\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetSwitchingProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var qosProfile = NsxtFunctions.getSwitchingProfile(GetSwitchingProfileArgs.builder()\n            .displayName(\"qos-profile\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  qosProfile:\n    fn::invoke:\n      Function: nsxt:getSwitchingProfile\n      Arguments:\n        displayName: qos-profile\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSwitchingProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the switching profile.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name of the Switching Profile to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Switching Profile to retrieve.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSwitchingProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the switching profile.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "The resource type representing the specific type of this switching profile.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "id",
                    "resourceType"
                ]
            }
        },
        "nsxt:index/getTransportNodeRealization:getTransportNodeRealization": {
            "description": "This data source provides information about the realization of a transport node resource on NSX manager. This data source will wait until realization is determined as either success or error. It is recommended to use this data source if further configuration depends on transport node realization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@SCC-Hyperscale-fr/nsxt\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst testTransportNode = new nsxt.TransportNode(\"testTransportNode\", {\n    description: \"Terraform-deployed edge node\",\n    displayName: \"tf_edge_node\",\n    standardHostSwitch: {\n        hostSwitchMode: \"STANDARD\",\n        hostSwitchType: \"NVDS\",\n        ipAssignment: {\n            staticIpPool: data.nsxt_ip_pool.ipp1.id,\n        },\n        transportZoneEndpoints: [{\n            transportZone: data.nsxt_transport_zone.tz1.id,\n            transportZoneProfiles: [\"52035bb3-ab02-4a08-9884-18631312e50a\"],\n        }],\n        hostSwitchProfiles: [nsxt_uplink_host_switch_profile.hsw_profile1.id],\n        isMigratePnics: false,\n        pnics: [{\n            deviceName: \"fp-eth0\",\n            uplinkName: \"uplink1\",\n        }],\n    },\n    edgeNode: {\n        deploymentConfig: {\n            formFactor: \"SMALL\",\n            nodeUserSettings: {\n                cliPassword: \"some_cli_password\",\n                rootPassword: \"some_other_password\",\n            },\n            vmDeploymentConfig: {\n                managementNetworkId: data.vsphere_network.network1.id,\n                dataNetworkIds: [data.vsphere_network.network1.id],\n                computeId: data.vsphere_compute_cluster.compute_cluster1.id,\n                storageId: data.vsphere_datastore.datastore1.id,\n                vcId: nsxt_compute_manager.vc1.id,\n                hostId: data.vsphere_host.host1.id,\n            },\n        },\n        nodeSettings: {\n            hostname: \"tf_edge_node\",\n            allowSshRootLogin: true,\n            enableSsh: true,\n        },\n    },\n});\nconst testTransportNodeRealization = testTransportNode.id.apply(id =\u003e nsxt.getTransportNodeRealizationOutput({\n    id: id,\n    timeout: 60,\n}));\n```\n```python\nimport pulumi\nimport hyperscale_pulumi_nsxt as nsxt\nimport pulumi_nsxt as nsxt\n\ntest_transport_node = nsxt.TransportNode(\"testTransportNode\",\n    description=\"Terraform-deployed edge node\",\n    display_name=\"tf_edge_node\",\n    standard_host_switch=nsxt.TransportNodeStandardHostSwitchArgs(\n        host_switch_mode=\"STANDARD\",\n        host_switch_type=\"NVDS\",\n        ip_assignment=nsxt.TransportNodeStandardHostSwitchIpAssignmentArgs(\n            static_ip_pool=data[\"nsxt_ip_pool\"][\"ipp1\"][\"id\"],\n        ),\n        transport_zone_endpoints=[nsxt.TransportNodeStandardHostSwitchTransportZoneEndpointArgs(\n            transport_zone=data[\"nsxt_transport_zone\"][\"tz1\"][\"id\"],\n            transport_zone_profiles=[\"52035bb3-ab02-4a08-9884-18631312e50a\"],\n        )],\n        host_switch_profiles=[nsxt_uplink_host_switch_profile[\"hsw_profile1\"][\"id\"]],\n        is_migrate_pnics=False,\n        pnics=[nsxt.TransportNodeStandardHostSwitchPnicArgs(\n            device_name=\"fp-eth0\",\n            uplink_name=\"uplink1\",\n        )],\n    ),\n    edge_node=nsxt.TransportNodeEdgeNodeArgs(\n        deployment_config=nsxt.TransportNodeEdgeNodeDeploymentConfigArgs(\n            form_factor=\"SMALL\",\n            node_user_settings=nsxt.TransportNodeEdgeNodeDeploymentConfigNodeUserSettingsArgs(\n                cli_password=\"some_cli_password\",\n                root_password=\"some_other_password\",\n            ),\n            vm_deployment_config=nsxt.TransportNodeEdgeNodeDeploymentConfigVmDeploymentConfigArgs(\n                management_network_id=data[\"vsphere_network\"][\"network1\"][\"id\"],\n                data_network_ids=[data[\"vsphere_network\"][\"network1\"][\"id\"]],\n                compute_id=data[\"vsphere_compute_cluster\"][\"compute_cluster1\"][\"id\"],\n                storage_id=data[\"vsphere_datastore\"][\"datastore1\"][\"id\"],\n                vc_id=nsxt_compute_manager[\"vc1\"][\"id\"],\n                host_id=data[\"vsphere_host\"][\"host1\"][\"id\"],\n            ),\n        ),\n        node_settings=nsxt.TransportNodeEdgeNodeNodeSettingsArgs(\n            hostname=\"tf_edge_node\",\n            allow_ssh_root_login=True,\n            enable_ssh=True,\n        ),\n    ))\ntest_transport_node_realization = test_transport_node.id.apply(lambda id: nsxt.get_transport_node_realization_output(id=id,\n    timeout=60))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\nusing Nsxt = SCC-Hyperscale-fr.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testTransportNode = new Nsxt.TransportNode(\"testTransportNode\", new()\n    {\n        Description = \"Terraform-deployed edge node\",\n        DisplayName = \"tf_edge_node\",\n        StandardHostSwitch = new Nsxt.Inputs.TransportNodeStandardHostSwitchArgs\n        {\n            HostSwitchMode = \"STANDARD\",\n            HostSwitchType = \"NVDS\",\n            IpAssignment = new Nsxt.Inputs.TransportNodeStandardHostSwitchIpAssignmentArgs\n            {\n                StaticIpPool = data.Nsxt_ip_pool.Ipp1.Id,\n            },\n            TransportZoneEndpoints = new[]\n            {\n                new Nsxt.Inputs.TransportNodeStandardHostSwitchTransportZoneEndpointArgs\n                {\n                    TransportZone = data.Nsxt_transport_zone.Tz1.Id,\n                    TransportZoneProfiles = new[]\n                    {\n                        \"52035bb3-ab02-4a08-9884-18631312e50a\",\n                    },\n                },\n            },\n            HostSwitchProfiles = new[]\n            {\n                nsxt_uplink_host_switch_profile.Hsw_profile1.Id,\n            },\n            IsMigratePnics = false,\n            Pnics = new[]\n            {\n                new Nsxt.Inputs.TransportNodeStandardHostSwitchPnicArgs\n                {\n                    DeviceName = \"fp-eth0\",\n                    UplinkName = \"uplink1\",\n                },\n            },\n        },\n        EdgeNode = new Nsxt.Inputs.TransportNodeEdgeNodeArgs\n        {\n            DeploymentConfig = new Nsxt.Inputs.TransportNodeEdgeNodeDeploymentConfigArgs\n            {\n                FormFactor = \"SMALL\",\n                NodeUserSettings = new Nsxt.Inputs.TransportNodeEdgeNodeDeploymentConfigNodeUserSettingsArgs\n                {\n                    CliPassword = \"some_cli_password\",\n                    RootPassword = \"some_other_password\",\n                },\n                VmDeploymentConfig = new Nsxt.Inputs.TransportNodeEdgeNodeDeploymentConfigVmDeploymentConfigArgs\n                {\n                    ManagementNetworkId = data.Vsphere_network.Network1.Id,\n                    DataNetworkIds = new[]\n                    {\n                        data.Vsphere_network.Network1.Id,\n                    },\n                    ComputeId = data.Vsphere_compute_cluster.Compute_cluster1.Id,\n                    StorageId = data.Vsphere_datastore.Datastore1.Id,\n                    VcId = nsxt_compute_manager.Vc1.Id,\n                    HostId = data.Vsphere_host.Host1.Id,\n                },\n            },\n            NodeSettings = new Nsxt.Inputs.TransportNodeEdgeNodeNodeSettingsArgs\n            {\n                Hostname = \"tf_edge_node\",\n                AllowSshRootLogin = true,\n                EnableSsh = true,\n            },\n        },\n    });\n\n    var testTransportNodeRealization = Nsxt.GetTransportNodeRealization.Invoke(new()\n    {\n        Id = testTransportNode.Id,\n        Timeout = 60,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestTransportNode, err := nsxt.NewTransportNode(ctx, \"testTransportNode\", \u0026nsxt.TransportNodeArgs{\n\t\t\tDescription: pulumi.String(\"Terraform-deployed edge node\"),\n\t\t\tDisplayName: pulumi.String(\"tf_edge_node\"),\n\t\t\tStandardHostSwitch: \u0026nsxt.TransportNodeStandardHostSwitchArgs{\n\t\t\t\tHostSwitchMode: pulumi.String(\"STANDARD\"),\n\t\t\t\tHostSwitchType: pulumi.String(\"NVDS\"),\n\t\t\t\tIpAssignment: \u0026nsxt.TransportNodeStandardHostSwitchIpAssignmentArgs{\n\t\t\t\t\tStaticIpPool: pulumi.Any(data.Nsxt_ip_pool.Ipp1.Id),\n\t\t\t\t},\n\t\t\t\tTransportZoneEndpoints: nsxt.TransportNodeStandardHostSwitchTransportZoneEndpointArray{\n\t\t\t\t\t\u0026nsxt.TransportNodeStandardHostSwitchTransportZoneEndpointArgs{\n\t\t\t\t\t\tTransportZone: pulumi.Any(data.Nsxt_transport_zone.Tz1.Id),\n\t\t\t\t\t\tTransportZoneProfiles: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"52035bb3-ab02-4a08-9884-18631312e50a\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tHostSwitchProfiles: pulumi.StringArray{\n\t\t\t\t\tnsxt_uplink_host_switch_profile.Hsw_profile1.Id,\n\t\t\t\t},\n\t\t\t\tIsMigratePnics: pulumi.Bool(false),\n\t\t\t\tPnics: nsxt.TransportNodeStandardHostSwitchPnicArray{\n\t\t\t\t\t\u0026nsxt.TransportNodeStandardHostSwitchPnicArgs{\n\t\t\t\t\t\tDeviceName: pulumi.String(\"fp-eth0\"),\n\t\t\t\t\t\tUplinkName: pulumi.String(\"uplink1\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tEdgeNode: \u0026nsxt.TransportNodeEdgeNodeArgs{\n\t\t\t\tDeploymentConfig: \u0026nsxt.TransportNodeEdgeNodeDeploymentConfigArgs{\n\t\t\t\t\tFormFactor: pulumi.String(\"SMALL\"),\n\t\t\t\t\tNodeUserSettings: \u0026nsxt.TransportNodeEdgeNodeDeploymentConfigNodeUserSettingsArgs{\n\t\t\t\t\t\tCliPassword:  pulumi.String(\"some_cli_password\"),\n\t\t\t\t\t\tRootPassword: pulumi.String(\"some_other_password\"),\n\t\t\t\t\t},\n\t\t\t\t\tVmDeploymentConfig: \u0026nsxt.TransportNodeEdgeNodeDeploymentConfigVmDeploymentConfigArgs{\n\t\t\t\t\t\tManagementNetworkId: pulumi.Any(data.Vsphere_network.Network1.Id),\n\t\t\t\t\t\tDataNetworkIds: pulumi.StringArray{\n\t\t\t\t\t\t\tdata.Vsphere_network.Network1.Id,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tComputeId: pulumi.Any(data.Vsphere_compute_cluster.Compute_cluster1.Id),\n\t\t\t\t\t\tStorageId: pulumi.Any(data.Vsphere_datastore.Datastore1.Id),\n\t\t\t\t\t\tVcId:      pulumi.Any(nsxt_compute_manager.Vc1.Id),\n\t\t\t\t\t\tHostId:    pulumi.Any(data.Vsphere_host.Host1.Id),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tNodeSettings: \u0026nsxt.TransportNodeEdgeNodeNodeSettingsArgs{\n\t\t\t\t\tHostname:          pulumi.String(\"tf_edge_node\"),\n\t\t\t\t\tAllowSshRootLogin: pulumi.Bool(true),\n\t\t\t\t\tEnableSsh:         pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_ = testTransportNode.ID().ApplyT(func(id string) (nsxt.GetTransportNodeRealizationResult, error) {\n\t\t\treturn nsxt.GetTransportNodeRealizationOutput(ctx, nsxt.GetTransportNodeRealizationOutputArgs{\n\t\t\t\tId:      id,\n\t\t\t\tTimeout: 60,\n\t\t\t}, nil), nil\n\t\t}).(nsxt.GetTransportNodeRealizationResultOutput)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.TransportNode;\nimport com.pulumi.nsxt.TransportNodeArgs;\nimport com.pulumi.nsxt.inputs.TransportNodeStandardHostSwitchArgs;\nimport com.pulumi.nsxt.inputs.TransportNodeStandardHostSwitchIpAssignmentArgs;\nimport com.pulumi.nsxt.inputs.TransportNodeEdgeNodeArgs;\nimport com.pulumi.nsxt.inputs.TransportNodeEdgeNodeDeploymentConfigArgs;\nimport com.pulumi.nsxt.inputs.TransportNodeEdgeNodeDeploymentConfigNodeUserSettingsArgs;\nimport com.pulumi.nsxt.inputs.TransportNodeEdgeNodeDeploymentConfigVmDeploymentConfigArgs;\nimport com.pulumi.nsxt.inputs.TransportNodeEdgeNodeNodeSettingsArgs;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetTransportNodeRealizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testTransportNode = new TransportNode(\"testTransportNode\", TransportNodeArgs.builder()        \n            .description(\"Terraform-deployed edge node\")\n            .displayName(\"tf_edge_node\")\n            .standardHostSwitch(TransportNodeStandardHostSwitchArgs.builder()\n                .hostSwitchMode(\"STANDARD\")\n                .hostSwitchType(\"NVDS\")\n                .ipAssignment(TransportNodeStandardHostSwitchIpAssignmentArgs.builder()\n                    .staticIpPool(data.nsxt_ip_pool().ipp1().id())\n                    .build())\n                .transportZoneEndpoints(TransportNodeStandardHostSwitchTransportZoneEndpointArgs.builder()\n                    .transportZone(data.nsxt_transport_zone().tz1().id())\n                    .transportZoneProfiles(\"52035bb3-ab02-4a08-9884-18631312e50a\")\n                    .build())\n                .hostSwitchProfiles(nsxt_uplink_host_switch_profile.hsw_profile1().id())\n                .isMigratePnics(false)\n                .pnics(TransportNodeStandardHostSwitchPnicArgs.builder()\n                    .deviceName(\"fp-eth0\")\n                    .uplinkName(\"uplink1\")\n                    .build())\n                .build())\n            .edgeNode(TransportNodeEdgeNodeArgs.builder()\n                .deploymentConfig(TransportNodeEdgeNodeDeploymentConfigArgs.builder()\n                    .formFactor(\"SMALL\")\n                    .nodeUserSettings(TransportNodeEdgeNodeDeploymentConfigNodeUserSettingsArgs.builder()\n                        .cliPassword(\"some_cli_password\")\n                        .rootPassword(\"some_other_password\")\n                        .build())\n                    .vmDeploymentConfig(TransportNodeEdgeNodeDeploymentConfigVmDeploymentConfigArgs.builder()\n                        .managementNetworkId(data.vsphere_network().network1().id())\n                        .dataNetworkIds(data.vsphere_network().network1().id())\n                        .computeId(data.vsphere_compute_cluster().compute_cluster1().id())\n                        .storageId(data.vsphere_datastore().datastore1().id())\n                        .vcId(nsxt_compute_manager.vc1().id())\n                        .hostId(data.vsphere_host().host1().id())\n                        .build())\n                    .build())\n                .nodeSettings(TransportNodeEdgeNodeNodeSettingsArgs.builder()\n                    .hostname(\"tf_edge_node\")\n                    .allowSshRootLogin(true)\n                    .enableSsh(true)\n                    .build())\n                .build())\n            .build());\n\n        final var testTransportNodeRealization = NsxtFunctions.getTransportNodeRealization(GetTransportNodeRealizationArgs.builder()\n            .id(testTransportNode.id())\n            .timeout(60)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testTransportNode:\n    type: nsxt:TransportNode\n    properties:\n      description: Terraform-deployed edge node\n      displayName: tf_edge_node\n      standardHostSwitch:\n        hostSwitchMode: STANDARD\n        hostSwitchType: NVDS\n        ipAssignment:\n          staticIpPool: ${data.nsxt_ip_pool.ipp1.id}\n        transportZoneEndpoints:\n          - transportZone: ${data.nsxt_transport_zone.tz1.id}\n            transportZoneProfiles:\n              - 52035bb3-ab02-4a08-9884-18631312e50a\n        hostSwitchProfiles:\n          - ${nsxt_uplink_host_switch_profile.hsw_profile1.id}\n        isMigratePnics: false\n        pnics:\n          - deviceName: fp-eth0\n            uplinkName: uplink1\n      edgeNode:\n        deploymentConfig:\n          formFactor: SMALL\n          nodeUserSettings:\n            cliPassword: some_cli_password\n            rootPassword: some_other_password\n          vmDeploymentConfig:\n            managementNetworkId: ${data.vsphere_network.network1.id}\n            dataNetworkIds:\n              - ${data.vsphere_network.network1.id}\n            computeId: ${data.vsphere_compute_cluster.compute_cluster1.id}\n            storageId: ${data.vsphere_datastore.datastore1.id}\n            vcId: ${nsxt_compute_manager.vc1.id}\n            hostId: ${data.vsphere_host.host1.id}\n        nodeSettings:\n          hostname: tf_edge_node\n          allowSshRootLogin: true\n          enableSsh: true\nvariables:\n  testTransportNodeRealization:\n    fn::invoke:\n      Function: nsxt:getTransportNodeRealization\n      Arguments:\n        id: ${testTransportNode.id}\n        timeout: 60\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTransportNodeRealization.\n",
                "properties": {
                    "delay": {
                        "type": "integer",
                        "description": "Delay (in seconds) before realization polling is started. Default is set to 1.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the resource.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "Timeout (in seconds) for realization polling. Default is set to 1200.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTransportNodeRealization.\n",
                "properties": {
                    "delay": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string",
                        "description": "The realization state of the resource. Transitional states are: \"pending\", \"in_progress\", \"in_sync\", \"unknown\". Target states are: \"success\", \"failed\", \"partial_success\", \"orphaned\", \"error\".\n"
                    },
                    "timeout": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "state"
                ]
            }
        },
        "nsxt:index/getTransportZone:getTransportZone": {
            "description": "This data source provides information about Transport Zones (TZ) configured in NSX. A Transport Zone defines the scope to which a network can extend in NSX. For example an overlay based Transport Zone is associated with both hypervisors and logical switches and defines which hypervisors will be able to serve the defined logical switch. Virtual machines on the hypervisor associated with a Transport Zone can be attached to logical switches in that same Transport Zone.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst overlayTransportZone = nsxt.getTransportZone({\n    displayName: \"1-transportzone-87\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\noverlay_transport_zone = nsxt.get_transport_zone(display_name=\"1-transportzone-87\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var overlayTransportZone = Nsxt.GetTransportZone.Invoke(new()\n    {\n        DisplayName = \"1-transportzone-87\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.GetTransportZone(ctx, \u0026nsxt.GetTransportZoneArgs{\n\t\t\tDisplayName: pulumi.StringRef(\"1-transportzone-87\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetTransportZoneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var overlayTransportZone = NsxtFunctions.getTransportZone(GetTransportZoneArgs.builder()\n            .displayName(\"1-transportzone-87\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  overlayTransportZone:\n    fn::invoke:\n      Function: nsxt:getTransportZone\n      Arguments:\n        displayName: 1-transportzone-87\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTransportZone.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Transport Zone.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the Transport Zone to retrieve.\n"
                    },
                    "hostSwitchName": {
                        "type": "string",
                        "description": "The name of the N-VDS (host switch) on all Transport Nodes in this Transport Zone that will be used to run NSX network traffic.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of Transport Zone to retrieve.\n"
                    },
                    "transportType": {
                        "type": "string",
                        "description": "The transport type of this transport zone (OVERLAY or VLAN).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTransportZone.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Transport Zone.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "hostSwitchName": {
                        "type": "string",
                        "description": "The name of the N-VDS (host switch) on all Transport Nodes in this Transport Zone that will be used to run NSX network traffic.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "transportType": {
                        "type": "string",
                        "description": "The transport type of this transport zone (OVERLAY or VLAN).\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "hostSwitchName",
                    "id",
                    "transportType"
                ]
            }
        },
        "nsxt:index/getUplinkHostSwitchProfile:getUplinkHostSwitchProfile": {
            "description": "This data source provides information about uplink host switch profile configured on NSX.\nThis data source is applicable to NSX Policy Manager.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as nsxt from \"@pulumi/nsxt\";\n\nconst uplinkHostSwitchProfile = nsxt.getUplinkHostSwitchProfile({\n    displayName: \"uplink_host_switch_profile1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_nsxt as nsxt\n\nuplink_host_switch_profile = nsxt.get_uplink_host_switch_profile(display_name=\"uplink_host_switch_profile1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Nsxt = Pulumi.Nsxt;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var uplinkHostSwitchProfile = Nsxt.GetUplinkHostSwitchProfile.Invoke(new()\n    {\n        DisplayName = \"uplink_host_switch_profile1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/SCC-Hyperscale-fr/pulumi-nsxt/sdk/go/nsxt\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := nsxt.LookupUplinkHostSwitchProfile(ctx, \u0026nsxt.LookupUplinkHostSwitchProfileArgs{\n\t\t\tDisplayName: \"uplink_host_switch_profile1\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.nsxt.NsxtFunctions;\nimport com.pulumi.nsxt.inputs.GetUplinkHostSwitchProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var uplinkHostSwitchProfile = NsxtFunctions.getUplinkHostSwitchProfile(GetUplinkHostSwitchProfileArgs.builder()\n            .displayName(\"uplink_host_switch_profile1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  uplinkHostSwitchProfile:\n    fn::invoke:\n      Function: nsxt:getUplinkHostSwitchProfile\n      Arguments:\n        displayName: uplink_host_switch_profile1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUplinkHostSwitchProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The Display Name prefix of the uplink host switch profile to retrieve.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of uplink host switch profile to retrieve.\n"
                    }
                },
                "type": "object",
                "required": [
                    "displayName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUplinkHostSwitchProfile.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the resource.\n"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The NSX path of the policy resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "displayName",
                    "id",
                    "path"
                ]
            }
        }
    }
}